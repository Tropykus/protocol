{
  "language": "Solidity",
  "sources": {
    "contracts/BaseJumpRateModelV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./InterestRateModel.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title Logic for tropykus JumpRateModel Contract V2.\n * @author tropykus\n * @notice Version 2 modifies Version 1 by enabling updateable parameters.\n */\ncontract BaseJumpRateModelV2 is InterestRateModel {\n    using SafeMath for uint256;\n\n    event NewInterestParams(\n        uint256 baseRatePerBlock,\n        uint256 multiplierPerBlock,\n        uint256 jumpMultiplierPerBlock,\n        uint256 kink\n    );\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n\n    /**\n     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\n     */\n    address public owner;\n\n    /**\n     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\n     */\n    address public pendingAdmin;\n\n    /**\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\n     */\n    uint256 public multiplierPerBlock;\n\n    /**\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\n     */\n    uint256 public baseRatePerBlock;\n\n    /**\n     * @notice The multiplierPerBlock after hitting a specified utilization point\n     */\n    uint256 public jumpMultiplierPerBlock;\n\n    /**\n     * @notice The utilization point at which the jump multiplier is applied\n     */\n    uint256 public kink;\n\n    /**\n     * @notice Construct an interest rate model\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param kink_ The utilization point at which the jump multiplier is applied\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\n     */\n    constructor(\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_,\n        address owner_\n    ) {\n        owner = owner_;\n        emit NewAdmin(owner);\n        updateJumpRateModelInternal(\n            baseRatePerYear,\n            multiplierPerYear,\n            jumpMultiplierPerYear,\n            kink_\n        );\n    }\n\n    /**\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param kink_ The utilization point at which the jump multiplier is applied\n     */\n    function updateJumpRateModel(\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_\n    ) external {\n        require(msg.sender == owner, \"only the owner may call this function.\");\n\n        updateJumpRateModelInternal(\n            baseRatePerYear,\n            multiplierPerYear,\n            jumpMultiplierPerYear,\n            kink_\n        );\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per block\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) external view override returns (uint256) {\n        return getBorrowRateInternal(cash, borrows, reserves);\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getBorrowRateInternal(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) internal view returns (uint256) {\n        uint256 util = utilizationRate(cash, borrows, reserves);\n\n        if (util <= kink) {\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n        } else {\n            uint256 normalRate = kink.mul(multiplierPerBlock).div(1e18).add(\n                baseRatePerBlock\n            );\n            uint256 excessUtil = util.sub(kink);\n            return\n                excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(\n                    normalRate\n                );\n        }\n    }\n\n    /**\n     * @notice Calculates the current supply rate per block\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @param reserveFactorMantissa The current reserve factor for the market\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) public view override returns (uint256) {\n        uint256 oneMinusReserveFactor = uint256(1e18).sub(\n            reserveFactorMantissa\n        );\n        uint256 borrowRate = getBorrowRateInternal(cash, borrows, reserves);\n        uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n        return\n            utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n    }\n\n    /**\n     * @notice Internal function to update the parameters of the interest rate model\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param kink_ The utilization point at which the jump multiplier is applied\n     */\n    function updateJumpRateModelInternal(\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_\n    ) internal {\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(\n            blocksPerYear.mul(kink_)\n        );\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\n        kink = kink_;\n\n        emit NewInterestParams(\n            baseRatePerBlock,\n            multiplierPerBlock,\n            jumpMultiplierPerBlock,\n            kink\n        );\n    }\n\n    function acceptAdmin() public {\n        require(\n            msg.sender == pendingAdmin,\n            \"BaseJumpRateModelV2::acceptAdmin: Call must come from pendingAdmin.\"\n        );\n        owner = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(owner);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        require(\n            msg.sender == owner,\n            \"BaseJumpRateModelV2::setPendingAdmin: Call must come from owner.\"\n        );\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n}\n"
    },
    "contracts/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./Exponential.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title tropykus InterestRateModel Interface\n * @author tropykus\n */\nabstract contract InterestRateModel is Exponential {\n    using SafeMath for uint256;\n\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n    bool public constant isInterestRateModel = true;\n    bool public isTropykusInterestRateModel;\n\n    /**\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\n     */\n    uint256 public constant blocksPerYear = 1051200;\n\n    /**\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market (currently unused)\n     * @return The utilization rate as a mantissa between [0, 1e18]\n     */\n    function utilizationRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public pure virtual returns (uint256) {\n        // Utilization rate is 0 when there are no borrows\n        if (borrows == 0) {\n            return 0;\n        }\n\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\n    }\n\n    /**\n     * @notice Calculates the current borrow interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amnount of reserves the market has\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) external view virtual returns (uint256);\n\n    /**\n     * @notice Calculates the current supply interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amnount of reserves the market has\n     * @param reserveFactorMantissa The current reserve factor the market has\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) external view virtual returns (uint256);\n\n    function getExchangeRate(\n        uint256 _totalCash,\n        uint256 _totalBorrows,\n        uint256 _totalReserves,\n        uint256 _totalSupply\n    ) public pure returns (MathError, uint256) {\n        /*\n         * exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n         */\n        Exp memory exchangeRate;\n        MathError mathErr;\n        uint256 cashPlusBorrowsMinusReserves;\n        (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\n            _totalCash,\n            _totalBorrows,\n            _totalReserves\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (mathErr, 0);\n        }\n        (mathErr, exchangeRate) = getExp(\n            cashPlusBorrowsMinusReserves,\n            _totalSupply\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (mathErr, 0);\n        }\n\n        return (MathError.NO_ERROR, exchangeRate.mantissa);\n    }\n\n    function isAboveOptimal(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public view virtual returns (bool) {\n        cash;\n        borrows;\n        reserves;\n        return false;\n    }\n}\n"
    },
    "contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n// Subject to the MIT license.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction underflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/Exponential.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CarefulMath.sol\";\nimport \"./ExponentialNoError.sol\";\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author tropykus\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\ncontract Exponential is CarefulMath, ExponentialNoError {\n    /**\n     * @dev Creates an exponential from numerator and denominator values.\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n     *            or if `denom` is zero.\n     */\n    function getExp(uint num, uint denom) internal pure  returns (MathError, Exp memory) {\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n    }\n\n    /**\n     * @dev Adds two exponentials, returning a new exponential.\n     */\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\n\n        return (error, Exp({mantissa: result}));\n    }\n\n    /**\n     * @dev Subtracts two exponentials, returning a new exponential.\n     */\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\n\n        return (error, Exp({mantissa: result}));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\n     */\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n     */\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(product));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n     */\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return addUInt(truncate(product), addend);\n    }\n\n    /**\n     * @dev Divide an Exp by a scalar, returning a new Exp.\n     */\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\n    }\n\n    /**\n     * @dev Divide a scalar by an Exp, returning a new Exp.\n     */\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\n        /*\n          We are doing this as:\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n\n          How it works:\n          Exp = a / b;\n          Scalar = s;\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n        */\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n        return getExp(numerator, divisor.mantissa);\n    }\n\n    /**\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\n     */\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(fraction));\n    }\n\n    /**\n     * @dev Multiplies two exponentials, returning a new exponential.\n     */\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        // We add half the scale before dividing so that we get rounding instead of truncation.\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n        assert(err2 == MathError.NO_ERROR);\n\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\n    }\n\n    /**\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\n     */\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\n    }\n\n    /**\n     * @dev Multiplies three exponentials, returning a new exponential.\n     */\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\n        (MathError err, Exp memory ab) = mulExp(a, b);\n        if (err != MathError.NO_ERROR) {\n            return (err, ab);\n        }\n        return mulExp(ab, c);\n    }\n\n    /**\n     * @dev Divides two exponentials, returning a new exponential.\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\n     */\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n        return getExp(a.mantissa, b.mantissa);\n    }\n}\n"
    },
    "contracts/CarefulMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\n/**\n  * @title Careful Math\n  * @author tropykus\n  * @notice Derived from OpenZeppelin's SafeMath library\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n  */\ncontract CarefulMath {\n\n    /**\n     * @dev Possible error codes that we can return\n     */\n    enum MathError {\n        NO_ERROR,\n        DIVISION_BY_ZERO,\n        INTEGER_OVERFLOW,\n        INTEGER_UNDERFLOW\n    }\n\n    /**\n    * @dev Multiplies two numbers, returns an error on overflow.\n    */\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (a == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        uint c = a * b;\n\n        if (c / a != b) {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        } else {\n            return (MathError.NO_ERROR, c);\n        }\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b == 0) {\n            return (MathError.DIVISION_BY_ZERO, 0);\n        }\n\n        return (MathError.NO_ERROR, a / b);\n    }\n\n    /**\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b <= a) {\n            return (MathError.NO_ERROR, a - b);\n        } else {\n            return (MathError.INTEGER_UNDERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev Adds two numbers, returns an error on overflow.\n    */\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        uint c = a + b;\n\n        if (c >= a) {\n            return (MathError.NO_ERROR, c);\n        } else {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev add a and b and then subtract c\n    */\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n        (MathError err0, uint sum) = addUInt(a, b);\n\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, 0);\n        }\n\n        return subUInt(sum, c);\n    }\n}\n"
    },
    "contracts/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author tropykus\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\ncontract ExponentialNoError {\n    uint constant expScale = 1e18;\n    uint constant doubleScale = 1e36;\n    uint constant halfExpScale = expScale/2;\n    uint constant mantissaOne = expScale;\n\n    struct Exp {\n        uint mantissa;\n    }\n\n    struct Double {\n        uint mantissa;\n    }\n\n    /**\n     * @dev Truncates the given exp to a whole number value.\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n     */\n    function truncate(Exp memory exp) pure internal returns (uint) {\n        // Note: We are not using careful math here as we're performing a division that cannot fail\n        return exp.mantissa / expScale;\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n     */\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\n        Exp memory product = mul_(a, scalar);\n        return truncate(product);\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n     */\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\n        Exp memory product = mul_(a, scalar);\n        return add_(truncate(product), addend);\n    }\n\n    /**\n     * @dev Checks if first Exp is less than second Exp.\n     */\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa < right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp <= right Exp.\n     */\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa <= right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp > right Exp.\n     */\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa > right.mantissa;\n    }\n\n    /**\n     * @dev returns true if Exp is exactly zero\n     */\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\n        return value.mantissa == 0;\n    }\n\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\n        require(n < 2**224, errorMessage);\n        return uint224(n);\n    }\n\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\n    }\n\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\n    }\n\n    function add_(uint a, uint b) pure internal returns (uint) {\n        return add_(a, b, \"addition overflow\");\n    }\n\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        uint c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\n    }\n\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\n    }\n\n    function sub_(uint a, uint b) pure internal returns (uint) {\n        return sub_(a, b, \"subtraction underflow\");\n    }\n\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\n    }\n\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\n        return Exp({mantissa: mul_(a.mantissa, b)});\n    }\n\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\n        return mul_(a, b.mantissa) / expScale;\n    }\n\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\n    }\n\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: mul_(a.mantissa, b)});\n    }\n\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\n        return mul_(a, b.mantissa) / doubleScale;\n    }\n\n    function mul_(uint a, uint b) pure internal returns (uint) {\n        return mul_(a, b, \"multiplication overflow\");\n    }\n\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        uint c = a * b;\n        require(c / a == b, errorMessage);\n        return c;\n    }\n\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\n    }\n\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\n        return Exp({mantissa: div_(a.mantissa, b)});\n    }\n\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\n        return div_(mul_(a, expScale), b.mantissa);\n    }\n\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\n    }\n\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(a.mantissa, b)});\n    }\n\n    function div_(uint a, Double memory b) pure internal returns (uint) {\n        return div_(mul_(a, doubleScale), b.mantissa);\n    }\n\n    function div_(uint a, uint b) pure internal returns (uint) {\n        return div_(a, b, \"divide by zero\");\n    }\n\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\n    }\n}\n"
    },
    "contracts/LegacyJumpRateModelV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./BaseJumpRateModelV2.sol\";\nimport \"./LegacyInterestRateModel.sol\";\n\n/**\n * @title tropykus JumpRateModel Contract V2 for legacy cTokens\n * @author tropykus\n * @notice Supports only legacy cTokens\n */\ncontract LegacyJumpRateModelV2 is BaseJumpRateModelV2 {\n    constructor(\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_,\n        address owner_\n    )\n        BaseJumpRateModelV2(\n            baseRatePerYear,\n            multiplierPerYear,\n            jumpMultiplierPerYear,\n            kink_,\n            owner_\n        )\n    {\n        isTropykusInterestRateModel = false;\n    }\n}\n"
    },
    "contracts/LegacyInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\n/**\n * @title tropykus Legacy InterestRateModel Interface\n * @author tropykus (modified by Arr00)\n */\nabstract contract LegacyInterestRateModel {\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n    bool public constant isInterestRateModel = true;\n\n    /**\n     * @notice Calculates the current supply interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amount of reserves the market has\n     * @param reserveFactorMantissa The current reserve factor the market has\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) external view virtual returns (uint256);\n}\n"
    },
    "contracts/JumpRateModelV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./BaseJumpRateModelV2.sol\";\n\n/**\n * @title tropykus JumpRateModel Contract V2 for V2 cTokens\n * @author tropykus\n * @notice Supports only for V2 cTokens\n */\ncontract JumpRateModelV2 is BaseJumpRateModelV2 {\n    constructor(\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_,\n        address owner_\n    )\n        BaseJumpRateModelV2(\n            baseRatePerYear,\n            multiplierPerYear,\n            jumpMultiplierPerYear,\n            kink_,\n            owner_\n        )\n    {\n        isTropykusInterestRateModel = false;\n    }\n}\n"
    },
    "contracts/WhitePaperInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./InterestRateModel.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title tropykus WhitePaperInterestRateModel Contract\n * @author tropykus\n * @notice The parameterized model described in section 2.4 of the original tropykus Protocol whitepaper\n */\ncontract WhitePaperInterestRateModel is InterestRateModel {\n    using SafeMath for uint256;\n\n    event NewInterestParams(\n        uint256 baseRatePerBlock,\n        uint256 multiplierPerBlock\n    );\n\n    /**\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\n     */\n    uint256 public multiplierPerBlock;\n\n    /**\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\n     */\n    uint256 public baseRatePerBlock;\n\n    /**\n     * @notice Construct an interest rate model\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n     */\n    constructor(uint256 baseRatePerYear, uint256 multiplierPerYear) {\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\n        multiplierPerBlock = multiplierPerYear.div(blocksPerYear);\n        isTropykusInterestRateModel = false;\n\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock);\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public view override returns (uint256) {\n        uint256 ur = utilizationRate(cash, borrows, reserves);\n        return ur.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n    }\n\n    /**\n     * @notice Calculates the current supply rate per block\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @param reserveFactorMantissa The current reserve factor for the market\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) public view override returns (uint256) {\n        uint256 oneMinusReserveFactor = uint256(1e18).sub(\n            reserveFactorMantissa\n        );\n        uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\n        uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n        return\n            utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n    }\n}\n"
    },
    "contracts/JumpRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./InterestRateModel.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title tropykus JumpRateModel Contract\n * @author tropykus\n */\ncontract JumpRateModel is InterestRateModel {\n    using SafeMath for uint256;\n\n    event NewInterestParams(\n        uint256 baseRatePerBlock,\n        uint256 multiplierPerBlock,\n        uint256 jumpMultiplierPerBlock,\n        uint256 kink\n    );\n\n    /**\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\n     */\n    uint256 public multiplierPerBlock;\n\n    /**\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\n     */\n    uint256 public baseRatePerBlock;\n\n    /**\n     * @notice The multiplierPerBlock after hitting a specified utilization point\n     */\n    uint256 public jumpMultiplierPerBlock;\n\n    /**\n     * @notice The utilization point at which the jump multiplier is applied\n     */\n    uint256 public kink;\n\n    /**\n     * @notice Construct an interest rate model\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param kink_ The utilization point at which the jump multiplier is applied\n     */\n    constructor(\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_\n    ) {\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\n        multiplierPerBlock = multiplierPerYear.div(blocksPerYear);\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\n        kink = kink_;\n\n        emit NewInterestParams(\n            baseRatePerBlock,\n            multiplierPerBlock,\n            jumpMultiplierPerBlock,\n            kink\n        );\n    }\n\n    /**\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market (currently unused)\n     * @return The utilization rate as a mantissa between [0, 1e18]\n     */\n    function utilizationRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public pure override returns (uint256) {\n        // Utilization rate is 0 when there are no borrows\n        if (borrows == 0) {\n            return 0;\n        }\n\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public view override returns (uint256) {\n        uint256 util = utilizationRate(cash, borrows, reserves);\n\n        if (util <= kink) {\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n        } else {\n            uint256 normalRate = kink.mul(multiplierPerBlock).div(1e18).add(\n                baseRatePerBlock\n            );\n            uint256 excessUtil = util.sub(kink);\n            return\n                excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(\n                    normalRate\n                );\n        }\n    }\n\n    /**\n     * @notice Calculates the current supply rate per block\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @param reserveFactorMantissa The current reserve factor for the market\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) public view override returns (uint256) {\n        uint256 oneMinusReserveFactor = uint256(1e18).sub(\n            reserveFactorMantissa\n        );\n        uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\n        uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n        return\n            utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n    }\n}\n"
    },
    "contracts/HurricaneInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./InterestRateModel.sol\";\n\ncontract HurricaneInterestRateModel is InterestRateModel {\n    using SafeMath for uint256;\n\n    address public owner;\n    uint256 public baseBorrowRatePerBlock;\n    uint256 public promisedBaseReturnRatePerBlock;\n    uint256 public optimalUtilizationRate;\n    uint256 public borrowRateSlopePerBlock;\n    uint256 public supplyRateSlopePerBlock;\n\n    uint256 constant FACTOR = 1e18;\n\n    constructor(\n        uint256 _baseBorrowRate,\n        uint256 _promisedBaseReturnRate,\n        uint256 _optimalUtilizationRate,\n        uint256 _borrowRateSlope,\n        uint256 _supplyRateSlope\n    ) {\n        baseBorrowRatePerBlock = _baseBorrowRate.div(blocksPerYear);\n        promisedBaseReturnRatePerBlock = _promisedBaseReturnRate.div(\n            blocksPerYear\n        );\n        optimalUtilizationRate = _optimalUtilizationRate;\n        borrowRateSlopePerBlock = _borrowRateSlope.div(blocksPerYear);\n        supplyRateSlopePerBlock = _supplyRateSlope.div(blocksPerYear);\n        owner = msg.sender;\n        isTropykusInterestRateModel = true;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"You are not allowed to perform this action\"\n        );\n        _;\n    }\n\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) public view override returns (uint256) {\n        reserveFactorMantissa;\n        uint256 utilizationRate = utilizationRate(cash, borrows, reserves);\n        return\n            utilizationRate.mul(supplyRateSlopePerBlock).div(FACTOR).add(\n                promisedBaseReturnRatePerBlock\n            );\n    }\n\n    function getBorrowRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public view override returns (uint256 borrowRate) {\n        uint256 utilizationRate = utilizationRate(cash, borrows, reserves);\n        borrowRate = utilizationRate\n        .mul(borrowRateSlopePerBlock)\n        .div(FACTOR)\n        .add(baseBorrowRatePerBlock);\n    }\n\n    function isAboveOptimal(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public view override returns (bool) {\n        uint256 utilizationRate = utilizationRate(cash, borrows, reserves);\n        return utilizationRate > optimalUtilizationRate;\n    }\n}\n"
    },
    "contracts/CTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./InterestRateModel.sol\";\nimport \"./EIP20NonStandardInterface.sol\";\n\ncontract CTokenStorage {\n    /**\n     * @dev Guard variable for re-entrancy checks\n     */\n    bool internal _notEntered;\n\n    /**\n     * @notice EIP-20 token name for this token\n     */\n    string public name;\n\n    /**\n     * @notice EIP-20 token symbol for this token\n     */\n    string public symbol;\n\n    /**\n     * @notice EIP-20 token decimals for this token\n     */\n    uint8 public decimals;\n\n    /**\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\n     */\n\n    uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\n\n    /**\n     * @notice Maximum fraction of interest that can be set aside for reserves\n     */\n    uint256 internal constant reserveFactorMaxMantissa = 1e18;\n\n    /**\n     * @notice Administrator for this contract\n     */\n    address payable public admin;\n\n    /**\n     * @notice Pending administrator for this contract\n     */\n    address payable public pendingAdmin;\n\n    /**\n     * @notice Contract which oversees inter-cToken operations\n     */\n    ComptrollerInterface public comptroller;\n\n    /**\n     * @notice Model which tells what the current interest rate should be\n     */\n    InterestRateModel public interestRateModel;\n\n    /**\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\n     */\n    uint256 public initialExchangeRateMantissa;\n\n    /**\n     * @notice Fraction of interest currently set aside for reserves\n     */\n    uint256 public reserveFactorMantissa;\n\n    /**\n     * @notice Block number that interest was last accrued at\n     */\n    uint256 public accrualBlockNumber;\n\n    /**\n     * @notice Accumulator of the total earned interest rate since the opening of the market\n     */\n    uint256 public borrowIndex;\n\n    /**\n     * @notice Total amount of outstanding borrows of the underlying in this market\n     */\n    uint256 public totalBorrows;\n\n    /**\n     * @notice Total amount of reserves of the underlying held in this market\n     */\n    uint256 public totalReserves;\n\n    /**\n     * @notice Total number of tokens in circulation\n     */\n    uint256 public totalSupply;\n\n    uint256 public subsidyFund;\n\n    struct SupplySnapshot {\n        uint256 tokens;\n        uint256 underlyingAmount;\n        uint256 suppliedAt;\n        uint256 promisedSupplyRate;\n    }\n\n    /**\n     * @notice Official record of token balances for each account\n     */\n    mapping(address => SupplySnapshot) internal accountTokens;\n\n    /**\n     * @notice Approved token transfer amounts on behalf of others\n     */\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\n\n    /**\n     * @notice Container for borrow balance information\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n     */\n    struct BorrowSnapshot {\n        uint256 principal;\n        uint256 interestIndex;\n    }\n\n    /**\n     * @notice Mapping of account addresses to outstanding borrow balances\n     */\n    mapping(address => BorrowSnapshot) internal accountBorrows;\n}\n\nabstract contract CTokenInterface is CTokenStorage {\n    /**\n     * @notice Indicator that this is a CToken contract (for inspection)\n     */\n    bool public constant isCToken = true;\n\n    /*** Market Events ***/\n\n    /**\n     * @notice Event emitted when interest is accrued\n     */\n    event AccrueInterest(\n        uint256 cashPrior,\n        uint256 interestAccumulated,\n        uint256 borrowIndex,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when tokens are minted\n     */\n    event Mint(address indexed minter, uint256 mintAmount, uint256 mintTokens);\n\n    /**\n     * @notice Event emitted when tokens are redeemed\n     */\n    event Redeem(\n        address indexed redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    );\n\n    /**\n     * @notice Event emitted when underlying is borrowed\n     */\n    event Borrow(\n        address indexed borrower,\n        uint256 borrowAmount,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when a borrow is repaid\n     */\n    event RepayBorrow(\n        address indexed payer,\n        address indexed borrower,\n        uint256 repayAmount,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when a borrow is liquidated\n     */\n    event LiquidateBorrow(\n        address indexed liquidator,\n        address indexed borrower,\n        uint256 repayAmount,\n        address indexed cTokenCollateral,\n        uint256 seizeTokens\n    );\n\n    /*** Admin Events ***/\n\n    /**\n     * @notice Event emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    /**\n     * @notice Event emitted when comptroller is changed\n     */\n    event NewComptroller(\n        ComptrollerInterface oldComptroller,\n        ComptrollerInterface newComptroller\n    );\n\n    /**\n     * @notice Event emitted when interestRateModel is changed\n     */\n    event NewMarketInterestRateModel(\n        InterestRateModel oldInterestRateModel,\n        InterestRateModel newInterestRateModel\n    );\n\n    /**\n     * @notice Event emitted when the reserve factor is changed\n     */\n    event NewReserveFactor(\n        uint256 oldReserveFactorMantissa,\n        uint256 newReserveFactorMantissa\n    );\n\n    /**\n     * @notice Event emitted when the reserves are added\n     */\n    event ReservesAdded(\n        address benefactor,\n        uint256 addAmount,\n        uint256 newTotalReserves\n    );\n\n    event SubsidyAdded(\n        address benefactor,\n        uint256 addAmount,\n        uint256 newSubsidyFund\n    );\n\n    /**\n     * @notice Event emitted when the reserves are reduced\n     */\n    event ReservesReduced(\n        address admin,\n        uint256 reduceAmount,\n        uint256 newTotalReserves\n    );\n\n    /**\n     * @notice EIP20 Transfer event\n     */\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /**\n     * @notice EIP20 Approval event\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    /**\n     * @notice Failure event\n     */\n    event CTokenStorageFailure(uint256 error, uint256 info, uint256 detail);\n\n    /*** User Interface ***/\n\n    function transfer(address dst, uint256 amount)\n        external\n        virtual\n        returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external virtual returns (bool);\n\n    function approve(address spender, uint256 amount)\n        external\n        virtual\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        virtual\n        returns (uint256);\n\n    function balanceOf(address owner) external view virtual returns (uint256);\n\n    function balanceOfUnderlying(address owner)\n        external\n        virtual\n        returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        virtual\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function borrowRatePerBlock() external view virtual returns (uint256);\n\n    function supplyRatePerBlock() external view virtual returns (uint256);\n\n    function totalBorrowsCurrent() external virtual returns (uint256);\n\n    function borrowBalanceCurrent(address account)\n        external\n        virtual\n        returns (uint256);\n\n    function borrowBalanceStored(address account)\n        public\n        view\n        virtual\n        returns (uint256);\n\n    function exchangeRateCurrent() public virtual returns (uint256);\n\n    function exchangeRateStored() public view virtual returns (uint256);\n\n    function getCash() external view virtual returns (uint256);\n\n    function accrueInterest() public virtual returns (uint256);\n\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external virtual returns (uint256);\n\n    /*** Admin Functions ***/\n\n    function _setPendingAdmin(address payable newPendingAdmin)\n        external\n        virtual\n        returns (uint256);\n\n    function _acceptAdmin() external virtual returns (uint256);\n\n    function _setComptroller(ComptrollerInterface newComptroller)\n        public\n        virtual\n        returns (uint256);\n\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\n        external\n        virtual\n        returns (uint256);\n\n    function _reduceReserves(uint256 reduceAmount)\n        external\n        virtual\n        returns (uint256);\n\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\n        public\n        virtual\n        returns (uint256);\n}\n\ncontract CErc20Storage {\n    /**\n     * @notice Underlying asset for this CToken\n     */\n    address public underlying;\n}\n\nabstract contract CErc20Interface is CErc20Storage {\n    /*** User Interface ***/\n\n    function mint(uint256 mintAmount) external virtual returns (uint256);\n\n    function redeem(uint256 redeemAmount)\n        external\n        virtual\n        returns (uint256);\n\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\n\n    function repayBorrow(uint256 repayAmount)\n        external\n        virtual\n        returns (uint256);\n\n    function liquidateBorrow(\n        address borrower,\n        uint256 repayAmount,\n        CTokenInterface cTokenCollateral\n    ) external virtual returns (uint256);\n\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\n\n    /*** Admin Functions ***/\n\n    function _addReserves(uint256 addAmount) external virtual returns (uint256);\n}\n\ncontract CDelegationStorage {\n    /**\n     * @notice Implementation address for this contract\n     */\n    address public implementation;\n}\n\nabstract contract CDelegatorInterface is CDelegationStorage {\n    /**\n     * @notice Emitted when implementation is changed\n     */\n    event NewImplementation(\n        address oldImplementation,\n        address newImplementation\n    );\n\n    /**\n     * @notice Called by the admin to update the implementation of the delegator\n     * @param implementation_ The address of the new implementation for delegation\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n     */\n    function _setImplementation(\n        address implementation_,\n        bool allowResign,\n        bytes memory becomeImplementationData\n    ) public virtual;\n}\n\nabstract contract CDelegateInterface is CDelegationStorage {\n    /**\n     * @notice Called by the delegator on a delegate to initialize it for duty\n     * @dev Should revert if any issues arise which make it unfit for delegation\n     * @param data The encoded bytes data for any initialization\n     */\n    function _becomeImplementation(bytes memory data) public virtual;\n\n    /**\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\n     */\n    function _resignImplementation() public virtual;\n}\n"
    },
    "contracts/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nabstract contract ComptrollerInterface {\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\n    bool public constant isComptroller = true;\n\n    /*** Assets You Are In ***/\n\n    function enterMarkets(address[] calldata cTokens)\n        external\n        virtual\n        returns (uint256[] memory);\n\n    function exitMarket(address cToken) external virtual returns (uint256);\n\n    /*** Policy Hooks ***/\n\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external virtual returns (uint256);\n\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 mintAmount,\n        uint256 mintTokens\n    ) external virtual;\n\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external virtual returns (uint256);\n\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external virtual;\n\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external virtual returns (uint256);\n\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external virtual;\n\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external virtual returns (uint256);\n\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount,\n        uint256 borrowerIndex\n    ) external virtual;\n\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external virtual returns (uint256);\n\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        uint256 seizeTokens\n    ) external virtual;\n\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external virtual returns (uint256);\n\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external virtual;\n\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external virtual returns (uint256);\n\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external virtual;\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 repayAmount\n    ) external view virtual returns (uint256, uint256);\n}\n"
    },
    "contracts/EIP20NonStandardInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\n/**\n * @title EIP20NonStandardInterface\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n */\ninterface EIP20NonStandardInterface {\n    /**\n     * @notice Get the total number of tokens in circulation\n     * @return The supply of tokens\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return balance The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    ///\n    /// !!!!!!!!!!!!!!\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n    /// !!!!!!!!!!!!!!\n    ///\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     */\n    function transfer(address dst, uint256 amount) external;\n\n    ///\n    /// !!!!!!!!!!!!!!\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n    /// !!!!!!!!!!!!!!\n    ///\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved\n     * @return success Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount)\n        external\n        returns (bool success);\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return remaining The number of tokens allowed to be spent\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n}\n"
    },
    "contracts/CErc20Delegator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CTokenInterfaces.sol\";\n\n/**\n * @title tropykus CErc20Delegator Contract\n * @notice CTokens which wrap an EIP-20 underlying and delegate to an implementation\n * @author tropykus\n */\ncontract CErc20Delegator is\n    CTokenInterface,\n    CErc20Interface,\n    CDelegatorInterface\n{\n    /**\n     * @notice Construct a new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     * @param admin_ Address of the administrator of this token\n     * @param implementation_ The address of the implementation the contract delegates to\n     * @param becomeImplementationData The encoded args for becomeImplementation\n     */\n    constructor(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address payable admin_,\n        address implementation_,\n        bytes memory becomeImplementationData\n    ) {\n        // Creator of the contract is admin during initialization\n        admin = payable(msg.sender);\n\n        // First delegate gets to initialize the delegator (i.e. storage contract)\n        delegateTo(\n            implementation_,\n            abi.encodeWithSignature(\n                \"initialize(address,address,address,uint256,string,string,uint8)\",\n                underlying_,\n                comptroller_,\n                interestRateModel_,\n                initialExchangeRateMantissa_,\n                name_,\n                symbol_,\n                decimals_\n            )\n        );\n\n        // New implementations always get set via the settor (post-initialize)\n        _setImplementation(implementation_, false, becomeImplementationData);\n\n        // Set the proper admin now that initialization is done\n        admin = admin_;\n    }\n\n    /**\n     * @notice Called by the admin to update the implementation of the delegator\n     * @param implementation_ The address of the new implementation for delegation\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n     */\n    function _setImplementation(\n        address implementation_,\n        bool allowResign,\n        bytes memory becomeImplementationData\n    ) public override {\n        require(\n            msg.sender == admin,\n            \"CErc20Delegator::_setImplementation: Caller must be admin\"\n        );\n\n        if (allowResign) {\n            delegateToImplementation(\n                abi.encodeWithSignature(\"_resignImplementation()\")\n            );\n        }\n\n        address oldImplementation = implementation;\n        implementation = implementation_;\n\n        delegateToImplementation(\n            abi.encodeWithSignature(\n                \"_becomeImplementation(bytes)\",\n                becomeImplementationData\n            )\n        );\n\n        emit NewImplementation(oldImplementation, implementation);\n    }\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function mint(uint256 mintAmount) external override returns (uint256) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"mint(uint256)\", mintAmount)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint256 redeemAmount)\n        external\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"redeemUnderlying(uint256)\", redeemAmount)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Sender borrows assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function borrow(uint256 borrowAmount) external override returns (uint256) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"borrow(uint256)\", borrowAmount)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrow(uint256 repayAmount)\n        external\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"repayBorrow(uint256)\", repayAmount)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function liquidateBorrow(\n        address borrower,\n        uint256 repayAmount,\n        CTokenInterface cTokenCollateral\n    ) external override returns (uint256) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\n                \"liquidateBorrow(address,uint256,address)\",\n                borrower,\n                repayAmount,\n                cTokenCollateral\n            )\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"transfer(address,uint256)\", dst, amount)\n        );\n        return abi.decode(data, (bool));\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external override returns (bool) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                src,\n                dst,\n                amount\n            )\n        );\n        return abi.decode(data, (bool));\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"approve(address,uint256)\", spender, amount)\n        );\n        return abi.decode(data, (bool));\n    }\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return The number of tokens allowed to be spent (-1 means infinite)\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToViewImplementation(\n            abi.encodeWithSignature(\n                \"allowance(address,address)\",\n                owner,\n                spender\n            )\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Get the token balance of the `owner`\n     * @param owner The address of the account to query\n     * @return The number of tokens owned by `owner`\n     */\n    function balanceOf(address owner) external view override returns (uint256) {\n        bytes memory data = delegateToViewImplementation(\n            abi.encodeWithSignature(\"balanceOf(address)\", owner)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Get the underlying balance of the `owner`\n     * @dev This also accrues interest in a transaction\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(address owner)\n        external\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"balanceOfUnderlying(address)\", owner)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\n     * @param account Address of the account to snapshot\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\n     */\n    function getAccountSnapshot(address account)\n        external\n        view\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        bytes memory data = delegateToViewImplementation(\n            abi.encodeWithSignature(\"getAccountSnapshot(address)\", account)\n        );\n        return abi.decode(data, (uint256, uint256, uint256, uint256));\n    }\n\n    /**\n     * @notice Returns the current per-block borrow interest rate for this cToken\n     * @return The borrow interest rate per block, scaled by 1e18\n     */\n    function borrowRatePerBlock() external view override returns (uint256) {\n        bytes memory data = delegateToViewImplementation(\n            abi.encodeWithSignature(\"borrowRatePerBlock()\")\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this cToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() external view override returns (uint256) {\n        bytes memory data = delegateToViewImplementation(\n            abi.encodeWithSignature(\"supplyRatePerBlock()\")\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Returns the current total borrows plus accrued interest\n     * @return The total borrows with interest\n     */\n    function totalBorrowsCurrent() external override returns (uint256) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"totalBorrowsCurrent()\")\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n     * @param account The address whose balance should be calculated after updating borrowIndex\n     * @return The calculated balance\n     */\n    function borrowBalanceCurrent(address account)\n        external\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"borrowBalanceCurrent(address)\", account)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return The calculated balance\n     */\n    function borrowBalanceStored(address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToViewImplementation(\n            abi.encodeWithSignature(\"borrowBalanceStored(address)\", account)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() public override returns (uint256) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"exchangeRateCurrent()\")\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() public view override returns (uint256) {\n        bytes memory data = delegateToViewImplementation(\n            abi.encodeWithSignature(\"exchangeRateStored()\")\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Get cash balance of this cToken in the underlying asset\n     * @return The quantity of underlying asset owned by this contract\n     */\n    function getCash() external view override returns (uint256) {\n        bytes memory data = delegateToViewImplementation(\n            abi.encodeWithSignature(\"getCash()\")\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Applies accrued interest to total borrows and reserves.\n     * @dev This calculates interest accrued from the last checkpointed block\n     *      up to the current block and writes new checkpoint to storage.\n     */\n    function accrueInterest() public override returns (uint256) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"accrueInterest()\")\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Will fail unless called by another cToken during the process of liquidation.\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override returns (uint256) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\n                \"seize(address,address,uint256)\",\n                liquidator,\n                borrower,\n                seizeTokens\n            )\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\n     * @param token The address of the ERC-20 token to sweep\n     */\n    function sweepToken(EIP20NonStandardInterface token) external override {\n        delegateToImplementation(\n            abi.encodeWithSignature(\"sweepToken(address)\", token)\n        );\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @param newPendingAdmin New pending admin.\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPendingAdmin(address payable newPendingAdmin)\n        external\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\n                \"_setPendingAdmin(address)\",\n                newPendingAdmin\n            )\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Sets a new comptroller for the market\n     * @dev Admin function to set a new comptroller\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setComptroller(ComptrollerInterface newComptroller)\n        public\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"_setComptroller(address)\", newComptroller)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n     * @dev Admin function to accrue interest and set a new reserve factor\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\n        external\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\n                \"_setReserveFactor(uint256)\",\n                newReserveFactorMantissa\n            )\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n     * @dev Admin function for pending admin to accept role and update admin\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _acceptAdmin() external override returns (uint256) {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"_acceptAdmin()\")\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Accrues interest and adds reserves by transferring from admin\n     * @param addAmount Amount of reserves to add\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReserves(uint256 addAmount)\n        external\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"_addReserves(uint256)\", addAmount)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring to admin\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReserves(uint256 reduceAmount)\n        external\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\"_reduceReserves(uint256)\", reduceAmount)\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\n     * @dev Admin function to accrue interest and update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\n        public\n        override\n        returns (uint256)\n    {\n        bytes memory data = delegateToImplementation(\n            abi.encodeWithSignature(\n                \"_setInterestRateModel(address)\",\n                newInterestRateModel\n            )\n        );\n        return abi.decode(data, (uint256));\n    }\n\n    /**\n     * @notice Internal method to delegate execution to another contract\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n     * @param callee The contract to delegatecall\n     * @param data The raw data to delegatecall\n     * @return The returned bytes from the delegatecall\n     */\n    function delegateTo(address callee, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n        assembly {\n            if eq(success, 0) {\n                revert(add(returnData, 0x20), returndatasize())\n            }\n        }\n        return returnData;\n    }\n\n    /**\n     * @notice Delegates execution to the implementation contract\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n     * @param data The raw data to delegatecall\n     * @return The returned bytes from the delegatecall\n     */\n    function delegateToImplementation(bytes memory data)\n        public\n        returns (bytes memory)\n    {\n        return delegateTo(implementation, data);\n    }\n\n    /**\n     * @notice Delegates execution to an implementation contract\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\n     * @param data The raw data to delegatecall\n     * @return The returned bytes from the delegatecall\n     */\n    function delegateToViewImplementation(bytes memory data)\n        public\n        view\n        returns (bytes memory)\n    {\n        (bool success, bytes memory returnData) = address(this).staticcall(\n            abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data)\n        );\n        assembly {\n            if eq(success, 0) {\n                revert(add(returnData, 0x20), returndatasize())\n            }\n        }\n        return abi.decode(returnData, (bytes));\n    }\n\n    /**\n     * @notice Delegates execution to an implementation contract\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n     */\n    function internalFallback() public payable {\n        require(\n            msg.value == 0,\n            \"CErc20Delegator:fallback: cannot send value to fallback\"\n        );\n\n        // delegate all other functions to current implementation\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n        assembly {\n            let free_mem_ptr := mload(0x40)\n            returndatacopy(free_mem_ptr, 0, returndatasize())\n\n            switch success\n            case 0 {\n                revert(free_mem_ptr, returndatasize())\n            }\n            default {\n                return(free_mem_ptr, returndatasize())\n            }\n        }\n    }\n\n    fallback() external payable {\n        internalFallback();\n    }\n\n    receive() external payable {\n        internalFallback();\n    }\n}\n"
    },
    "contracts/ComptrollerG6.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\nimport \"./Governance/TROP.sol\";\n\n/**\n * @title tropykus Comptroller Contract\n * @author tropykus\n */\ncontract ComptrollerG6 is\n    ComptrollerV5Storage,\n    ComptrollerInterface,\n    ComptrollerErrorReporter,\n    ExponentialNoError\n{\n    /// @notice Emitted when an admin supports a market\n    event MarketListed(CToken cToken);\n\n    /// @notice Emitted when an account enters a market\n    event MarketEntered(CToken cToken, address account);\n\n    /// @notice Emitted when an account exits a market\n    event MarketExited(CToken cToken, address account);\n\n    /// @notice Emitted when close factor is changed by admin\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /// @notice Emitted when a collateral factor is changed by admin\n    event NewCollateralFactor(\n        CToken cToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /// @notice Emitted when liquidation incentive is changed by admin\n    event NewLiquidationIncentive(\n        uint256 oldLiquidationIncentiveMantissa,\n        uint256 newLiquidationIncentiveMantissa\n    );\n\n    /// @notice Emitted when price oracle is changed\n    event NewPriceOracle(\n        PriceOracle oldPriceOracle,\n        PriceOracle newPriceOracle\n    );\n\n    /// @notice Emitted when pause guardian is changed\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n    /// @notice Emitted when an action is paused globally\n    event ActionPaused(string action, bool pauseState);\n\n    /// @notice Emitted when an action is paused on a market\n    event ActionPaused(CToken cToken, string action, bool pauseState);\n\n    /// @notice Emitted when market comped status is changed\n    event MarketComped(CToken cToken, bool isComped);\n\n    /// @notice Emitted when COMP rate is changed\n    event NewCompRate(uint256 oldCompRate, uint256 newCompRate);\n\n    /// @notice Emitted when a new COMP speed is calculated for a market\n    event CompSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\n\n    /// @notice Emitted when a new COMP speed is set for a contributor\n    event ContributorCompSpeedUpdated(\n        address indexed contributor,\n        uint256 newSpeed\n    );\n\n    /// @notice Emitted when COMP is distributed to a supplier\n    event DistributedSupplierComp(\n        CToken indexed cToken,\n        address indexed supplier,\n        uint256 compDelta,\n        uint256 compSupplyIndex\n    );\n\n    /// @notice Emitted when COMP is distributed to a borrower\n    event DistributedBorrowerComp(\n        CToken indexed cToken,\n        address indexed borrower,\n        uint256 compDelta,\n        uint256 compBorrowIndex\n    );\n\n    /// @notice Emitted when borrow cap for a cToken is changed\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\n\n    /// @notice Emitted when borrow cap guardian is changed\n    event NewBorrowCapGuardian(\n        address oldBorrowCapGuardian,\n        address newBorrowCapGuardian\n    );\n\n    /// @notice Emitted when COMP is granted by admin\n    event CompGranted(address recipient, uint256 amount);\n\n    /// @notice The threshold above which the flywheel transfers COMP, in wei\n    uint256 public constant compClaimThreshold = 0.001e18;\n\n    /// @notice The initial COMP index for a market\n    uint224 public constant compInitialIndex = 1e36;\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(address account)\n        external\n        view\n        returns (CToken[] memory)\n    {\n        CToken[] memory assetsIn = accountAssets[account];\n\n        return assetsIn;\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(address account, CToken cToken)\n        external\n        view\n        returns (bool)\n    {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(address[] memory cTokens)\n        public\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = cTokens.length;\n\n        uint256[] memory results = new uint256[](len);\n        for (uint256 i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n     * @param cToken The market to enter\n     * @param borrower The address of the account to modify\n     * @return Success indicator for whether the market was entered\n     */\n    function addToMarketInternal(CToken cToken, address borrower)\n        internal\n        returns (Error)\n    {\n        Market storage marketToJoin = markets[address(cToken)];\n\n        if (!marketToJoin.isListed) {\n            // market is not listed, cannot join\n            return Error.MARKET_NOT_LISTED;\n        }\n\n        if (marketToJoin.accountMembership[borrower] == true) {\n            // already joined\n            return Error.NO_ERROR;\n        }\n\n        // survived the gauntlet, add to list\n        // NOTE: we store these somewhat redundantly as a significant optimization\n        //  this avoids having to iterate through the list for the most common use cases\n        //  that is, only when we need to perform liquidity checks\n        //  and not whenever we want to check if an account is in a particular market\n        marketToJoin.accountMembership[borrower] = true;\n        accountAssets[borrower].push(cToken);\n\n        emit MarketEntered(cToken, borrower);\n\n        return Error.NO_ERROR;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing necessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(address cTokenAddress)\n        external\n        override\n        returns (uint256)\n    {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\n        .getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return\n                fail(\n                    Error.NONZERO_BORROW_BALANCE,\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\n                );\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint256 allowed = redeemAllowedInternal(\n            cTokenAddress,\n            msg.sender,\n            tokensHeld\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.REJECTION,\n                    FailureInfo.EXIT_MARKET_REJECTION,\n                    allowed\n                );\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        accountAssets[msg.sender] = new CToken[](0);\n        CToken[] storage newMarketList = accountAssets[msg.sender];\n        uint256 len = userAssetList.length;\n        uint256 assetIndex = len;\n        for (uint256 i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                continue;\n            }\n            newMarketList.push(userAssetList[i]);\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    /**\n     * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!mintGuardianPaused[cToken], \"mint is paused\");\n\n        // Shh - currently unused\n        minter;\n        mintAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, minter, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param actualMintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 actualMintAmount,\n        uint256 mintTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        minter;\n        actualMintAmount;\n        mintTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external override returns (uint256) {\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, redeemer, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function redeemAllowedInternal(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) internal view returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            redeemer,\n            CToken(cToken),\n            redeemTokens,\n            0\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external pure override {\n        // Shh - currently unused\n        cToken;\n        redeemer;\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"redeemTokens zero\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        Error err;\n        uint256 shortfall;\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            // only cTokens may call borrowAllowed if borrower not in market\n            require(msg.sender == cToken, \"sender must be cToken\");\n\n            // attempt to add borrower to the market\n            err = addToMarketInternal(CToken(msg.sender), borrower);\n            if (err != Error.NO_ERROR) {\n                return uint256(err);\n            }\n\n            // it should be impossible to break the important invariant\n            assert(markets[cToken].accountMembership[borrower]);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint256(Error.PRICE_ERROR);\n        }\n\n        uint256 borrowCap = borrowCaps[cToken];\n        // Borrow cap of 0 corresponds to unlimited borrowing\n        if (borrowCap != 0) {\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\n            uint256 nextTotalBorrows = add_(totalBorrows, borrowAmount);\n            require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\n        }\n\n        (err, , shortfall) = getHypotheticalAccountLiquidityInternal(\n            borrower,\n            CToken(cToken),\n            0,\n            borrowAmount\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        borrower;\n        borrowAmount;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external override returns (uint256) {\n        // Shh - currently unused\n        payer;\n        borrower;\n        repayAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 borrowerIndex\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        payer;\n        borrower;\n        actualRepayAmount;\n        borrowerIndex;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        // Shh - currently unused\n        liquidator;\n\n        if (\n            !markets[cTokenBorrowed].isListed ||\n            !markets[cTokenCollateral].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* The borrower must have shortfall in order to be liquidatable */\n        (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\n            borrower\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall == 0) {\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\n        }\n\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\n            borrower\n        );\n        uint256 maxClose = mul_ScalarTruncate(\n            Exp({mantissa: closeFactorMantissa}),\n            borrowBalance\n        );\n        if (repayAmount > maxClose) {\n            return uint256(Error.TOO_MUCH_REPAY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenBorrowed;\n        cTokenCollateral;\n        liquidator;\n        borrower;\n        actualRepayAmount;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!seizeGuardianPaused, \"seize is paused\");\n\n        // Shh - currently unused\n        seizeTokens;\n\n        if (\n            !markets[cTokenCollateral].isListed ||\n            !markets[cTokenBorrowed].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (\n            CToken(cTokenCollateral).comptroller() !=\n            CToken(cTokenBorrowed).comptroller()\n        ) {\n            return uint256(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cTokenCollateral);\n        distributeSupplierComp(cTokenCollateral, borrower, false);\n        distributeSupplierComp(cTokenCollateral, liquidator, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenCollateral;\n        cTokenBorrowed;\n        liquidator;\n        borrower;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, src, false);\n        distributeSupplierComp(cToken, dst, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        src;\n        dst;\n        transferTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 sumCollateral;\n        uint256 sumBorrowPlusEffects;\n        uint256 cTokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToDenom;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(address(0)),\n            0,\n            0\n        );\n\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account)\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        return\n            getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(cTokenModify),\n            redeemTokens,\n            borrowAmount\n        );\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint256 oErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint256 i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (\n                oErr,\n                vars.cTokenBalance,\n                vars.borrowBalance,\n                vars.exchangeRateMantissa\n            ) = asset.getAccountSnapshot(account);\n            if (oErr != 0) {\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({\n                mantissa: markets[address(asset)].collateralFactorMantissa\n            });\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            vars.tokensToDenom = mul_(\n                mul_(vars.collateralFactor, vars.exchangeRate),\n                vars.oraclePrice\n            );\n\n            // sumCollateral += tokensToDenom * cTokenBalance\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\n                vars.tokensToDenom,\n                vars.cTokenBalance,\n                vars.sumCollateral\n            );\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                vars.oraclePrice,\n                vars.borrowBalance,\n                vars.sumBorrowPlusEffects\n            );\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                    vars.tokensToDenom,\n                    redeemTokens,\n                    vars.sumBorrowPlusEffects\n                );\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                    vars.oraclePrice,\n                    borrowAmount,\n                    vars.sumBorrowPlusEffects\n                );\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (\n                Error.NO_ERROR,\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\n                0\n            );\n        } else {\n            return (\n                Error.NO_ERROR,\n                0,\n                vars.sumBorrowPlusEffects - vars.sumCollateral\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 actualRepayAmount\n    ) external view override returns (uint256, uint256) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenBorrowed)\n        );\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenCollateral)\n        );\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint256(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\n        .exchangeRateStored(); // Note: reverts on error\n        uint256 seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n\n        numerator = mul_(\n            Exp({mantissa: liquidationIncentiveMantissa}),\n            Exp({mantissa: priceBorrowedMantissa})\n        );\n        denominator = mul_(\n            Exp({mantissa: priceCollateralMantissa}),\n            Exp({mantissa: exchangeRateMantissa})\n        );\n        ratio = div_(numerator, denominator);\n\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\n\n        return (uint256(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\n                );\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the closeFactor used when liquidating borrows\n     * @dev Admin function to set closeFactor\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure\n     */\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        require(msg.sender == admin, \"only admin can set close factor\");\n\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param cToken The market to set the factor on\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCollateralFactor(\n        CToken cToken,\n        uint256 newCollateralFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\n                );\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return\n                fail(\n                    Error.MARKET_NOT_LISTED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\n                );\n        }\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.9\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_COLLATERAL_FACTOR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\n                );\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (\n            newCollateralFactorMantissa != 0 &&\n            oracle.getUnderlyingPrice(cToken) == 0\n        ) {\n            return\n                fail(\n                    Error.PRICE_ERROR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\n                );\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            cToken,\n            oldCollateralFactorMantissa,\n            newCollateralFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets liquidationIncentive\n     * @dev Admin function to set liquidationIncentive\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n                );\n        }\n\n        // Save current value for use in log\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(\n            oldLiquidationIncentiveMantissa,\n            newLiquidationIncentiveMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param cToken The address of the market (token) to list\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _supportMarket(CToken cToken) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\n                );\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return\n                fail(\n                    Error.MARKET_ALREADY_LISTED,\n                    FailureInfo.SUPPORT_MARKET_EXISTS\n                );\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        Market storage market = markets[address(cToken)];\n        market.isListed = true;\n        market.isComped = false;\n        market.collateralFactorMantissa = 0;\n\n        _addMarketInternal(address(cToken));\n\n        emit MarketListed(cToken);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _addMarketInternal(address cToken) internal {\n        for (uint256 i = 0; i < allMarkets.length; i++) {\n            require(allMarkets[i] != CToken(cToken), \"market already added\");\n        }\n        allMarkets.push(CToken(cToken));\n    }\n\n    /**\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n     */\n    function _setMarketBorrowCaps(\n        CToken[] calldata cTokens,\n        uint256[] calldata newBorrowCaps\n    ) external {\n        require(\n            msg.sender == admin || msg.sender == borrowCapGuardian,\n            \"only admin or borrow cap guardian can set borrow caps\"\n        );\n\n        uint256 numMarkets = cTokens.length;\n        uint256 numBorrowCaps = newBorrowCaps.length;\n\n        require(\n            numMarkets != 0 && numMarkets == numBorrowCaps,\n            \"invalid input\"\n        );\n\n        for (uint256 i = 0; i < numMarkets; i++) {\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\n        }\n    }\n\n    /**\n     * @notice Admin function to change the Borrow Cap Guardian\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\n     */\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\n        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\n\n        // Save current value for inclusion in log\n        address oldBorrowCapGuardian = borrowCapGuardian;\n\n        // Store borrowCapGuardian with value newBorrowCapGuardian\n        borrowCapGuardian = newBorrowCapGuardian;\n\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n    }\n\n    /**\n     * @notice Admin function to change the Pause Guardian\n     * @param newPauseGuardian The address of the new Pause Guardian\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _setPauseGuardian(address newPauseGuardian)\n        public\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\n                );\n        }\n\n        // Save current value for inclusion in log\n        address oldPauseGuardian = pauseGuardian;\n\n        // Store pauseGuardian with value newPauseGuardian\n        pauseGuardian = newPauseGuardian;\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        mintGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Mint\", state);\n        return state;\n    }\n\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        borrowGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Borrow\", state);\n        return state;\n    }\n\n    function _setTransferPaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        transferGuardianPaused = state;\n        emit ActionPaused(\"Transfer\", state);\n        return state;\n    }\n\n    function _setSeizePaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        seizeGuardianPaused = state;\n        emit ActionPaused(\"Seize\", state);\n        return state;\n    }\n\n    function _become(Unitroller unitroller) public {\n        require(\n            msg.sender == unitroller.admin(),\n            \"only unitroller admin can change brains\"\n        );\n        require(\n            unitroller._acceptImplementation() == 0,\n            \"change not authorized\"\n        );\n    }\n\n    /**\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\n     */\n    function adminOrInitializing() internal view returns (bool) {\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\n    }\n\n    /*** Comp Distribution ***/\n\n    /**\n     * @notice Recalculate and update COMP speeds for all COMP markets\n     */\n    function refreshCompSpeeds() public {\n        require(\n            msg.sender == tx.origin,\n            \"only externally owned accounts may refresh speeds\"\n        );\n        refreshCompSpeedsInternal();\n    }\n\n    function refreshCompSpeedsInternal() internal {\n        CToken[] memory allMarkets_ = allMarkets;\n\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets_[i];\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n            updateCompSupplyIndex(address(cToken));\n            updateCompBorrowIndex(address(cToken), borrowIndex);\n        }\n\n        Exp memory totalUtility = Exp({mantissa: 0});\n        Exp[] memory utilities = new Exp[](allMarkets_.length);\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets_[i];\n            if (markets[address(cToken)].isComped) {\n                Exp memory assetPrice = Exp({\n                    mantissa: oracle.getUnderlyingPrice(cToken)\n                });\n                Exp memory utility = mul_(assetPrice, cToken.totalBorrows());\n                utilities[i] = utility;\n                totalUtility = add_(totalUtility, utility);\n            }\n        }\n\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets[i];\n            uint256 newSpeed = totalUtility.mantissa > 0\n                ? mul_(compRate, div_(utilities[i], totalUtility))\n                : 0;\n            compSpeeds[address(cToken)] = newSpeed;\n            emit CompSpeedUpdated(cToken, newSpeed);\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the supply index\n     * @param cToken The market whose supply index to update\n     */\n    function updateCompSupplyIndex(address cToken) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        uint256 supplySpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(supplyState.block));\n        if (deltaBlocks > 0 && supplySpeed > 0) {\n            uint256 supplyTokens = CToken(cToken).totalSupply();\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\n            Double memory ratio = supplyTokens > 0\n                ? fraction(compAccrued, supplyTokens)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: supplyState.index}),\n                ratio\n            );\n            compSupplyState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"new index exceeds 224 bits\"),\n                block: safe32(blockNumber, \"block number exceeds 32 bits\")\n            });\n        } else if (deltaBlocks > 0) {\n            supplyState.block = safe32(\n                blockNumber,\n                \"block number exceeds 32 bits\"\n            );\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the borrow index\n     * @param cToken The market whose borrow index to update\n     */\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex)\n        internal\n    {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        uint256 borrowSpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(borrowState.block));\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\n            uint256 borrowAmount = div_(\n                CToken(cToken).totalBorrows(),\n                marketBorrowIndex\n            );\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\n            Double memory ratio = borrowAmount > 0\n                ? fraction(compAccrued, borrowAmount)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: borrowState.index}),\n                ratio\n            );\n            compBorrowState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"new index exceeds 224 bits\"),\n                block: safe32(blockNumber, \"block number exceeds 32 bits\")\n            });\n        } else if (deltaBlocks > 0) {\n            borrowState.block = safe32(\n                blockNumber,\n                \"block number exceeds 32 bits\"\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\n     * @param cToken The market in which the supplier is interacting\n     * @param supplier The address of the supplier to distribute COMP to\n     */\n    function distributeSupplierComp(\n        address cToken,\n        address supplier,\n        bool distributeAll\n    ) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\n        Double memory supplierIndex = Double({\n            mantissa: compSupplierIndex[cToken][supplier]\n        });\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\n\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n            supplierIndex.mantissa = compInitialIndex;\n        }\n\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\n        compAccrued[supplier] = transferComp(\n            supplier,\n            supplierAccrued,\n            distributeAll ? 0 : compClaimThreshold\n        );\n        emit DistributedSupplierComp(\n            CToken(cToken),\n            supplier,\n            supplierDelta,\n            supplyIndex.mantissa\n        );\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n     * @param cToken The market in which the borrower is interacting\n     * @param borrower The address of the borrower to distribute COMP to\n     */\n    function distributeBorrowerComp(\n        address cToken,\n        address borrower,\n        Exp memory marketBorrowIndex,\n        bool distributeAll\n    ) internal {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\n        Double memory borrowerIndex = Double({\n            mantissa: compBorrowerIndex[cToken][borrower]\n        });\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\n\n        if (borrowerIndex.mantissa > 0) {\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\n            uint256 borrowerAmount = div_(\n                CToken(cToken).borrowBalanceStored(borrower),\n                marketBorrowIndex\n            );\n            uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\n            uint256 borrowerAccrued = add_(\n                compAccrued[borrower],\n                borrowerDelta\n            );\n            compAccrued[borrower] = transferComp(\n                borrower,\n                borrowerAccrued,\n                distributeAll ? 0 : compClaimThreshold\n            );\n            emit DistributedBorrowerComp(\n                CToken(cToken),\n                borrower,\n                borrowerDelta,\n                borrowIndex.mantissa\n            );\n        }\n    }\n\n    /**\n     * @notice Transfer COMP to the user, if they are above the threshold\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\n     * @param user The address of the user to transfer COMP to\n     * @param userAccrued The amount of COMP to (possibly) transfer\n     * @return The amount of COMP which was NOT transferred to the user\n     */\n    function transferComp(\n        address user,\n        uint256 userAccrued,\n        uint256 threshold\n    ) internal returns (uint256) {\n        if (userAccrued >= threshold && userAccrued > 0) {\n            TROP comp = TROP(getCompAddress());\n            uint256 compRemaining = comp.balanceOf(address(this));\n            if (userAccrued <= compRemaining) {\n                comp.transfer(user, userAccrued);\n                return 0;\n            }\n        }\n        return userAccrued;\n    }\n\n    /**\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\n     * @param contributor The address to calculate contributor rewards for\n     */\n    function updateContributorRewards(address contributor) public {\n        uint256 compSpeed = compContributorSpeeds[contributor];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(\n            blockNumber,\n            lastContributorBlock[contributor]\n        );\n        if (deltaBlocks > 0 && compSpeed > 0) {\n            uint256 newAccrued = mul_(deltaBlocks, compSpeed);\n            uint256 contributorAccrued = add_(\n                compAccrued[contributor],\n                newAccrued\n            );\n\n            compAccrued[contributor] = contributorAccrued;\n            lastContributorBlock[contributor] = blockNumber;\n        }\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in all markets\n     * @param holder The address to claim COMP for\n     */\n    function claimComp(address holder) public {\n        return claimComp(holder, allMarkets);\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in the specified markets\n     * @param holder The address to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     */\n    function claimComp(address holder, CToken[] memory cTokens) public {\n        address[] memory holders = new address[](1);\n        holders[0] = holder;\n        claimComp(holders, cTokens, true, true);\n    }\n\n    /**\n     * @notice Claim all comp accrued by the holders\n     * @param holders The addresses to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     * @param borrowers Whether or not to claim COMP earned by borrowing\n     * @param suppliers Whether or not to claim COMP earned by supplying\n     */\n    function claimComp(\n        address[] memory holders,\n        CToken[] memory cTokens,\n        bool borrowers,\n        bool suppliers\n    ) public {\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            CToken cToken = cTokens[i];\n            require(markets[address(cToken)].isListed, \"market must be listed\");\n            if (borrowers == true) {\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n                updateCompBorrowIndex(address(cToken), borrowIndex);\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeBorrowerComp(\n                        address(cToken),\n                        holders[j],\n                        borrowIndex,\n                        true\n                    );\n                }\n            }\n            if (suppliers == true) {\n                updateCompSupplyIndex(address(cToken));\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeSupplierComp(address(cToken), holders[j], true);\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer COMP to the user\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\n     * @param user The address of the user to transfer COMP to\n     * @param amount The amount of COMP to (possibly) transfer\n     * @return The amount of COMP which was NOT transferred to the user\n     */\n    function grantCompInternal(address user, uint256 amount)\n        internal\n        returns (uint256)\n    {\n        TROP comp = TROP(getCompAddress());\n        uint256 compRemaining = comp.balanceOf(address(this));\n        if (amount <= compRemaining) {\n            comp.transfer(user, amount);\n            return 0;\n        }\n        return amount;\n    }\n\n    /*** Comp Distribution Admin ***/\n\n    /**\n     * @notice Transfer COMP to the recipient\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\n     * @param recipient The address of the recipient to transfer COMP to\n     * @param amount The amount of COMP to (possibly) transfer\n     */\n    function _grantComp(address recipient, uint256 amount) public {\n        require(adminOrInitializing(), \"only admin can grant comp\");\n        uint256 amountLeft = grantCompInternal(recipient, amount);\n        require(amountLeft == 0, \"insufficient comp for grant\");\n        emit CompGranted(recipient, amount);\n    }\n\n    /**\n     * @notice Set COMP speed for a single contributor\n     * @param contributor The contributor whose COMP speed to update\n     * @param compSpeed New COMP speed for contributor\n     */\n    function _setContributorCompSpeed(address contributor, uint256 compSpeed)\n        public\n    {\n        require(adminOrInitializing(), \"only admin can set comp speed\");\n\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\n        updateContributorRewards(contributor);\n        if (compSpeed == 0) {\n            // release storage\n            delete lastContributorBlock[contributor];\n        }\n        lastContributorBlock[contributor] = getBlockNumber();\n        compContributorSpeeds[contributor] = compSpeed;\n\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\n    }\n\n    /**\n     * @notice Set the amount of COMP distributed per block\n     * @param compRate_ The amount of COMP wei per block to distribute\n     */\n    function _setCompRate(uint256 compRate_) public {\n        require(adminOrInitializing(), \"only admin can change comp rate\");\n\n        uint256 oldRate = compRate;\n        compRate = compRate_;\n        emit NewCompRate(oldRate, compRate_);\n\n        refreshCompSpeedsInternal();\n    }\n\n    /**\n     * @notice Add markets to compMarkets, allowing them to earn COMP in the flywheel\n     * @param cTokens The addresses of the markets to add\n     */\n    function _addCompMarkets(address[] memory cTokens) public {\n        require(adminOrInitializing(), \"only admin can add comp market\");\n\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            _addCompMarketInternal(cTokens[i]);\n        }\n\n        refreshCompSpeedsInternal();\n    }\n\n    function _addCompMarketInternal(address cToken) internal {\n        Market storage market = markets[cToken];\n        require(market.isListed == true, \"comp market is not listed\");\n        require(market.isComped == false, \"comp market already added\");\n\n        market.isComped = true;\n        emit MarketComped(CToken(cToken), true);\n\n        if (\n            compSupplyState[cToken].index == 0 &&\n            compSupplyState[cToken].block == 0\n        ) {\n            compSupplyState[cToken] = CompMarketState({\n                index: compInitialIndex,\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n            });\n        }\n\n        if (\n            compBorrowState[cToken].index == 0 &&\n            compBorrowState[cToken].block == 0\n        ) {\n            compBorrowState[cToken] = CompMarketState({\n                index: compInitialIndex,\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n            });\n        }\n    }\n\n    /**\n     * @notice Remove a market from compMarkets, preventing it from earning COMP in the flywheel\n     * @param cToken The address of the market to drop\n     */\n    function _dropCompMarket(address cToken) public {\n        require(msg.sender == admin, \"only admin can drop comp market\");\n\n        Market storage market = markets[cToken];\n        require(market.isComped == true, \"market is not a comp market\");\n\n        market.isComped = false;\n        emit MarketComped(CToken(cToken), false);\n\n        refreshCompSpeedsInternal();\n    }\n\n    /**\n     * @notice Return all of the markets\n     * @dev The automatic getter may be used to access an individual market.\n     * @return The list of market addresses\n     */\n    function getAllMarkets() public view returns (CToken[] memory) {\n        return allMarkets;\n    }\n\n    function getBlockNumber() public view virtual returns (uint256) {\n        return block.number;\n    }\n\n    /**\n     * @notice Return the address of the COMP token\n     * @return The address of COMP\n     */\n    function getCompAddress() public view virtual returns (address) {\n        return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n    }\n}\n"
    },
    "contracts/CToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./CTokenInterfaces.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./EIP20Interface.sol\";\nimport \"./InterestRateModel.sol\";\nimport \"./WhitelistInterface.sol\";\n\n/**\n * @title tropykus CToken Contract\n * @notice Abstract base for CTokens\n * @author tropykus\n */\nabstract contract CToken is CTokenInterface, Exponential, TokenErrorReporter {\n    address whitelist;\n\n    /**\n     * @notice Initialize the money market\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ EIP-20 name of this token\n     * @param symbol_ EIP-20 symbol of this token\n     * @param decimals_ EIP-20 decimal precision of this token\n     */\n    function initialize(\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) public {\n        require(msg.sender == admin, \"CT01\");\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"CT02\");\n\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        require(initialExchangeRateMantissa > 0, \"CT03\");\n\n        uint256 err = _setComptroller(comptroller_);\n        require(err == uint256(Error.NO_ERROR), \"CT04\");\n\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = mantissaOne;\n\n        err = _setInterestRateModelFresh(interestRateModel_);\n        require(err == uint256(Error.NO_ERROR), \"CT05\");\n\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n\n        _notEntered = true;\n    }\n\n    function addWhitelist(address _whitelist) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK\n                );\n        }\n        whitelist = _whitelist;\n    }\n\n    /**\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\n     * @dev Called by both `transfer` and `transferFrom` internally\n     * @param spender The address of the account performing the transfer\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param tokens The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferTokens(\n        address spender,\n        address src,\n        address dst,\n        uint256 tokens\n    ) internal returns (uint256) {\n        uint256 allowed = comptroller.transferAllowed(\n            address(this),\n            src,\n            dst,\n            tokens\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.COMPTROLLER_REJECTION,\n                    FailureInfo.TRANSFER_COMPTROLLER_REJECTION,\n                    allowed\n                );\n        }\n\n        if (src == dst) {\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\n        }\n\n        uint256 startingAllowance = 0;\n        if (spender == src) {\n            startingAllowance = type(uint256).max;\n        } else {\n            startingAllowance = transferAllowances[src][spender];\n        }\n\n        MathError mathErr;\n        uint256 allowanceNew;\n        uint256 srcTokensNew;\n        uint256 dstTokensNew;\n\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\n        }\n\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src].tokens, tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\n        }\n\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst].tokens, tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\n        }\n\n        accountTokens[src].tokens = srcTokensNew;\n        accountTokens[dst].tokens = dstTokensNew;\n\n        if (startingAllowance != type(uint256).max) {\n            transferAllowances[src][spender] = allowanceNew;\n        }\n\n        emit Transfer(src, dst, tokens);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 amount)\n        external\n        override\n        nonReentrant\n        returns (bool)\n    {\n        return\n            transferTokens(msg.sender, msg.sender, dst, amount) ==\n            uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external override nonReentrant returns (bool) {\n        return\n            transferTokens(msg.sender, src, dst, amount) ==\n            uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        transferAllowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return The number of tokens allowed to be spent (-1 means infinite)\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return transferAllowances[owner][spender];\n    }\n\n    /**\n     * @notice Get the token balance of the `owner`\n     * @param owner The address of the account to query\n     * @return The number of tokens owned by `owner`\n     */\n    function balanceOf(address owner) external view override returns (uint256) {\n        return accountTokens[owner].tokens;\n    }\n\n    /**\n     * @notice Get the underlying balance of the `owner`\n     * @dev This also accrues interest in a transaction\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(address owner)\n        external\n        override\n        returns (uint256)\n    {\n        (MathError mErr, uint256 balance) = mulScalarTruncate(\n            Exp({mantissa: exchangeRateCurrent()}),\n            accountTokens[owner].tokens\n        );\n        require(mErr == MathError.NO_ERROR, \"CT06\");\n        return balance;\n    }\n\n    /**\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\n     * @param account Address of the account to snapshot\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\n     */\n    function getAccountSnapshot(address account)\n        external\n        view\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 cTokenBalance = accountTokens[account].tokens;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n\n        MathError mErr;\n\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\n        if (mErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0, 0, 0);\n        }\n\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\n        if (mErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0, 0, 0);\n        }\n\n        return (\n            uint256(Error.NO_ERROR),\n            cTokenBalance,\n            borrowBalance,\n            exchangeRateMantissa\n        );\n    }\n\n    /**\n     * @dev Function to simply retrieve block number\n     *  This exists mainly for inheriting test contracts to stub this result.\n     */\n    function getBlockNumber() internal view virtual returns (uint256) {\n        return block.number;\n    }\n\n    /**\n     * @notice Returns the current per-block borrow interest rate for this cToken\n     * @return The borrow interest rate per block, scaled by 1e18\n     */\n    function borrowRatePerBlock() external view override returns (uint256) {\n        return\n            interestRateModel.getBorrowRate(\n                getCashPrior(),\n                totalBorrows,\n                totalReserves\n            );\n    }\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this cToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() external view override returns (uint256) {\n        return\n            interestRateModel.getSupplyRate(\n                getCashPrior(),\n                totalBorrows,\n                totalReserves,\n                reserveFactorMantissa\n            );\n    }\n\n    /**\n     * @notice Returns the current total borrows plus accrued interest\n     * @return The total borrows with interest\n     */\n    function totalBorrowsCurrent()\n        external\n        override\n        nonReentrant\n        returns (uint256)\n    {\n        require(accrueInterest() == uint256(Error.NO_ERROR), \"CT07\");\n        return totalBorrows;\n    }\n\n    /**\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n     * @param account The address whose balance should be calculated after updating borrowIndex\n     * @return The calculated balance\n     */\n    function borrowBalanceCurrent(address account)\n        external\n        override\n        nonReentrant\n        returns (uint256)\n    {\n        require(accrueInterest() == uint256(Error.NO_ERROR), \"CT07\");\n        return borrowBalanceStored(account);\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return The calculated balance\n     */\n    function borrowBalanceStored(address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        (MathError err, uint256 result) = borrowBalanceStoredInternal(account);\n        require(err == MathError.NO_ERROR, \"CT08\");\n        return result;\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\n     */\n    function borrowBalanceStoredInternal(address account)\n        internal\n        view\n        returns (MathError, uint256)\n    {\n        MathError mathErr;\n        uint256 principalTimesIndex;\n        uint256 result;\n\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\n\n        if (borrowSnapshot.principal == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        (mathErr, principalTimesIndex) = mulUInt(\n            borrowSnapshot.principal,\n            borrowIndex\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (mathErr, 0);\n        }\n\n        (mathErr, result) = divUInt(\n            principalTimesIndex,\n            borrowSnapshot.interestIndex\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (mathErr, 0);\n        }\n\n        return (MathError.NO_ERROR, result);\n    }\n\n    function getBorrowerPrincipalStored(address account)\n        public\n        view\n        returns (uint256 borrowed)\n    {\n        borrowed = accountBorrows[account].principal;\n    }\n\n    function getSupplierSnapshotStored(address account)\n        public\n        view\n        returns (\n            uint256 tokens,\n            uint256 underlyingAmount,\n            uint256 suppliedAt,\n            uint256 promisedSupplyRate\n        )\n    {\n        tokens = accountTokens[account].tokens;\n        underlyingAmount = accountTokens[account].underlyingAmount;\n        suppliedAt = accountTokens[account].suppliedAt;\n        promisedSupplyRate = accountTokens[account].promisedSupplyRate;\n    }\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent()\n        public\n        override\n        nonReentrant\n        returns (uint256)\n    {\n        require(accrueInterest() == uint256(Error.NO_ERROR), \"CT07\");\n        return exchangeRateStored();\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() public view override returns (uint256) {\n        (MathError err, uint256 result) = exchangeRateStoredInternal();\n        require(err == MathError.NO_ERROR, \"CT09\");\n        return result;\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return (error code, calculated exchange rate scaled by 1e18)\n     */\n    function exchangeRateStoredInternal()\n        internal\n        view\n        virtual\n        returns (MathError, uint256)\n    {\n        uint256 _totalSupply = totalSupply;\n        if (_totalSupply == 0) {\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\n        } else {\n            MathError error;\n            uint256 exchangeRate;\n            uint256 totalCash = getCashPrior();\n            if (interestRateModel.isTropykusInterestRateModel()) {\n                (error, exchangeRate) = tropykusExchangeRateStoredInternal(\n                    msg.sender\n                );\n                if (error == MathError.NO_ERROR) {\n                    return (MathError.NO_ERROR, exchangeRate);\n                } else {\n                    return (MathError.NO_ERROR, initialExchangeRateMantissa);\n                }\n            }\n            return\n                interestRateModel.getExchangeRate(\n                    totalCash,\n                    totalBorrows,\n                    totalReserves,\n                    totalSupply\n                );\n        }\n    }\n\n    function tropykusExchangeRateStoredInternal(address redeemer)\n        internal\n        view\n        returns (MathError, uint256)\n    {\n        if (totalSupply == 0) {\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\n        } else {\n            SupplySnapshot storage supplySnapshot = accountTokens[redeemer];\n            if (supplySnapshot.suppliedAt == 0) {\n                return (MathError.DIVISION_BY_ZERO, 0);\n            }\n            (, uint256 interestFactorMantissa, ) = tropykusInterestAccrued(\n                redeemer\n            );\n            Exp memory interestFactor = Exp({mantissa: interestFactorMantissa});\n            uint256 currentUnderlying = supplySnapshot.underlyingAmount;\n            Exp memory redeemerUnderlying = Exp({mantissa: currentUnderlying});\n            (, Exp memory realAmount) = mulExp(\n                interestFactor,\n                redeemerUnderlying\n            );\n            (, Exp memory exchangeRate) = getExp(\n                realAmount.mantissa,\n                supplySnapshot.tokens\n            );\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\n        }\n    }\n\n    function tropykusInterestAccrued(address account)\n        internal\n        view\n        returns (\n            MathError,\n            uint256,\n            uint256\n        )\n    {\n        SupplySnapshot storage supplySnapshot = accountTokens[account];\n        uint256 promisedSupplyRate = supplySnapshot.promisedSupplyRate;\n        Exp memory expectedSupplyRatePerBlock = Exp({\n            mantissa: promisedSupplyRate\n        });\n        (, uint256 delta) = subUInt(\n            accrualBlockNumber,\n            supplySnapshot.suppliedAt\n        );\n        (, Exp memory expectedSupplyRatePerBlockWithDelta) = mulScalar(\n            expectedSupplyRatePerBlock,\n            delta\n        );\n        (, Exp memory interestFactor) = addExp(\n            Exp({mantissa: 1e18}),\n            expectedSupplyRatePerBlockWithDelta\n        );\n        uint256 currentUnderlying = supplySnapshot.underlyingAmount;\n        Exp memory redeemerUnderlying = Exp({mantissa: currentUnderlying});\n        (, Exp memory realAmount) = mulExp(interestFactor, redeemerUnderlying);\n        (, uint256 interestEarned) = subUInt(\n            realAmount.mantissa,\n            currentUnderlying\n        );\n        return (MathError.NO_ERROR, interestFactor.mantissa, interestEarned);\n    }\n\n    /**\n     * @notice Get cash balance of this cToken in the underlying asset\n     * @return The quantity of underlying asset owned by this contract\n     */\n    function getCash() external view override returns (uint256) {\n        return getCashPrior();\n    }\n\n    /**\n     * @notice Applies accrued interest to total borrows and reserves\n     * @dev This calculates interest accrued from the last checkpointed block\n     *   up to the current block and writes new checkpoint to storage.\n     */\n    function accrueInterest() public override returns (uint256) {\n        uint256 currentBlockNumber = getBlockNumber();\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\n\n        if (accrualBlockNumberPrior == currentBlockNumber) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        uint256 cashPrior = getCashPrior();\n        uint256 borrowsPrior = totalBorrows;\n        uint256 reservesPrior = totalReserves;\n        uint256 borrowIndexPrior = borrowIndex;\n\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\n            cashPrior,\n            borrowsPrior,\n            reservesPrior\n        );\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \"CT10\");\n\n        (MathError mathErr, uint256 blockDelta) = subUInt(\n            currentBlockNumber,\n            accrualBlockNumberPrior\n        );\n        require(mathErr == MathError.NO_ERROR, \"CT11\");\n\n        Exp memory simpleInterestFactor;\n        uint256 interestAccumulated;\n        uint256 totalBorrowsNew;\n        uint256 totalReservesNew;\n        uint256 borrowIndexNew;\n\n        (mathErr, simpleInterestFactor) = mulScalar(\n            Exp({mantissa: borrowRateMantissa}),\n            blockDelta\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo\n                        .ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n                    uint256(mathErr)\n                );\n        }\n\n        (mathErr, interestAccumulated) = mulScalarTruncate(\n            simpleInterestFactor,\n            borrowsPrior\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo\n                        .ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n                    uint256(mathErr)\n                );\n        }\n\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo\n                        .ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\n                    uint256(mathErr)\n                );\n        }\n\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\n            Exp({mantissa: reserveFactorMantissa}),\n            interestAccumulated,\n            reservesPrior\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo\n                        .ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n                    uint256(mathErr)\n                );\n        }\n\n        if (interestRateModel.isTropykusInterestRateModel()) {\n            (mathErr, totalReservesNew) = newReserves(\n                borrowRateMantissa,\n                cashPrior,\n                borrowsPrior,\n                reservesPrior,\n                interestAccumulated\n            );\n            if (mathErr != MathError.NO_ERROR) {\n                return\n                    failOpaque(\n                        Error.MATH_ERROR,\n                        FailureInfo\n                            .ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n                        uint256(mathErr)\n                    );\n            }\n        }\n\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(\n            simpleInterestFactor,\n            borrowIndexPrior,\n            borrowIndexPrior\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo\n                        .ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\n                    uint256(mathErr)\n                );\n        }\n\n        accrualBlockNumber = currentBlockNumber;\n        borrowIndex = borrowIndexNew;\n        totalBorrows = totalBorrowsNew;\n        totalReserves = totalReservesNew;\n\n        emit AccrueInterest(\n            cashPrior,\n            interestAccumulated,\n            borrowIndexNew,\n            totalBorrowsNew\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function newReserves(\n        uint256 borrowRateMantissa,\n        uint256 cashPrior,\n        uint256 borrowsPrior,\n        uint256 reservesPrior,\n        uint256 interestAccumulated\n    ) internal view returns (MathError mathErr, uint256 totalReservesNew) {\n        uint256 newReserveFactorMantissa;\n        uint256 utilizationRate = interestRateModel.utilizationRate(\n            cashPrior,\n            borrowsPrior,\n            reservesPrior\n        );\n        uint256 expectedSupplyRate = interestRateModel.getSupplyRate(\n            cashPrior,\n            borrowsPrior,\n            reservesPrior,\n            reserveFactorMantissa\n        );\n        if (\n            interestRateModel.isAboveOptimal(\n                cashPrior,\n                borrowsPrior,\n                reservesPrior\n            )\n        ) {\n            (mathErr, newReserveFactorMantissa) = mulScalarTruncate(\n                Exp({mantissa: utilizationRate}),\n                borrowRateMantissa\n            );\n            if (mathErr != MathError.NO_ERROR) {\n                return (mathErr, 0);\n            }\n            (mathErr, newReserveFactorMantissa) = subUInt(\n                newReserveFactorMantissa,\n                expectedSupplyRate\n            );\n            if (mathErr != MathError.NO_ERROR) {\n                return (mathErr, 0);\n            }\n            (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\n                Exp({mantissa: newReserveFactorMantissa}),\n                interestAccumulated,\n                reservesPrior\n            );\n            if (mathErr != MathError.NO_ERROR) {\n                return (mathErr, 0);\n            }\n        } else {\n            mathErr = MathError.NO_ERROR;\n            totalReservesNew = reservesPrior;\n        }\n    }\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n     */\n    function mintInternal(uint256 mintAmount)\n        internal\n        nonReentrant\n        returns (uint256, uint256)\n    {\n        if (WhitelistInterface(whitelist).enabled()) {\n            require(WhitelistInterface(whitelist).exist(msg.sender), \"CT26\");\n        }\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return (\n                fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED),\n                0\n            );\n        }\n        return mintFresh(msg.sender, mintAmount);\n    }\n\n    struct MintLocalVars {\n        Error err;\n        MathError mathErr;\n        uint256 exchangeRateMantissa;\n        uint256 mintTokens;\n        uint256 totalSupplyNew;\n        uint256 accountTokensNew;\n        uint256 actualMintAmount;\n    }\n\n    /**\n     * @notice User supplies assets into the market and receives cTokens in exchange\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param minter The address of the account which is supplying the assets\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n     */\n    function mintFresh(address minter, uint256 mintAmount)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 allowed = comptroller.mintAllowed(\n            address(this),\n            minter,\n            mintAmount\n        );\n        if (allowed != 0) {\n            return (\n                failOpaque(\n                    Error.COMPTROLLER_REJECTION,\n                    FailureInfo.MINT_COMPTROLLER_REJECTION,\n                    allowed\n                ),\n                0\n            );\n        }\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (\n                fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK),\n                0\n            );\n        }\n\n        MintLocalVars memory vars;\n\n        (\n            vars.mathErr,\n            vars.exchangeRateMantissa\n        ) = exchangeRateStoredInternal();\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return (\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,\n                    uint256(vars.mathErr)\n                ),\n                0\n            );\n        }\n        if (interestRateModel.isTropykusInterestRateModel()) {\n            SupplySnapshot storage supplySnapshot = accountTokens[minter];\n            (, uint256 newTotalSupply) = addUInt(\n                supplySnapshot.underlyingAmount,\n                mintAmount\n            );\n            require(newTotalSupply <= 0.1e18, \"CT24\");\n        }\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\n\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\n            vars.actualMintAmount,\n            Exp({mantissa: vars.exchangeRateMantissa})\n        );\n        require(vars.mathErr == MathError.NO_ERROR, \"CT12\");\n\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(\n            totalSupply,\n            vars.mintTokens\n        );\n        require(vars.mathErr == MathError.NO_ERROR, \"CT13\");\n\n        (vars.mathErr, vars.accountTokensNew) = addUInt(\n            accountTokens[minter].tokens,\n            vars.mintTokens\n        );\n        require(vars.mathErr == MathError.NO_ERROR, \"CT14\");\n\n        uint256 currentSupplyRate = interestRateModel.getSupplyRate(\n            getCashPrior(),\n            totalBorrows,\n            totalReserves,\n            reserveFactorMantissa\n        );\n\n        bool isTropykusInterestRateModel = interestRateModel\n            .isTropykusInterestRateModel();\n\n        if (accountTokens[minter].tokens > 0) {\n            Exp memory updatedUnderlying;\n            if (isTropykusInterestRateModel) {\n                (, uint256 interestFactorMantissa, ) = tropykusInterestAccrued(\n                    minter\n                );\n                Exp memory interestFactor = Exp({\n                    mantissa: interestFactorMantissa\n                });\n                uint256 currentUnderlyingAmount = accountTokens[minter]\n                    .underlyingAmount;\n                MathError mErrorNewAmount;\n                (mErrorNewAmount, updatedUnderlying) = mulExp(\n                    Exp({mantissa: currentUnderlyingAmount}),\n                    interestFactor\n                );\n                if (mErrorNewAmount != MathError.NO_ERROR) {\n                    return (\n                        failOpaque(\n                            Error.MATH_ERROR,\n                            FailureInfo.MINT_EXCHANGE_CALCULATION_FAILED,\n                            uint256(mErrorNewAmount)\n                        ),\n                        0\n                    );\n                }\n            } else {\n                uint256 currentTokens = accountTokens[minter].tokens;\n                MathError mErrorUpdatedUnderlying;\n                (mErrorUpdatedUnderlying, updatedUnderlying) = mulExp(\n                    Exp({mantissa: currentTokens}),\n                    Exp({mantissa: vars.exchangeRateMantissa})\n                );\n                if (mErrorUpdatedUnderlying != MathError.NO_ERROR) {\n                    return (\n                        failOpaque(\n                            Error.MATH_ERROR,\n                            FailureInfo.MINT_EXCHANGE_CALCULATION_FAILED,\n                            uint256(mErrorUpdatedUnderlying)\n                        ),\n                        0\n                    );\n                }\n            }\n            (, mintAmount) = addUInt(updatedUnderlying.mantissa, mintAmount);\n        }\n\n        totalSupply = vars.totalSupplyNew;\n        accountTokens[minter] = SupplySnapshot({\n            tokens: vars.accountTokensNew,\n            underlyingAmount: mintAmount,\n            suppliedAt: accrualBlockNumber,\n            promisedSupplyRate: currentSupplyRate\n        });\n\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\n        emit Transfer(address(this), minter, vars.mintTokens);\n\n        return (uint256(Error.NO_ERROR), vars.actualMintAmount);\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlyingInternal(uint256 redeemAmount)\n        internal\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return\n                fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\n        }\n        return redeemFresh(payable(msg.sender), redeemAmount);\n    }\n\n    struct RedeemLocalVars {\n        Error err;\n        MathError mathErr;\n        uint256 exchangeRateMantissa;\n        uint256 redeemTokens;\n        uint256 redeemAmount;\n        uint256 totalSupplyNew;\n        uint256 accountTokensNew;\n        uint256 newSubsidyFund;\n    }\n\n    /**\n     * @notice User redeems cTokens in exchange for the underlying asset\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param redeemer The address of the account which is redeeming the tokens\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemFresh(address payable redeemer, uint256 redeemAmountIn)\n        internal\n        returns (uint256)\n    {\n        require(redeemAmountIn > 0, \"CT15\");\n\n        RedeemLocalVars memory vars;\n\n        SupplySnapshot storage supplySnapshot = accountTokens[redeemer];\n\n        (\n            vars.mathErr,\n            vars.exchangeRateMantissa\n        ) = exchangeRateStoredInternal();\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED,\n                    uint256(vars.mathErr)\n                );\n        }\n\n        uint256 interestEarned;\n        uint256 subsidyFundPortion;\n        uint256 currentUnderlying;\n\n        bool isTropykusInterestRateModel = interestRateModel\n            .isTropykusInterestRateModel();\n        if (isTropykusInterestRateModel) {\n            currentUnderlying = supplySnapshot.underlyingAmount;\n            (, , interestEarned) = tropykusInterestAccrued(redeemer);\n        }\n        supplySnapshot.promisedSupplyRate = interestRateModel.getSupplyRate(\n            getCashPrior(),\n            totalBorrows,\n            totalReserves,\n            reserveFactorMantissa\n        );\n\n        if (\n            isTropykusInterestRateModel &&\n            !interestRateModel.isAboveOptimal(\n                getCashPrior(),\n                totalBorrows,\n                totalReserves\n            )\n        ) {\n            uint256 borrowRate = interestRateModel.getBorrowRate(\n                getCashPrior(),\n                totalBorrows,\n                totalReserves\n            );\n\n            uint256 utilizationRate = interestRateModel.utilizationRate(\n                getCashPrior(),\n                totalBorrows,\n                totalReserves\n            );\n\n            (, uint256 estimatedEarning) = mulScalarTruncate(\n                Exp({mantissa: borrowRate}),\n                utilizationRate\n            );\n\n            (, subsidyFundPortion) = subUInt(\n                supplySnapshot.promisedSupplyRate,\n                estimatedEarning\n            );\n            (, Exp memory subsidyFactor) = getExp(\n                subsidyFundPortion,\n                supplySnapshot.promisedSupplyRate\n            );\n            (, subsidyFundPortion) = mulScalarTruncate(\n                subsidyFactor,\n                interestEarned\n            );\n        }\n\n        vars.redeemAmount = redeemAmountIn;\n\n        if (isTropykusInterestRateModel) {\n            (, Exp memory num) = mulExp(\n                vars.redeemAmount,\n                supplySnapshot.tokens\n            );\n            (, Exp memory realTokensWithdrawAmount) = getExp(\n                num.mantissa,\n                currentUnderlying\n            );\n            vars.redeemTokens = realTokensWithdrawAmount.mantissa;\n        } else {\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\n                redeemAmountIn,\n                Exp({mantissa: vars.exchangeRateMantissa})\n            );\n            if (vars.mathErr != MathError.NO_ERROR) {\n                return\n                    failOpaque(\n                        Error.MATH_ERROR,\n                        FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\n                        uint256(vars.mathErr)\n                    );\n            }\n        }\n        //        }\n\n        uint256 allowed = comptroller.redeemAllowed(\n            address(this),\n            redeemer,\n            vars.redeemTokens\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.COMPTROLLER_REJECTION,\n                    FailureInfo.REDEEM_COMPTROLLER_REJECTION,\n                    allowed\n                );\n        }\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.REDEEM_FRESHNESS_CHECK\n                );\n        }\n\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(\n            totalSupply,\n            vars.redeemTokens\n        );\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n                    uint256(vars.mathErr)\n                );\n        }\n\n        (, vars.newSubsidyFund) = subUInt(subsidyFund, subsidyFundPortion);\n\n        (vars.mathErr, vars.accountTokensNew) = subUInt(\n            supplySnapshot.tokens,\n            vars.redeemTokens\n        );\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n                    uint256(vars.mathErr)\n                );\n        }\n\n        uint256 cash = getCashPrior();\n        if (isTropykusInterestRateModel) {\n            cash = address(this).balance;\n        }\n\n        if (cash < vars.redeemAmount) {\n            return\n                fail(\n                    Error.TOKEN_INSUFFICIENT_CASH,\n                    FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE\n                );\n        }\n\n        doTransferOut(redeemer, vars.redeemAmount);\n\n        totalSupply = vars.totalSupplyNew;\n        subsidyFund = vars.newSubsidyFund;\n        supplySnapshot.tokens = vars.accountTokensNew;\n        supplySnapshot.suppliedAt = accrualBlockNumber;\n        (, supplySnapshot.underlyingAmount) = subUInt(\n            supplySnapshot.underlyingAmount,\n            vars.redeemAmount\n        );\n\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n\n        comptroller.redeemVerify(\n            address(this),\n            redeemer,\n            vars.redeemAmount,\n            vars.redeemTokens\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sender borrows assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function borrowInternal(uint256 borrowAmount)\n        internal\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return\n                fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\n        }\n        return borrowFresh(payable(msg.sender), borrowAmount);\n    }\n\n    struct BorrowLocalVars {\n        MathError mathErr;\n        uint256 accountBorrows;\n        uint256 accountBorrowsNew;\n        uint256 totalBorrowsNew;\n    }\n\n    /**\n     * @notice Users borrow assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function borrowFresh(address payable borrower, uint256 borrowAmount)\n        internal\n        returns (uint256)\n    {\n        uint256 allowed = comptroller.borrowAllowed(\n            address(this),\n            borrower,\n            borrowAmount\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.COMPTROLLER_REJECTION,\n                    FailureInfo.BORROW_COMPTROLLER_REJECTION,\n                    allowed\n                );\n        }\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.BORROW_FRESHNESS_CHECK\n                );\n        }\n\n        if (getCashPrior() < borrowAmount) {\n            return\n                fail(\n                    Error.TOKEN_INSUFFICIENT_CASH,\n                    FailureInfo.BORROW_CASH_NOT_AVAILABLE\n                );\n        }\n\n        BorrowLocalVars memory vars;\n\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(\n            borrower\n        );\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n                    uint256(vars.mathErr)\n                );\n        }\n\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(\n            vars.accountBorrows,\n            borrowAmount\n        );\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo\n                        .BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n                    uint256(vars.mathErr)\n                );\n        }\n\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(\n            totalBorrows,\n            borrowAmount\n        );\n        if (interestRateModel.isTropykusInterestRateModel()) {\n            require(vars.totalBorrowsNew <= 0.1e18, \"CT25\");\n        }\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n                    uint256(vars.mathErr)\n                );\n        }\n\n        doTransferOut(borrower, borrowAmount);\n\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows = vars.totalBorrowsNew;\n\n        emit Borrow(\n            borrower,\n            borrowAmount,\n            vars.accountBorrowsNew,\n            vars.totalBorrowsNew\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function repayBorrowInternal(uint256 repayAmount)\n        internal\n        nonReentrant\n        returns (uint256, uint256)\n    {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return (\n                fail(\n                    Error(error),\n                    FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED\n                ),\n                0\n            );\n        }\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n    }\n\n    struct RepayBorrowLocalVars {\n        Error err;\n        MathError mathErr;\n        uint256 repayAmount;\n        uint256 borrowerIndex;\n        uint256 accountBorrows;\n        uint256 accountBorrowsNew;\n        uint256 totalBorrowsNew;\n        uint256 actualRepayAmount;\n    }\n\n    /**\n     * @notice Borrows are repaid by another user (possibly the borrower).\n     * @param payer the account paying off the borrow\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount the amount of undelrying tokens being returned\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function repayBorrowFresh(\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) internal returns (uint256, uint256) {\n        uint256 allowed = comptroller.repayBorrowAllowed(\n            address(this),\n            payer,\n            borrower,\n            repayAmount\n        );\n        if (allowed != 0) {\n            return (\n                failOpaque(\n                    Error.COMPTROLLER_REJECTION,\n                    FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,\n                    allowed\n                ),\n                0\n            );\n        }\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.REPAY_BORROW_FRESHNESS_CHECK\n                ),\n                0\n            );\n        }\n\n        RepayBorrowLocalVars memory vars;\n\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\n\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(\n            borrower\n        );\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return (\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo\n                        .REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n                    uint256(vars.mathErr)\n                ),\n                0\n            );\n        }\n\n        if (repayAmount == type(uint256).max) {\n            vars.repayAmount = vars.accountBorrows;\n        } else {\n            vars.repayAmount = repayAmount;\n        }\n\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\n\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(\n            vars.accountBorrows,\n            vars.actualRepayAmount\n        );\n        require(vars.mathErr == MathError.NO_ERROR, \"CT16\");\n\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(\n            totalBorrows,\n            vars.actualRepayAmount\n        );\n        require(vars.mathErr == MathError.NO_ERROR, \"CT17\");\n\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows = vars.totalBorrowsNew;\n\n        emit RepayBorrow(\n            payer,\n            borrower,\n            vars.actualRepayAmount,\n            vars.accountBorrowsNew,\n            vars.totalBorrowsNew\n        );\n\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function liquidateBorrowInternal(\n        address borrower,\n        uint256 repayAmount,\n        CTokenInterface cTokenCollateral\n    ) internal nonReentrant returns (uint256, uint256) {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return (\n                fail(\n                    Error(error),\n                    FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED\n                ),\n                0\n            );\n        }\n\n        error = cTokenCollateral.accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return (\n                fail(\n                    Error(error),\n                    FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED\n                ),\n                0\n            );\n        }\n\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n        return\n            liquidateBorrowFresh(\n                msg.sender,\n                borrower,\n                repayAmount,\n                cTokenCollateral\n            );\n    }\n\n    /**\n     * @notice The liquidator liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param liquidator The address repaying the borrow and seizing collateral\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function liquidateBorrowFresh(\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        CTokenInterface cTokenCollateral\n    ) internal returns (uint256, uint256) {\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\n            address(this),\n            address(cTokenCollateral),\n            liquidator,\n            borrower,\n            repayAmount\n        );\n        if (allowed != 0) {\n            return (\n                failOpaque(\n                    Error.COMPTROLLER_REJECTION,\n                    FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,\n                    allowed\n                ),\n                0\n            );\n        }\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.LIQUIDATE_FRESHNESS_CHECK\n                ),\n                0\n            );\n        }\n\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\n            return (\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK\n                ),\n                0\n            );\n        }\n\n        if (borrower == liquidator) {\n            return (\n                fail(\n                    Error.INVALID_ACCOUNT_PAIR,\n                    FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER\n                ),\n                0\n            );\n        }\n\n        if (repayAmount == 0) {\n            return (\n                fail(\n                    Error.INVALID_CLOSE_AMOUNT_REQUESTED,\n                    FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO\n                ),\n                0\n            );\n        }\n\n        if (repayAmount == type(uint256).max) {\n            return (\n                fail(\n                    Error.INVALID_CLOSE_AMOUNT_REQUESTED,\n                    FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX\n                ),\n                0\n            );\n        }\n\n        (\n            uint256 repayBorrowError,\n            uint256 actualRepayAmount\n        ) = repayBorrowFresh(liquidator, borrower, repayAmount);\n        if (repayBorrowError != uint256(Error.NO_ERROR)) {\n            return (\n                fail(\n                    Error(repayBorrowError),\n                    FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED\n                ),\n                0\n            );\n        }\n\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\n            .liquidateCalculateSeizeTokens(\n                address(this),\n                address(cTokenCollateral),\n                actualRepayAmount\n            );\n        require(amountSeizeError == uint256(Error.NO_ERROR), \"CT18\");\n\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \"CT19\");\n\n        uint256 seizeError;\n        if (address(cTokenCollateral) == address(this)) {\n            seizeError = seizeInternal(\n                address(this),\n                liquidator,\n                borrower,\n                seizeTokens\n            );\n        } else {\n            seizeError = cTokenCollateral.seize(\n                liquidator,\n                borrower,\n                seizeTokens\n            );\n        }\n\n        require(seizeError == uint256(Error.NO_ERROR), \"CT20\");\n\n        emit LiquidateBorrow(\n            liquidator,\n            borrower,\n            actualRepayAmount,\n            address(cTokenCollateral),\n            seizeTokens\n        );\n\n        return (uint256(Error.NO_ERROR), actualRepayAmount);\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Will fail unless called by another cToken during the process of liquidation.\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override nonReentrant returns (uint256) {\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\n    }\n\n    struct SeizeVars {\n        uint256 seizeAmount;\n        uint256 exchangeRate;\n        uint256 borrowerTokensNew;\n        uint256 borrowerAmountNew;\n        uint256 liquidatorTokensNew;\n        uint256 liquidatorAmountNew;\n        uint256 totalCash;\n        uint256 supplyRate;\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function seizeInternal(\n        address seizerToken,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) internal returns (uint256) {\n        uint256 allowed = comptroller.seizeAllowed(\n            address(this),\n            seizerToken,\n            liquidator,\n            borrower,\n            seizeTokens\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.COMPTROLLER_REJECTION,\n                    FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\n                    allowed\n                );\n        }\n\n        if (borrower == liquidator) {\n            return\n                fail(\n                    Error.INVALID_ACCOUNT_PAIR,\n                    FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER\n                );\n        }\n\n        SeizeVars memory seizeVars;\n\n        MathError mathErr;\n\n        (mathErr, seizeVars.borrowerTokensNew) = subUInt(\n            accountTokens[borrower].tokens,\n            seizeTokens\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\n                    uint256(mathErr)\n                );\n        }\n\n        seizeVars.totalCash = getCashPrior();\n        seizeVars.supplyRate = interestRateModel.getSupplyRate(\n            seizeVars.totalCash,\n            totalBorrows,\n            totalReserves,\n            reserveFactorMantissa\n        );\n\n        (, seizeVars.exchangeRate) = interestRateModel.getExchangeRate(\n            seizeVars.totalCash,\n            totalBorrows,\n            totalReserves,\n            totalSupply\n        );\n\n        if (interestRateModel.isTropykusInterestRateModel()) {\n            (, seizeVars.exchangeRate) = tropykusExchangeRateStoredInternal(\n                borrower\n            );\n        }\n\n        (, seizeVars.seizeAmount) = mulUInt(\n            seizeTokens,\n            seizeVars.exchangeRate\n        );\n        (, seizeVars.seizeAmount) = divUInt(seizeVars.seizeAmount, 1e18);\n\n        (, seizeVars.borrowerAmountNew) = subUInt(\n            accountTokens[borrower].underlyingAmount,\n            seizeVars.seizeAmount\n        );\n\n        (mathErr, seizeVars.liquidatorTokensNew) = addUInt(\n            accountTokens[liquidator].tokens,\n            seizeTokens\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return\n                failOpaque(\n                    Error.MATH_ERROR,\n                    FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\n                    uint256(mathErr)\n                );\n        }\n\n        (, seizeVars.liquidatorAmountNew) = addUInt(\n            accountTokens[liquidator].underlyingAmount,\n            seizeVars.seizeAmount\n        );\n\n        accountTokens[borrower].tokens = seizeVars.borrowerTokensNew;\n        accountTokens[borrower].underlyingAmount = seizeVars.borrowerAmountNew;\n        accountTokens[borrower].suppliedAt = getBlockNumber();\n        accountTokens[borrower].promisedSupplyRate = seizeVars.supplyRate;\n\n        accountTokens[liquidator].tokens = seizeVars.liquidatorTokensNew;\n        accountTokens[liquidator].underlyingAmount = seizeVars\n            .liquidatorAmountNew;\n        accountTokens[liquidator].suppliedAt = getBlockNumber();\n        accountTokens[liquidator].promisedSupplyRate = seizeVars.supplyRate;\n\n        emit Transfer(borrower, liquidator, seizeTokens);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @param newPendingAdmin New pending admin.\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPendingAdmin(address payable newPendingAdmin)\n        external\n        override\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK\n                );\n        }\n\n        address oldPendingAdmin = pendingAdmin;\n\n        pendingAdmin = newPendingAdmin;\n\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n     * @dev Admin function for pending admin to accept role and update admin\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _acceptAdmin() external override returns (uint256) {\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK\n                );\n        }\n\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        admin = pendingAdmin;\n\n        pendingAdmin = payable(address(0));\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets a new comptroller for the market\n     * @dev Admin function to set a new comptroller\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setComptroller(ComptrollerInterface newComptroller)\n        public\n        override\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COMPTROLLER_OWNER_CHECK\n                );\n        }\n\n        ComptrollerInterface oldComptroller = comptroller;\n        require(newComptroller.isComptroller(), \"CT21\");\n\n        comptroller = newComptroller;\n\n        emit NewComptroller(oldComptroller, newComptroller);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n     * @dev Admin function to accrue interest and set a new reserve factor\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\n        external\n        override\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return\n                fail(\n                    Error(error),\n                    FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED\n                );\n        }\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n    }\n\n    /**\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\n     * @dev Admin function to set a new reserve factor\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa)\n        internal\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK\n                );\n        }\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK\n                );\n        }\n\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\n            return\n                fail(\n                    Error.BAD_INPUT,\n                    FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK\n                );\n        }\n\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\n        reserveFactorMantissa = newReserveFactorMantissa;\n\n        emit NewReserveFactor(\n            oldReserveFactorMantissa,\n            newReserveFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\n     * @param addAmount Amount of addition to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReservesInternal(uint256 addAmount)\n        internal\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return\n                fail(\n                    Error(error),\n                    FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED\n                );\n        }\n\n        uint256 totalReservesNew;\n        uint256 actualAddAmount;\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.ADD_RESERVES_FRESH_CHECK\n                )\n            );\n        }\n\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\n\n        totalReservesNew = totalReserves + actualAddAmount;\n\n        require(totalReservesNew >= totalReserves, \"CT22\");\n\n        totalReserves = totalReservesNew;\n\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\n\n        return (uint256(Error.NO_ERROR));\n    }\n\n    function _addSubsidyInternal(uint256 addAmount)\n        internal\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n            return fail(Error(error), FailureInfo.ADD_SUBSIDY_FUND_FAILED);\n        }\n\n        uint256 subsidyFundNew;\n        uint256 actualAddAmount;\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.ADD_SUBSIDY_FUND_FRESH_CHECK\n                )\n            );\n        }\n\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\n\n        subsidyFundNew = subsidyFund + actualAddAmount;\n\n        require(subsidyFundNew >= subsidyFund, \"CT22\");\n\n        subsidyFund = subsidyFundNew;\n\n        emit SubsidyAdded(msg.sender, actualAddAmount, subsidyFundNew);\n\n        /* Return (NO_ERROR, actualAddAmount) */\n        return (uint256(Error.NO_ERROR));\n    }\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring to admin\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReserves(uint256 reduceAmount)\n        external\n        override\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return\n                fail(\n                    Error(error),\n                    FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED\n                );\n        }\n        return _reduceReservesFresh(reduceAmount);\n    }\n\n    /**\n     * @notice Reduces reserves by transferring to admin\n     * @dev Requires fresh interest accrual\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReservesFresh(uint256 reduceAmount)\n        internal\n        returns (uint256)\n    {\n        uint256 totalReservesNew;\n\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.REDUCE_RESERVES_ADMIN_CHECK\n                );\n        }\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.REDUCE_RESERVES_FRESH_CHECK\n                );\n        }\n\n        if (getCashPrior() < reduceAmount) {\n            return\n                fail(\n                    Error.TOKEN_INSUFFICIENT_CASH,\n                    FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE\n                );\n        }\n\n        if (reduceAmount > totalReserves) {\n            return\n                fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\n        }\n\n        totalReservesNew = totalReserves - reduceAmount;\n        require(totalReservesNew <= totalReserves, \"CT23\");\n\n        totalReserves = totalReservesNew;\n\n        doTransferOut(admin, reduceAmount);\n\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\n     * @dev Admin function to accrue interest and update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\n        public\n        override\n        returns (uint256)\n    {\n        uint256 error = accrueInterest();\n        if (error != uint256(Error.NO_ERROR)) {\n            return\n                fail(\n                    Error(error),\n                    FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED\n                );\n        }\n        return _setInterestRateModelFresh(newInterestRateModel);\n    }\n\n    /**\n     * @notice updates the interest rate model (*requires fresh interest accrual)\n     * @dev Admin function to update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel)\n        internal\n        returns (uint256)\n    {\n        InterestRateModel oldInterestRateModel;\n\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK\n                );\n        }\n\n        if (accrualBlockNumber != getBlockNumber()) {\n            return\n                fail(\n                    Error.MARKET_NOT_FRESH,\n                    FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK\n                );\n        }\n\n        oldInterestRateModel = interestRateModel;\n\n        require(newInterestRateModel.isInterestRateModel(), \"CT21\");\n\n        interestRateModel = newInterestRateModel;\n\n        emit NewMarketInterestRateModel(\n            oldInterestRateModel,\n            newInterestRateModel\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Gets balance of this contract in terms of the underlying\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of underlying owned by this contract\n     */\n    function getCashPrior() internal view virtual returns (uint256);\n\n    /**\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\n     *  This may revert due to insufficient balance or insufficient allowance.\n     */\n    function doTransferIn(address from, uint256 amount)\n        internal\n        virtual\n        returns (uint256);\n\n    /**\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\n     */\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     */\n    modifier nonReentrant() {\n        require(_notEntered, \"re-entered\");\n        _notEntered = false;\n        _;\n        _notEntered = true;\n    }\n}\n"
    },
    "contracts/ErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\ncontract ComptrollerErrorReporter {\n    enum Error {\n        NO_ERROR,\n        UNAUTHORIZED,\n        COMPTROLLER_MISMATCH,\n        INSUFFICIENT_SHORTFALL,\n        INSUFFICIENT_LIQUIDITY,\n        INVALID_CLOSE_FACTOR,\n        INVALID_COLLATERAL_FACTOR,\n        INVALID_LIQUIDATION_INCENTIVE,\n        MARKET_NOT_ENTERED, // no longer possible\n        MARKET_NOT_LISTED,\n        MARKET_ALREADY_LISTED,\n        MATH_ERROR,\n        NONZERO_BORROW_BALANCE,\n        PRICE_ERROR,\n        REJECTION,\n        SNAPSHOT_ERROR,\n        TOO_MANY_ASSETS,\n        TOO_MUCH_REPAY\n    }\n\n    enum FailureInfo {\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n        EXIT_MARKET_BALANCE_OWED,\n        EXIT_MARKET_REJECTION,\n        SET_CLOSE_FACTOR_OWNER_CHECK,\n        SET_CLOSE_FACTOR_VALIDATION,\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\n        SET_COLLATERAL_FACTOR_VALIDATION,\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\n        SET_IMPLEMENTATION_OWNER_CHECK,\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\n        SET_MAX_ASSETS_OWNER_CHECK,\n        SET_PENDING_ADMIN_OWNER_CHECK,\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\n        SET_PRICE_ORACLE_OWNER_CHECK,\n        SUPPORT_MARKET_EXISTS,\n        SUPPORT_MARKET_OWNER_CHECK,\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\n    }\n\n    /**\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n     **/\n    event Failure(uint256 error, uint256 info, uint256 detail);\n\n    /**\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n     */\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\n        emit Failure(uint256(err), uint256(info), 0);\n\n        return uint256(err);\n    }\n\n    /**\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n     */\n    function failOpaque(\n        Error err,\n        FailureInfo info,\n        uint256 opaqueError\n    ) internal returns (uint256) {\n        emit Failure(uint256(err), uint256(info), opaqueError);\n\n        return uint256(err);\n    }\n}\n\ncontract TokenErrorReporter {\n    enum Error {\n        NO_ERROR,\n        UNAUTHORIZED,\n        BAD_INPUT,\n        COMPTROLLER_REJECTION,\n        COMPTROLLER_CALCULATION_ERROR,\n        INTEREST_RATE_MODEL_ERROR,\n        INVALID_ACCOUNT_PAIR,\n        INVALID_CLOSE_AMOUNT_REQUESTED,\n        INVALID_COLLATERAL_FACTOR,\n        MATH_ERROR,\n        MARKET_NOT_FRESH,\n        MARKET_NOT_LISTED,\n        TOKEN_INSUFFICIENT_ALLOWANCE,\n        TOKEN_INSUFFICIENT_BALANCE,\n        TOKEN_INSUFFICIENT_CASH,\n        TOKEN_TRANSFER_IN_FAILED,\n        TOKEN_TRANSFER_OUT_FAILED\n    }\n\n    /*\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\n     *       This is because FailureInfo grows significantly faster, and\n     *       the order of Error has some meaning, while the order of FailureInfo\n     *       is entirely arbitrary.\n     */\n    enum FailureInfo {\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n        BORROW_ACCRUE_INTEREST_FAILED,\n        BORROW_CASH_NOT_AVAILABLE,\n        BORROW_FRESHNESS_CHECK,\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n        BORROW_MARKET_NOT_LISTED,\n        BORROW_COMPTROLLER_REJECTION,\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\n        LIQUIDATE_COMPTROLLER_REJECTION,\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\n        LIQUIDATE_FRESHNESS_CHECK,\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\n        LIQUIDATE_SEIZE_TOO_MUCH,\n        MINT_ACCRUE_INTEREST_FAILED,\n        MINT_COMPTROLLER_REJECTION,\n        MINT_EXCHANGE_CALCULATION_FAILED,\n        MINT_EXCHANGE_RATE_READ_FAILED,\n        MINT_FRESHNESS_CHECK,\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n        MINT_TRANSFER_IN_FAILED,\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\n        REDEEM_ACCRUE_INTEREST_FAILED,\n        REDEEM_COMPTROLLER_REJECTION,\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\n        REDEEM_FRESHNESS_CHECK,\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\n        REDUCE_RESERVES_ADMIN_CHECK,\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\n        REDUCE_RESERVES_FRESH_CHECK,\n        REDUCE_RESERVES_VALIDATION,\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_COMPTROLLER_REJECTION,\n        REPAY_BORROW_FRESHNESS_CHECK,\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n        SET_COLLATERAL_FACTOR_VALIDATION,\n        SET_COMPTROLLER_OWNER_CHECK,\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\n        SET_MAX_ASSETS_OWNER_CHECK,\n        SET_ORACLE_MARKET_NOT_LISTED,\n        SET_PENDING_ADMIN_OWNER_CHECK,\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\n        SET_RESERVE_FACTOR_FRESH_CHECK,\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\n        TRANSFER_COMPTROLLER_REJECTION,\n        TRANSFER_NOT_ALLOWED,\n        TRANSFER_NOT_ENOUGH,\n        TRANSFER_TOO_MUCH,\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\n        ADD_RESERVES_FRESH_CHECK,\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\n        ADD_SUBSIDY_FUND_FAILED,\n        ADD_SUBSIDY_FUND_FRESH_CHECK\n    }\n\n    /**\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n     **/\n    event TokenFailure(uint256 error, uint256 info, uint256 detail);\n\n    /**\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n     */\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\n        emit TokenFailure(uint256(err), uint256(info), 0);\n\n        return uint256(err);\n    }\n\n    /**\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n     */\n    function failOpaque(\n        Error err,\n        FailureInfo info,\n        uint256 opaqueError\n    ) internal returns (uint256) {\n        emit TokenFailure(uint256(err), uint256(info), opaqueError);\n\n        return uint256(err);\n    }\n}\n"
    },
    "contracts/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\n\nabstract contract PriceOracle {\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\n    bool public constant isPriceOracle = true;\n\n    /**\n     * @notice Get the underlying price of a cToken asset\n     * @param cToken The cToken to get the underlying price of\n     * @return The underlying asset price mantissa (scaled by 1e18).\n     *  Zero means the price is unavailable.\n     */\n    function getUnderlyingPrice(CToken cToken)\n        external\n        view\n        virtual\n        returns (uint256);\n}\n"
    },
    "contracts/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./PriceOracle.sol\";\n\ncontract UnitrollerAdminStorage {\n    /**\n    * @notice Administrator for this contract\n    */\n    address public admin;\n\n    /**\n    * @notice Pending administrator for this contract\n    */\n    address public pendingAdmin;\n\n    /**\n    * @notice Active brains of Unitroller\n    */\n    address public comptrollerImplementation;\n\n    /**\n    * @notice Pending brains of Unitroller\n    */\n    address public pendingComptrollerImplementation;\n}\n\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\n\n    /**\n     * @notice Oracle which gives the price of any given asset\n     */\n    PriceOracle public oracle;\n\n    /**\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n     */\n    uint public closeFactorMantissa;\n\n    /**\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\n     */\n    uint public liquidationIncentiveMantissa;\n\n    /**\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\n     */\n    uint public maxAssets;\n\n    /**\n     * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n     */\n    mapping(address => CToken[]) public accountAssets;\n\n}\n\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\n    struct Market {\n        /// @notice Whether or not this market is listed\n        bool isListed;\n\n        /**\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\n         *  Must be between 0 and 1, and stored as a mantissa.\n         */\n        uint collateralFactorMantissa;\n\n        /// @notice Per-market mapping of \"accounts in this asset\"\n        mapping(address => bool) accountMembership;\n\n        /// @notice Whether or not this market receives COMP\n        bool isComped;\n    }\n\n    /**\n     * @notice Official mapping of cTokens -> Market metadata\n     * @dev Used e.g. to determine if a market is supported\n     */\n    mapping(address => Market) public markets;\n\n\n    /**\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n     *  Actions which allow users to remove their own assets cannot be paused.\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\n     */\n    address public pauseGuardian;\n    bool public _mintGuardianPaused;\n    bool public _borrowGuardianPaused;\n    bool public transferGuardianPaused;\n    bool public seizeGuardianPaused;\n    mapping(address => bool) public mintGuardianPaused;\n    mapping(address => bool) public borrowGuardianPaused;\n}\n\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\n    struct CompMarketState {\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\n        uint224 index;\n\n        /// @notice The block number the index was last updated at\n        uint32 block;\n    }\n\n    /// @notice A list of all markets\n    CToken[] public allMarkets;\n\n    /// @notice The rate at which the flywheel distributes COMP, per block\n    uint public compRate;\n\n    /// @notice The portion of compRate that each market currently receives\n    mapping(address => uint) public compSpeeds;\n\n    /// @notice The COMP market supply state for each market\n    mapping(address => CompMarketState) public compSupplyState;\n\n    /// @notice The COMP market borrow state for each market\n    mapping(address => CompMarketState) public compBorrowState;\n\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\n\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\n\n    /// @notice The COMP accrued but not yet transferred to each user\n    mapping(address => uint) public compAccrued;\n}\n\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n    address public borrowCapGuardian;\n\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n    mapping(address => uint) public borrowCaps;\n\n    // @notice address of the TROP token\n    address public tropAddress;\n}\n\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\n    /// @notice The portion of COMP that each contributor receives per block\n    mapping(address => uint) public compContributorSpeeds;\n\n    /// @notice Last block at which a contributor's COMP rewards have been allocated\n    mapping(address => uint) public lastContributorBlock;\n}\n"
    },
    "contracts/Unitroller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./ErrorReporter.sol\";\nimport \"./ComptrollerStorage.sol\";\n\n/**\n * @title ComptrollerCore\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\n * CTokens should reference this contract as their comptroller.\n */\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\n    /**\n     * @notice Emitted when pendingComptrollerImplementation is changed\n     */\n    event NewPendingImplementation(\n        address oldPendingImplementation,\n        address newPendingImplementation\n    );\n\n    /**\n     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\n     */\n    event NewImplementation(\n        address oldImplementation,\n        address newImplementation\n    );\n\n    /**\n     * @notice Emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    constructor() {\n        // Set admin to caller\n        admin = msg.sender;\n    }\n\n    /*** Admin Functions ***/\n    function _setPendingImplementation(address newPendingImplementation)\n        public\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK\n                );\n        }\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n        pendingComptrollerImplementation = newPendingImplementation;\n\n        emit NewPendingImplementation(\n            oldPendingImplementation,\n            pendingComptrollerImplementation\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n     * @dev Admin function for new implementation to accept it's role as implementation\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _acceptImplementation() public returns (uint256) {\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\n        if (\n            msg.sender != pendingComptrollerImplementation ||\n            pendingComptrollerImplementation == address(0)\n        ) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK\n                );\n        }\n\n        // Save current values for inclusion in log\n        address oldImplementation = comptrollerImplementation;\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n        comptrollerImplementation = pendingComptrollerImplementation;\n\n        pendingComptrollerImplementation = address(0);\n\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\n        emit NewPendingImplementation(\n            oldPendingImplementation,\n            pendingComptrollerImplementation\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @param newPendingAdmin New pending admin.\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPendingAdmin(address newPendingAdmin)\n        public\n        returns (uint256)\n    {\n        // Check caller = admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK\n                );\n        }\n\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n     * @dev Admin function for pending admin to accept role and update admin\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _acceptAdmin() public returns (uint256) {\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK\n                );\n        }\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * It returns to the external caller whatever the implementation returns\n     * or forwards reverts.\n     */\n    function internalFallback() public payable {\n        // delegate all other functions to current implementation\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n        assembly {\n            let free_mem_ptr := mload(0x40)\n            returndatacopy(free_mem_ptr, 0, returndatasize())\n\n            switch success\n            case 0 {\n                revert(free_mem_ptr, returndatasize())\n            }\n            default {\n                return(free_mem_ptr, returndatasize())\n            }\n        }\n    }\n\n    fallback() external payable {\n        internalFallback();\n    }\n\n    receive() external payable {\n        internalFallback();\n    }\n}\n"
    },
    "contracts/Governance/TROP.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\npragma experimental ABIEncoderV2;\n\n/**\n * @title TROP ERC20 tokens.\n * @author tropykus\n * @notice Yield farming tokens that allow to  propose and vote for protocol changes using the governance system.\n */\ncontract TROP {\n    /// @notice EIP-20 token name for this token\n    string public constant name = \"tropykus\";\n\n    /// @notice EIP-20 token symbol for this token\n    string public constant symbol = \"TROP\";\n\n    /// @notice EIP-20 token decimals for this token\n    uint8 public constant decimals = 18;\n\n    /// @notice Total number of tokens in circulation\n    uint256 public constant totalSupply = 10000000e18; // 10 million TROP\n\n    /// @notice Allowance amounts on behalf of others\n    mapping(address => mapping(address => uint96)) internal allowances;\n\n    /// @notice Official record of token balances for each account\n    mapping(address => uint96) internal balances;\n\n    /// @notice A record of each accounts delegate\n    mapping(address => address) public delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint96 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\n        );\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping(address => uint256) public nonces;\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed fromDelegate,\n        address indexed toDelegate\n    );\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(\n        address indexed delegate,\n        uint256 previousBalance,\n        uint256 newBalance\n    );\n\n    /// @notice The standard EIP-20 transfer event\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /// @notice The standard EIP-20 approval event\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    /**\n     * @notice Construct a new TROP token\n     * @param account The initial account to grant all the tokens\n     */\n    constructor(address account) {\n        balances[account] = uint96(totalSupply);\n        emit Transfer(address(0), account, totalSupply);\n    }\n\n    /**\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n     * @param account The address of the account holding the funds\n     * @param spender The address of the account spending the funds\n     * @return The number of tokens approved\n     */\n    function allowance(address account, address spender)\n        external\n        view\n        returns (uint256)\n    {\n        return allowances[account][spender];\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 rawAmount)\n        external\n        returns (bool)\n    {\n        uint96 amount;\n        if (rawAmount == type(uint256).max) {\n            amount = type(uint96).max;\n        } else {\n            amount = safe96(rawAmount, \"TROP::approve: amount exceeds 96 bits\");\n        }\n\n        allowances[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the number of tokens held by the `account`\n     * @param account The address of the account to get the balance of\n     * @return The number of tokens held\n     */\n    function balanceOf(address account) external view returns (uint256) {\n        return balances[account];\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\n        uint96 amount = safe96(\n            rawAmount,\n            \"TROP::transfer: amount exceeds 96 bits\"\n        );\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 rawAmount\n    ) external returns (bool) {\n        address spender = msg.sender;\n        uint96 spenderAllowance = allowances[src][spender];\n        uint96 amount = safe96(\n            rawAmount,\n            \"TROP::approve: amount exceeds 96 bits\"\n        );\n\n        if (spender != src && spenderAllowance != type(uint96).max) {\n            uint96 newAllowance = sub96(\n                spenderAllowance,\n                amount,\n                \"TROP::transferFrom: transfer amount exceeds spender allowance\"\n            );\n            allowances[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) public {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                getChainId(),\n                address(this)\n            )\n        );\n        bytes32 structHash = keccak256(\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n        );\n        address signatory = ecrecover(digest, v, r, s);\n        require(\n            signatory != 0xdcc703c0E500B653Ca82273B7BFAd8045D85a470 &&\n                signatory != address(0),\n            \"TROP::delegateBySig: invalid signature\"\n        );\n        require(\n            nonce == nonces[signatory]++,\n            \"TROP::delegateBySig: invalid nonce\"\n        );\n        require(\n            block.timestamp <= expiry,\n            \"TROP::delegateBySig: signature expired\"\n        );\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint96) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber)\n        public\n        view\n        returns (uint96)\n    {\n        require(\n            blockNumber < block.number,\n            \"TROP::getPriorVotes: not yet determined\"\n        );\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint96 delegatorBalance = balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _transferTokens(\n        address src,\n        address dst,\n        uint96 amount\n    ) internal {\n        require(\n            src != address(0),\n            \"TROP::_transferTokens: cannot transfer from the zero address\"\n        );\n        require(\n            dst != address(0),\n            \"TROP::_transferTokens: cannot transfer to the zero address\"\n        );\n\n        balances[src] = sub96(\n            balances[src],\n            amount,\n            \"TROP::_transferTokens: transfer amount exceeds balance\"\n        );\n        balances[dst] = add96(\n            balances[dst],\n            amount,\n            \"TROP::_transferTokens: transfer amount overflows\"\n        );\n        emit Transfer(src, dst, amount);\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint96 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint96 srcRepOld = srcRepNum > 0\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\n                    : 0;\n                uint96 srcRepNew = sub96(\n                    srcRepOld,\n                    amount,\n                    \"TROP::_moveVotes: vote amount underflows\"\n                );\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint96 dstRepOld = dstRepNum > 0\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\n                    : 0;\n                uint96 dstRepNew = add96(\n                    dstRepOld,\n                    amount,\n                    \"TROP::_moveVotes: vote amount overflows\"\n                );\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint96 oldVotes,\n        uint96 newVotes\n    ) internal {\n        uint32 blockNumber = safe32(\n            block.number,\n            \"TROP::_writeCheckpoint: block number exceeds 32 bits\"\n        );\n\n        if (\n            nCheckpoints > 0 &&\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n        ) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\n                blockNumber,\n                newVotes\n            );\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint256 n, string memory errorMessage)\n        internal\n        pure\n        returns (uint32)\n    {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function safe96(uint256 n, string memory errorMessage)\n        internal\n        pure\n        returns (uint96)\n    {\n        require(n < 2**96, errorMessage);\n        return uint96(n);\n    }\n\n    function add96(\n        uint96 a,\n        uint96 b,\n        string memory errorMessage\n    ) internal pure returns (uint96) {\n        uint96 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub96(\n        uint96 a,\n        uint96 b,\n        string memory errorMessage\n    ) internal pure returns (uint96) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n"
    },
    "contracts/EIP20Interface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\n/**\n * @title ERC 20 Token Standard Interface\n *  https://eips.ethereum.org/EIPS/eip-20\n */\ninterface EIP20Interface {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @notice Get the total number of tokens in circulation\n     * @return The supply of tokens\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return balance The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return success Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 amount)\n        external\n        returns (bool success);\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return success Whether or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (bool success);\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (-1 means infinite)\n     * @return success Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount)\n        external\n        returns (bool success);\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return remaining The number of tokens allowed to be spent (-1 means infinite)\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n}\n"
    },
    "contracts/WhitelistInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\ninterface WhitelistInterface {\n    function setStatus(bool _newStatus) external;\n    function enabled() external view returns(bool);\n\n    function addUsers(address[] memory _users) external;\n    function exist(address _user) external view returns(bool);\n    function getUsers() external view returns(address[] memory currentUsers);\n    function removeUser(address _user) external;\n}"
    },
    "contracts/Lens/TropykusLens.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\npragma experimental ABIEncoderV2;\n\nimport \"../CErc20.sol\";\nimport \"../CToken.sol\";\nimport \"../PriceOracle.sol\";\nimport \"../EIP20Interface.sol\";\nimport \"../Governance/GovernorAlpha.sol\";\nimport \"../Governance/TROP.sol\";\n\ninterface ComptrollerLensInterface {\n    function markets(address) external view returns (bool, uint);\n    function oracle() external view returns (PriceOracle);\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\n    function getAssetsIn(address) external view returns (CToken[] memory);\n    function claimComp(address) external;\n    function compAccrued(address) external view returns (uint);\n}\n\n/**\n  * @title Helper contract to get information of the protocol .\n  * @author tropykus\n  * @notice TropykusLens allows to make obtain global information with a single call.\n  */\ncontract TropykusLens {\n    struct CTokenMetadata {\n        address cToken;\n        uint exchangeRateCurrent;\n        uint supplyRatePerBlock;\n        uint borrowRatePerBlock;\n        uint reserveFactorMantissa;\n        uint totalBorrows;\n        uint totalReserves;\n        uint totalSupply;\n        uint totalCash;\n        bool isListed;\n        uint collateralFactorMantissa;\n        address underlyingAssetAddress;\n        uint cTokenDecimals;\n        uint underlyingDecimals;\n    }\n\n    function cTokenMetadata(CToken cToken) public returns (CTokenMetadata memory) {\n        uint exchangeRateCurrent = cToken.exchangeRateCurrent();\n        ComptrollerLensInterface comptroller = ComptrollerLensInterface(address(cToken.comptroller()));\n        (bool isListed, uint collateralFactorMantissa) = comptroller.markets(address(cToken));\n        address underlyingAssetAddress;\n        uint underlyingDecimals;\n\n        if (compareStrings(cToken.symbol(), \"kRBTC\") || compareStrings(cToken.symbol(), \"kSAT\")) {\n            underlyingAssetAddress = address(0);\n            underlyingDecimals = 18;\n        } else {\n            CErc20 cErc20 = CErc20(address(cToken));\n            underlyingAssetAddress = cErc20.underlying();\n            underlyingDecimals = EIP20Interface(cErc20.underlying()).decimals();\n        }\n\n        return CTokenMetadata({\n            cToken: address(cToken),\n            exchangeRateCurrent: exchangeRateCurrent,\n            supplyRatePerBlock: cToken.supplyRatePerBlock(),\n            borrowRatePerBlock: cToken.borrowRatePerBlock(),\n            reserveFactorMantissa: cToken.reserveFactorMantissa(),\n            totalBorrows: cToken.totalBorrows(),\n            totalReserves: cToken.totalReserves(),\n            totalSupply: cToken.totalSupply(),\n            totalCash: cToken.getCash(),\n            isListed: isListed,\n            collateralFactorMantissa: collateralFactorMantissa,\n            underlyingAssetAddress: underlyingAssetAddress,\n            cTokenDecimals: cToken.decimals(),\n            underlyingDecimals: underlyingDecimals\n        });\n    }\n\n    function cTokenMetadataAll(CToken[] calldata cTokens) external returns (CTokenMetadata[] memory) {\n        uint cTokenCount = cTokens.length;\n        CTokenMetadata[] memory res = new CTokenMetadata[](cTokenCount);\n        for (uint i = 0; i < cTokenCount; i++) {\n            res[i] = cTokenMetadata(cTokens[i]);\n        }\n        return res;\n    }\n\n    struct CTokenBalances {\n        address cToken;\n        uint balanceOf;\n        uint borrowBalanceCurrent;\n        uint balanceOfUnderlying;\n        uint tokenBalance;\n        uint tokenAllowance;\n    }\n\n    function cTokenBalances(CToken cToken, address payable account) public returns (CTokenBalances memory) {\n        uint balanceOf = cToken.balanceOf(account);\n        uint borrowBalanceCurrent = cToken.borrowBalanceCurrent(account);\n        uint balanceOfUnderlying = cToken.balanceOfUnderlying(account);\n        uint tokenBalance;\n        uint tokenAllowance;\n\n        if (compareStrings(cToken.symbol(), \"kRBTC\") || compareStrings(cToken.symbol(), \"kSAT\")) {\n            tokenBalance = account.balance;\n            tokenAllowance = account.balance;\n        } else {\n            CErc20 cErc20 = CErc20(address(cToken));\n            EIP20Interface underlying = EIP20Interface(cErc20.underlying());\n            tokenBalance = underlying.balanceOf(account);\n            tokenAllowance = underlying.allowance(account, address(cToken));\n        }\n\n        return CTokenBalances({\n            cToken: address(cToken),\n            balanceOf: balanceOf,\n            borrowBalanceCurrent: borrowBalanceCurrent,\n            balanceOfUnderlying: balanceOfUnderlying,\n            tokenBalance: tokenBalance,\n            tokenAllowance: tokenAllowance\n        });\n    }\n\n    function cTokenBalancesAll(CToken[] calldata cTokens, address payable account) external returns (CTokenBalances[] memory) {\n        uint cTokenCount = cTokens.length;\n        CTokenBalances[] memory res = new CTokenBalances[](cTokenCount);\n        for (uint i = 0; i < cTokenCount; i++) {\n            res[i] = cTokenBalances(cTokens[i], account);\n        }\n        return res;\n    }\n\n    struct CTokenUnderlyingPrice {\n        address cToken;\n        uint underlyingPrice;\n    }\n\n    function cTokenUnderlyingPrice(CToken cToken) public view returns (CTokenUnderlyingPrice memory) {\n        ComptrollerLensInterface comptroller = ComptrollerLensInterface(address(cToken.comptroller()));\n        PriceOracle priceOracle = comptroller.oracle();\n\n        return CTokenUnderlyingPrice({\n            cToken: address(cToken),\n            underlyingPrice: priceOracle.getUnderlyingPrice(cToken)\n        });\n    }\n\n    function cTokenUnderlyingPriceAll(CToken[] calldata cTokens) external view returns (CTokenUnderlyingPrice[] memory) {\n        uint cTokenCount = cTokens.length;\n        CTokenUnderlyingPrice[] memory res = new CTokenUnderlyingPrice[](cTokenCount);\n        for (uint i = 0; i < cTokenCount; i++) {\n            res[i] = cTokenUnderlyingPrice(cTokens[i]);\n        }\n        return res;\n    }\n\n    struct AccountLimits {\n        CToken[] markets;\n        uint liquidity;\n        uint shortfall;\n    }\n\n    function getAccountLimits(ComptrollerLensInterface comptroller, address account) public view returns (AccountLimits memory) {\n        (uint errorCode, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(account);\n        require(errorCode == 0,\"liquidity error\");\n\n        return AccountLimits({\n            markets: comptroller.getAssetsIn(account),\n            liquidity: liquidity,\n            shortfall: shortfall\n        });\n    }\n\n    struct GovReceipt {\n        uint proposalId;\n        bool hasVoted;\n        bool support;\n        uint96 votes;\n    }\n\n    function getGovReceipts(GovernorAlpha governor, address voter, uint[] memory proposalIds) public view returns (GovReceipt[] memory) {\n        uint proposalCount = proposalIds.length;\n        GovReceipt[] memory res = new GovReceipt[](proposalCount);\n        for (uint i = 0; i < proposalCount; i++) {\n            GovernorAlpha.Receipt memory receipt = governor.getReceipt(proposalIds[i], voter);\n            res[i] = GovReceipt({\n                proposalId: proposalIds[i],\n                hasVoted: receipt.hasVoted,\n                support: receipt.support,\n                votes: receipt.votes\n            });\n        }\n        return res;\n    }\n\n    struct GovProposal {\n        uint proposalId;\n        address proposer;\n        uint eta;\n        address[] targets;\n        uint[] values;\n        string[] signatures;\n        bytes[] calldatas;\n        uint startBlock;\n        uint endBlock;\n        uint forVotes;\n        uint againstVotes;\n        bool canceled;\n        bool executed;\n    }\n\n    function setProposal(GovProposal memory res, GovernorAlpha governor, uint proposalId) internal view {\n        (\n            ,\n            address proposer,\n            uint eta,\n            uint startBlock,\n            uint endBlock,\n            uint forVotes,\n            uint againstVotes,\n            bool canceled,\n            bool executed\n        ) = governor.proposals(proposalId);\n        res.proposalId = proposalId;\n        res.proposer = proposer;\n        res.eta = eta;\n        res.startBlock = startBlock;\n        res.endBlock = endBlock;\n        res.forVotes = forVotes;\n        res.againstVotes = againstVotes;\n        res.canceled = canceled;\n        res.executed = executed;\n    }\n\n    function getGovProposals(GovernorAlpha governor, uint[] calldata proposalIds) external view returns (GovProposal[] memory) {\n        GovProposal[] memory res = new GovProposal[](proposalIds.length);\n        for (uint i = 0; i < proposalIds.length; i++) {\n            (\n                address[] memory targets,\n                uint[] memory values,\n                string[] memory signatures,\n                bytes[] memory calldatas\n            ) = governor.getActions(proposalIds[i]);\n            res[i] = GovProposal({\n                proposalId: 0,\n                proposer: address(0),\n                eta: 0,\n                targets: targets,\n                values: values,\n                signatures: signatures,\n                calldatas: calldatas,\n                startBlock: 0,\n                endBlock: 0,\n                forVotes: 0,\n                againstVotes: 0,\n                canceled: false,\n                executed: false\n            });\n            setProposal(res[i], governor, proposalIds[i]);\n        }\n        return res;\n    }\n\n    struct CompBalanceMetadata {\n        uint balance;\n        uint votes;\n        address delegate;\n    }\n\n    function getCompBalanceMetadata(TROP comp, address account) external view returns (CompBalanceMetadata memory) {\n        return CompBalanceMetadata({\n            balance: comp.balanceOf(account),\n            votes: uint256(comp.getCurrentVotes(account)),\n            delegate: comp.delegates(account)\n        });\n    }\n\n    struct CompBalanceMetadataExt {\n        uint balance;\n        uint votes;\n        address delegate;\n        uint allocated;\n    }\n\n    function getCompBalanceMetadataExt(TROP comp, ComptrollerLensInterface comptroller, address account) external returns (CompBalanceMetadataExt memory) {\n        uint balance = comp.balanceOf(account);\n        comptroller.claimComp(account);\n        uint newBalance = comp.balanceOf(account);\n        uint accrued = comptroller.compAccrued(account);\n        uint total = add(accrued, newBalance, \"sum comp total\");\n        uint allocated = sub(total, balance, \"sub allocated\");\n\n        return CompBalanceMetadataExt({\n            balance: balance,\n            votes: uint256(comp.getCurrentVotes(account)),\n            delegate: comp.delegates(account),\n            allocated: allocated\n        });\n    }\n\n    struct CompVotes {\n        uint blockNumber;\n        uint votes;\n    }\n\n    function getCompVotes(TROP comp, address account, uint32[] calldata blockNumbers) external view returns (CompVotes[] memory) {\n        CompVotes[] memory res = new CompVotes[](blockNumbers.length);\n        for (uint i = 0; i < blockNumbers.length; i++) {\n            res[i] = CompVotes({\n                blockNumber: uint256(blockNumbers[i]),\n                votes: uint256(comp.getPriorVotes(account, blockNumbers[i]))\n            });\n        }\n        return res;\n    }\n\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n    }\n\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        require(b <= a, errorMessage);\n        uint c = a - b;\n        return c;\n    }\n}\n"
    },
    "contracts/CErc20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./CTokenInterfaces.sol\";\n\n/**\n * @title tropykus CErc20 Contract\n * @notice CTokens which wrap an EIP-20 underlying\n * @author tropykus\n */\ncontract CErc20 is CToken, CErc20Interface {\n    /**\n     * @notice Initialize the new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     */\n    function initialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) public {\n        // CToken initialize does the bulk of the work\n        super.initialize(\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set underlying and sanity check it\n        underlying = underlying_;\n        EIP20Interface(underlying).totalSupply();\n    }\n\n    /*** User Interface ***/\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function mint(uint256 mintAmount) external override returns (uint256) {\n        (uint256 err, ) = mintInternal(mintAmount);\n        return err;\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint256 redeemAmount)\n        external\n        override\n        returns (uint256)\n    {\n        return redeemUnderlyingInternal(redeemAmount);\n    }\n\n    /**\n     * @notice Sender borrows assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function borrow(uint256 borrowAmount) external override returns (uint256) {\n        return borrowInternal(borrowAmount);\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrow(uint256 repayAmount)\n        external\n        override\n        returns (uint256)\n    {\n        (uint256 err, ) = repayBorrowInternal(repayAmount);\n        return err;\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function liquidateBorrow(\n        address borrower,\n        uint256 repayAmount,\n        CTokenInterface cTokenCollateral\n    ) external override returns (uint256) {\n        (uint256 err, ) = liquidateBorrowInternal(\n            borrower,\n            repayAmount,\n            cTokenCollateral\n        );\n        return err;\n    }\n\n    /**\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\n     * @param token The address of the ERC-20 token to sweep\n     */\n    function sweepToken(EIP20NonStandardInterface token) external override {\n        require(address(token) != underlying, \"EC01\");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(admin, balance);\n    }\n\n    /**\n     * @notice The sender adds to reserves.\n     * @param addAmount The amount fo underlying token to add as reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReserves(uint256 addAmount)\n        external\n        override\n        returns (uint256)\n    {\n        return _addReservesInternal(addAmount);\n    }\n\n    /*** Safe Token ***/\n\n    /**\n     * @notice Gets balance of this contract in terms of the underlying\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of underlying tokens owned by this contract\n     */\n    function getCashPrior() internal view override returns (uint256) {\n        EIP20Interface token = EIP20Interface(underlying);\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\n     *      This will revert due to insufficient balance or insufficient allowance.\n     *      This function returns the actual amount received,\n     *      which may be less than `amount` if there is a fee attached to the transfer.\n     *\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n     */\n    function doTransferIn(address from, uint256 amount)\n        internal\n        override\n        returns (uint256)\n    {\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\n        uint256 balanceBefore = EIP20Interface(underlying).balanceOf(\n            address(this)\n        );\n        token.transferFrom(from, address(this), amount);\n\n        bool success;\n        assembly {\n            switch returndatasize()\n            case 0 {\n                // This is a non-standard ERC-20\n                success := not(0) // set success to true\n            }\n            case 32 {\n                // This is a compliant ERC-20\n                returndatacopy(0, 0, 32)\n                success := mload(0) // Set `success = returndata` of external call\n            }\n            default {\n                // This is an excessively non-compliant ERC-20, revert.\n                revert(0, 0)\n            }\n        }\n        require(success, \"EC02\");\n\n        // Calculate the amount that was *actually* transferred\n        uint256 balanceAfter = EIP20Interface(underlying).balanceOf(\n            address(this)\n        );\n        require(balanceAfter >= balanceBefore, \"EC03\");\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\n    }\n\n    /**\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\n     *      it is >= amount, this should not revert in normal conditions.\n     *\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n     */\n    function doTransferOut(address payable to, uint256 amount)\n        internal\n        virtual\n        override\n    {\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\n        token.transfer(to, amount);\n\n        bool success;\n        assembly {\n            switch returndatasize()\n            case 0 {\n                // This is a non-standard ERC-20\n                success := not(0) // set success to true\n            }\n            case 32 {\n                // This is a complaint ERC-20\n                returndatacopy(0, 0, 32)\n                success := mload(0) // Set `success = returndata` of external call\n            }\n            default {\n                // This is an excessively non-compliant ERC-20, revert.\n                revert(0, 0)\n            }\n        }\n        require(success, \"CE01\");\n    }\n}\n"
    },
    "contracts/Governance/GovernorAlpha.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\npragma experimental ABIEncoderV2;\n\n/**\n * @title Governor contract to vote on tropykus platform using TROP tokens.\n * @author tropykus\n * @notice This contract allows to propose and vote for protocol changes using the TROP tokens.\n */\ncontract GovernorAlpha {\n    /// @notice The name of this contract\n    string public constant name = \"Compound Governor Alpha\";\n\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\n    function quorumVotes() public pure returns (uint256) {\n        return 400000e18;\n    } // 400,000 = 4% of Comp\n\n    /// @notice The number of votes required in order for a voter to become a proposer\n    function proposalThreshold() public pure returns (uint256) {\n        return 100000e18;\n    } // 100,000 = 1% of Comp\n\n    /// @notice The maximum number of actions that can be included in a proposal\n    function proposalMaxOperations() public pure returns (uint256) {\n        return 10;\n    } // 10 actions\n\n    /// @notice The delay before voting on a proposal may take place, once proposed\n    function votingDelay() public pure returns (uint256) {\n        return 1;\n    } // 1 block\n\n    /// @notice The duration of voting on a proposal, in blocks\n    function votingPeriod() public pure virtual returns (uint256) {\n        return 17280;\n    } // ~3 days in blocks (assuming 15s blocks)\n\n    /// @notice The address of the Compound Protocol Timelock\n    TimelockInterface public timelock;\n\n    /// @notice The address of the Compound governance token\n    CompInterface public comp;\n\n    /// @notice The address of the Governor Guardian\n    address public guardian;\n\n    /// @notice The total number of proposals\n    uint256 public proposalCount;\n\n    struct Proposal {\n        /// @notice Unique id for looking up a proposal\n        uint256 id;\n        /// @notice Creator of the proposal\n        address proposer;\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\n        uint256 eta;\n        /// @notice the ordered list of target addresses for calls to be made\n        address[] targets;\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n        uint256[] values;\n        /// @notice The ordered list of function signatures to be called\n        string[] signatures;\n        /// @notice The ordered list of calldata to be passed to each call\n        bytes[] calldatas;\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\n        uint256 startBlock;\n        /// @notice The block at which voting ends: votes must be cast prior to this block\n        uint256 endBlock;\n        /// @notice Current number of votes in favor of this proposal\n        uint256 forVotes;\n        /// @notice Current number of votes in opposition to this proposal\n        uint256 againstVotes;\n        /// @notice Flag marking whether the proposal has been canceled\n        bool canceled;\n        /// @notice Flag marking whether the proposal has been executed\n        bool executed;\n        /// @notice Receipts of ballots for the entire set of voters\n        mapping(address => Receipt) receipts;\n    }\n\n    /// @notice Ballot receipt record for a voter\n    struct Receipt {\n        /// @notice Whether or not a vote has been cast\n        bool hasVoted;\n        /// @notice Whether or not the voter supports the proposal\n        bool support;\n        /// @notice The number of votes the voter had, which were cast\n        uint96 votes;\n    }\n\n    /// @notice Possible states that a proposal may be in\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /// @notice The official record of all proposals ever proposed\n    mapping(uint256 => Proposal) public proposals;\n\n    /// @notice The latest proposal for each proposer\n    mapping(address => uint256) public latestProposalIds;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\n        );\n\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\n    bytes32 public constant BALLOT_TYPEHASH =\n        keccak256(\"Ballot(uint256 proposalId,bool support)\");\n\n    /// @notice An event emitted when a new proposal is created\n    event ProposalCreated(\n        uint256 id,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    /// @notice An event emitted when a vote has been cast on a proposal\n    event VoteCast(\n        address voter,\n        uint256 proposalId,\n        bool support,\n        uint256 votes\n    );\n\n    /// @notice An event emitted when a proposal has been canceled\n    event ProposalCanceled(uint256 id);\n\n    /// @notice An event emitted when a proposal has been queued in the Timelock\n    event ProposalQueued(uint256 id, uint256 eta);\n\n    /// @notice An event emitted when a proposal has been executed in the Timelock\n    event ProposalExecuted(uint256 id);\n\n    constructor(\n        address timelock_,\n        address comp_,\n        address guardian_\n    ) {\n        timelock = TimelockInterface(timelock_);\n        comp = CompInterface(comp_);\n        guardian = guardian_;\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public returns (uint256) {\n        require(\n            comp.getPriorVotes(msg.sender, sub256(block.number, 1)) >\n                proposalThreshold(),\n            \"GovernorAlpha::propose: proposer votes below proposal threshold\"\n        );\n        require(\n            targets.length == values.length &&\n                targets.length == signatures.length &&\n                targets.length == calldatas.length,\n            \"GovernorAlpha::propose: proposal function information arity mismatch\"\n        );\n        require(\n            targets.length != 0,\n            \"GovernorAlpha::propose: must provide actions\"\n        );\n        require(\n            targets.length <= proposalMaxOperations(),\n            \"GovernorAlpha::propose: too many actions\"\n        );\n\n        uint256 latestProposalId = latestProposalIds[msg.sender];\n        if (latestProposalId != 0) {\n            ProposalState proposersLatestProposalState = state(\n                latestProposalId\n            );\n            require(\n                proposersLatestProposalState != ProposalState.Active,\n                \"GovernorAlpha::propose: one live proposal per proposer\"\n            );\n            require(\n                proposersLatestProposalState != ProposalState.Pending,\n                \"GovernorAlpha::propose: one live proposal per proposer\"\n            );\n        }\n\n        uint256 startBlock = add256(block.number, votingDelay());\n        uint256 endBlock = add256(startBlock, votingPeriod());\n\n        proposalCount++;\n        Proposal storage newProposal = proposals[proposalCount];\n        newProposal.id = proposalCount;\n        newProposal.proposer = msg.sender;\n        newProposal.eta = 0;\n        newProposal.targets = targets;\n        newProposal.values = values;\n        newProposal.signatures = signatures;\n        newProposal.calldatas = calldatas;\n        newProposal.startBlock = startBlock;\n        newProposal.endBlock = endBlock;\n        newProposal.forVotes = 0;\n        newProposal.againstVotes = 0;\n        newProposal.canceled = false;\n        newProposal.executed = false;\n\n        latestProposalIds[newProposal.proposer] = newProposal.id;\n\n        emit ProposalCreated(\n            newProposal.id,\n            msg.sender,\n            targets,\n            values,\n            signatures,\n            calldatas,\n            startBlock,\n            endBlock,\n            description\n        );\n        return newProposal.id;\n    }\n\n    function queue(uint256 proposalId) public {\n        require(\n            state(proposalId) == ProposalState.Succeeded,\n            \"GovernorAlpha::queue: proposal can only be queued if it is succeeded\"\n        );\n        Proposal storage proposal = proposals[proposalId];\n        uint256 eta = add256(block.timestamp, timelock.delay());\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n            _queueOrRevert(\n                proposal.targets[i],\n                proposal.values[i],\n                proposal.signatures[i],\n                proposal.calldatas[i],\n                eta\n            );\n        }\n        proposal.eta = eta;\n        emit ProposalQueued(proposalId, eta);\n    }\n\n    function _queueOrRevert(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) internal {\n        require(\n            !timelock.queuedTransactions(\n                keccak256(abi.encode(target, value, signature, data, eta))\n            ),\n            \"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\"\n        );\n        timelock.queueTransaction(target, value, signature, data, eta);\n    }\n\n    function execute(uint256 proposalId) public payable {\n        require(\n            state(proposalId) == ProposalState.Queued,\n            \"GovernorAlpha::execute: proposal can only be executed if it is queued\"\n        );\n        Proposal storage proposal = proposals[proposalId];\n        proposal.executed = true;\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n            timelock.executeTransaction{value: proposal.values[i]}(\n                proposal.targets[i],\n                proposal.values[i],\n                proposal.signatures[i],\n                proposal.calldatas[i],\n                proposal.eta\n            );\n        }\n        emit ProposalExecuted(proposalId);\n    }\n\n    function cancel(uint256 proposalId) public {\n        ProposalState proposalState = state(proposalId);\n        require(\n            proposalState != ProposalState.Executed,\n            \"GovernorAlpha::cancel: cannot cancel executed proposal\"\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n        require(\n            msg.sender == guardian ||\n                comp.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <\n                proposalThreshold(),\n            \"GovernorAlpha::cancel: proposer above threshold\"\n        );\n\n        proposal.canceled = true;\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n            timelock.cancelTransaction(\n                proposal.targets[i],\n                proposal.values[i],\n                proposal.signatures[i],\n                proposal.calldatas[i],\n                proposal.eta\n            );\n        }\n\n        emit ProposalCanceled(proposalId);\n    }\n\n    function getActions(uint256 proposalId)\n        public\n        view\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        )\n    {\n        Proposal storage p = proposals[proposalId];\n        return (p.targets, p.values, p.signatures, p.calldatas);\n    }\n\n    function getReceipt(uint256 proposalId, address voter)\n        public\n        view\n        returns (Receipt memory)\n    {\n        return proposals[proposalId].receipts[voter];\n    }\n\n    function state(uint256 proposalId) public view returns (ProposalState) {\n        require(\n            proposalCount >= proposalId && proposalId > 0,\n            \"GovernorAlpha::state: invalid proposal id\"\n        );\n        Proposal storage proposal = proposals[proposalId];\n        if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (block.number <= proposal.startBlock) {\n            return ProposalState.Pending;\n        } else if (block.number <= proposal.endBlock) {\n            return ProposalState.Active;\n        } else if (\n            proposal.forVotes <= proposal.againstVotes ||\n            proposal.forVotes < quorumVotes()\n        ) {\n            return ProposalState.Defeated;\n        } else if (proposal.eta == 0) {\n            return ProposalState.Succeeded;\n        } else if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (\n            block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())\n        ) {\n            return ProposalState.Expired;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    function castVote(uint256 proposalId, bool support) public {\n        return _castVote(msg.sender, proposalId, support);\n    }\n\n    function castVoteBySig(\n        uint256 proposalId,\n        bool support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                getChainId(),\n                address(this)\n            )\n        );\n        bytes32 structHash = keccak256(\n            abi.encode(BALLOT_TYPEHASH, proposalId, support)\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n        );\n        address signatory = ecrecover(digest, v, r, s);\n        require(\n            signatory != 0xdcc703c0E500B653Ca82273B7BFAd8045D85a470 &&\n                signatory != address(0),\n            \"GovernorAlpha::castVoteBySig: invalid signature\"\n        );\n        return _castVote(signatory, proposalId, support);\n    }\n\n    function _castVote(\n        address voter,\n        uint256 proposalId,\n        bool support\n    ) internal {\n        require(\n            state(proposalId) == ProposalState.Active,\n            \"GovernorAlpha::_castVote: voting is closed\"\n        );\n        Proposal storage proposal = proposals[proposalId];\n        Receipt storage receipt = proposal.receipts[voter];\n        require(\n            receipt.hasVoted == false,\n            \"GovernorAlpha::_castVote: voter already voted\"\n        );\n        uint96 votes = comp.getPriorVotes(voter, proposal.startBlock);\n\n        if (support) {\n            proposal.forVotes = add256(proposal.forVotes, votes);\n        } else {\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\n        }\n\n        receipt.hasVoted = true;\n        receipt.support = support;\n        receipt.votes = votes;\n\n        emit VoteCast(voter, proposalId, support, votes);\n    }\n\n    function __acceptAdmin() public {\n        require(\n            msg.sender == guardian,\n            \"GovernorAlpha::__acceptAdmin: sender must be gov guardian\"\n        );\n        timelock.acceptAdmin();\n    }\n\n    function __abdicate() public {\n        require(\n            msg.sender == guardian,\n            \"GovernorAlpha::__abdicate: sender must be gov guardian\"\n        );\n        guardian = address(0);\n    }\n\n    function __queueSetTimelockPendingAdmin(\n        address newPendingAdmin,\n        uint256 eta\n    ) public {\n        require(\n            msg.sender == guardian,\n            \"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\n        );\n        timelock.queueTransaction(\n            address(timelock),\n            0,\n            \"setPendingAdmin(address)\",\n            abi.encode(newPendingAdmin),\n            eta\n        );\n    }\n\n    function __executeSetTimelockPendingAdmin(\n        address newPendingAdmin,\n        uint256 eta\n    ) public {\n        require(\n            msg.sender == guardian,\n            \"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\n        );\n        timelock.executeTransaction(\n            address(timelock),\n            0,\n            \"setPendingAdmin(address)\",\n            abi.encode(newPendingAdmin),\n            eta\n        );\n    }\n\n    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"addition overflow\");\n        return c;\n    }\n\n    function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"subtraction underflow\");\n        return a - b;\n    }\n\n    function getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n\ninterface TimelockInterface {\n    function delay() external view returns (uint256);\n\n    function GRACE_PERIOD() external view returns (uint256);\n\n    function acceptAdmin() external;\n\n    function queuedTransactions(bytes32 hash) external view returns (bool);\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        string calldata signature,\n        bytes calldata data,\n        uint256 eta\n    ) external returns (bytes32);\n\n    function cancelTransaction(\n        address target,\n        uint256 value,\n        string calldata signature,\n        bytes calldata data,\n        uint256 eta\n    ) external;\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string calldata signature,\n        bytes calldata data,\n        uint256 eta\n    ) external payable returns (bytes memory);\n}\n\ninterface CompInterface {\n    function getPriorVotes(address account, uint256 blockNumber)\n        external\n        view\n        returns (uint96);\n}\n"
    },
    "contracts/Reservoir.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\n/**\n * @title Reservoir Contract\n * @notice Distributes a token to a different contract at a fixed rate.\n * @dev This contract must be poked via the `drip()` function every so often.\n * @author tropykus\n */\ncontract Reservoir {\n    /// @notice The block number when the Reservoir started (immutable)\n    uint256 public dripStart;\n\n    /// @notice Tokens per block that to drip to target (immutable)\n    uint256 public dripRate;\n\n    /// @notice Reference to token to drip (immutable)\n    EIP20Interface public token;\n\n    /// @notice Target to receive dripped tokens (immutable)\n    address public target;\n\n    /// @notice Amount that has already been dripped\n    uint256 public dripped;\n\n    /**\n     * @notice Constructs a Reservoir\n     * @param dripRate_ Numer of tokens per block to drip\n     * @param token_ The token to drip\n     * @param target_ The recipient of dripped tokens\n     */\n    constructor(\n        uint256 dripRate_,\n        EIP20Interface token_,\n        address target_\n    ) {\n        dripStart = block.number;\n        dripRate = dripRate_;\n        token = token_;\n        target = target_;\n        dripped = 0;\n    }\n\n    /**\n     * @notice Drips the maximum amount of tokens to match the drip rate since inception\n     * @dev Note: this will only drip up to the amount of tokens available.\n     * @return The amount of tokens dripped in this call\n     */\n    function drip() public returns (uint256) {\n        // First, read storage into memory\n        EIP20Interface token_ = token;\n        uint256 reservoirBalance_ = token_.balanceOf(address(this)); // TODO: Verify this is a static call\n        uint256 dripRate_ = dripRate;\n        uint256 dripStart_ = dripStart;\n        uint256 dripped_ = dripped;\n        address target_ = target;\n        uint256 blockNumber_ = block.number;\n\n        // Next, calculate intermediate values\n        uint256 dripTotal_ = mul(\n            dripRate_,\n            blockNumber_ - dripStart_,\n            \"dripTotal overflow\"\n        );\n        uint256 deltaDrip_ = sub(dripTotal_, dripped_, \"deltaDrip underflow\");\n        uint256 toDrip_ = min(reservoirBalance_, deltaDrip_);\n        uint256 drippedNext_ = add(dripped_, toDrip_, \"tautological\");\n\n        // Finally, write new `dripped` value and transfer tokens to target\n        dripped = drippedNext_;\n        token_.transfer(target_, toDrip_);\n\n        return toDrip_;\n    }\n\n    /* Internal helper functions for safe math */\n\n    function add(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, errorMessage);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a <= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nimport \"./EIP20Interface.sol\";\n"
    },
    "contracts/CRBTC.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\n\n/**\n * @title tropykus CRBTC Contract\n * @notice CToken which wraps Ether\n * @author tropykus\n */\ncontract CRBTC is CToken {\n    /**\n     * @notice Construct a new CRBTC money market\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     * @param admin_ Address of the administrator of this token\n     */\n    constructor(\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address payable admin_\n    ) {\n        // Creator of the contract is admin during initialization\n        admin = payable(msg.sender);\n\n        initialize(\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set the proper admin now that initialization is done\n        admin = admin_;\n    }\n\n    /*** User Interface ***/\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Reverts upon any failure\n     */\n    function mint() external payable {\n        (uint256 err, ) = mintInternal(msg.value);\n        requireNoError(err, \"RC01\");\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint256 redeemAmount) external returns (uint256) {\n        return redeemUnderlyingInternal(redeemAmount);\n    }\n\n    /**\n     * @notice Sender borrows assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function borrow(uint256 borrowAmount) external returns (uint256) {\n        return borrowInternal(borrowAmount);\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @dev Reverts upon any failure\n     */\n    function repayBorrow() external payable {\n        (uint256 err, ) = repayBorrowInternal(msg.value);\n        requireNoError(err, \"RC02\");\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @dev Reverts upon any failure\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     */\n    function liquidateBorrow(address borrower, CToken cTokenCollateral)\n        external\n        payable\n    {\n        (uint256 err, ) = liquidateBorrowInternal(\n            borrower,\n            msg.value,\n            cTokenCollateral\n        );\n        requireNoError(err, \"RC04\");\n    }\n\n    /**\n     * @notice Send Ether to CRBTC to mint\n     */\n    fallback() external payable {\n        internalFallback();\n    }\n\n    receive() external payable {\n        internalFallback();\n    }\n\n    function internalFallback() public payable {\n        (uint256 err, ) = mintInternal(msg.value);\n        requireNoError(err, \"RC01\");\n    }\n\n    /*** Safe Token ***/\n\n    /**\n     * @notice Gets balance of this contract in terms of Ether, before this message\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of Ether owned by this contract\n     */\n    function getCashPrior() internal view override returns (uint256) {\n        (MathError err, uint256 startingBalance) = subUInt(\n            address(this).balance,\n            msg.value\n        );\n        if (interestRateModel.isTropykusInterestRateModel())\n            (err, startingBalance) = subUInt(startingBalance, subsidyFund);\n        require(err == MathError.NO_ERROR, \"RC05\");\n        return startingBalance;\n    }\n\n    /**\n     * @notice Perform the actual transfer in, which is a no-op\n     * @param from Address sending the Ether\n     * @param amount Amount of Ether being sent\n     * @return The actual amount of Ether transferred\n     */\n    function doTransferIn(address from, uint256 amount)\n        internal\n        override\n        returns (uint256)\n    {\n        // Sanity checks\n        require(msg.sender == from, \"RC06\");\n        require(msg.value == amount, \"RC07\");\n        return amount;\n    }\n\n    function doTransferOut(address payable to, uint256 amount)\n        internal\n        virtual\n        override\n    {\n        /* Send the Ether, with minimal gas and revert on failure */\n        to.transfer(amount);\n    }\n\n    function requireNoError(uint256 errCode, string memory message)\n        internal\n        pure\n    {\n        if (errCode == uint256(Error.NO_ERROR)) {\n            return;\n        }\n\n        bytes memory fullMessage = new bytes(bytes(message).length + 5);\n        uint256 i;\n\n        for (i = 0; i < bytes(message).length; i++) {\n            fullMessage[i] = bytes(message)[i];\n        }\n\n        fullMessage[i + 0] = bytes1(uint8(32));\n        fullMessage[i + 1] = bytes1(uint8(40));\n        fullMessage[i + 2] = bytes1(uint8(48 + (errCode / 10)));\n        fullMessage[i + 3] = bytes1(uint8(48 + (errCode % 10)));\n        fullMessage[i + 4] = bytes1(uint8(41));\n\n        require(errCode == uint256(Error.NO_ERROR), string(fullMessage));\n    }\n\n    function addSubsidy() external payable {\n        _addSubsidyInternal(msg.value);\n    }\n}\n"
    },
    "contracts/ComptrollerG5.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\nimport \"./Governance/TROP.sol\";\n\n/**\n * @title tropykus Comptroller Contract\n * @author tropykus\n */\ncontract ComptrollerG5 is\n    ComptrollerV4Storage,\n    ComptrollerInterface,\n    ComptrollerErrorReporter,\n    Exponential\n{\n    /// @notice Emitted when an admin supports a market\n    event MarketListed(CToken cToken);\n\n    /// @notice Emitted when an account enters a market\n    event MarketEntered(CToken cToken, address account);\n\n    /// @notice Emitted when an account exits a market\n    event MarketExited(CToken cToken, address account);\n\n    /// @notice Emitted when close factor is changed by admin\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /// @notice Emitted when a collateral factor is changed by admin\n    event NewCollateralFactor(\n        CToken cToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /// @notice Emitted when liquidation incentive is changed by admin\n    event NewLiquidationIncentive(\n        uint256 oldLiquidationIncentiveMantissa,\n        uint256 newLiquidationIncentiveMantissa\n    );\n\n    /// @notice Emitted when maxAssets is changed by admin\n    event NewMaxAssets(uint256 oldMaxAssets, uint256 newMaxAssets);\n\n    /// @notice Emitted when price oracle is changed\n    event NewPriceOracle(\n        PriceOracle oldPriceOracle,\n        PriceOracle newPriceOracle\n    );\n\n    /// @notice Emitted when pause guardian is changed\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n    /// @notice Emitted when an action is paused globally\n    event ActionPaused(string action, bool pauseState);\n\n    /// @notice Emitted when an action is paused on a market\n    event ActionPaused(CToken cToken, string action, bool pauseState);\n\n    /// @notice Emitted when market comped status is changed\n    event MarketComped(CToken cToken, bool isComped);\n\n    /// @notice Emitted when COMP rate is changed\n    event NewCompRate(uint256 oldCompRate, uint256 newCompRate);\n\n    /// @notice Emitted when a new COMP speed is calculated for a market\n    event CompSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\n\n    /// @notice Emitted when COMP is distributed to a supplier\n    event DistributedSupplierComp(\n        CToken indexed cToken,\n        address indexed supplier,\n        uint256 compDelta,\n        uint256 compSupplyIndex\n    );\n\n    /// @notice Emitted when COMP is distributed to a borrower\n    event DistributedBorrowerComp(\n        CToken indexed cToken,\n        address indexed borrower,\n        uint256 compDelta,\n        uint256 compBorrowIndex\n    );\n\n    /// @notice Emitted when borrow cap for a cToken is changed\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\n\n    /// @notice Emitted when borrow cap guardian is changed\n    event NewBorrowCapGuardian(\n        address oldBorrowCapGuardian,\n        address newBorrowCapGuardian\n    );\n\n    /// @notice The threshold above which the flywheel transfers COMP, in wei\n    uint256 public constant compClaimThreshold = 0.001e18;\n\n    /// @notice The initial COMP index for a market\n    uint224 public constant compInitialIndex = 1e36;\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n    // liquidationIncentiveMantissa must be no less than this value\n    uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\n\n    // liquidationIncentiveMantissa must be no greater than this value\n    uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(address account)\n        external\n        view\n        returns (CToken[] memory)\n    {\n        CToken[] memory assetsIn = accountAssets[account];\n\n        return assetsIn;\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(address account, CToken cToken)\n        external\n        view\n        returns (bool)\n    {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(address[] memory cTokens)\n        public\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = cTokens.length;\n\n        uint256[] memory results = new uint256[](len);\n        for (uint256 i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n     * @param cToken The market to enter\n     * @param borrower The address of the account to modify\n     * @return Success indicator for whether the market was entered\n     */\n    function addToMarketInternal(CToken cToken, address borrower)\n        internal\n        returns (Error)\n    {\n        Market storage marketToJoin = markets[address(cToken)];\n\n        if (!marketToJoin.isListed) {\n            // market is not listed, cannot join\n            return Error.MARKET_NOT_LISTED;\n        }\n\n        if (marketToJoin.accountMembership[borrower] == true) {\n            // already joined\n            return Error.NO_ERROR;\n        }\n\n        if (accountAssets[borrower].length >= maxAssets) {\n            // no space, cannot join\n            return Error.TOO_MANY_ASSETS;\n        }\n\n        // survived the gauntlet, add to list\n        // NOTE: we store these somewhat redundantly as a significant optimization\n        //  this avoids having to iterate through the list for the most common use cases\n        //  that is, only when we need to perform liquidity checks\n        //  and not whenever we want to check if an account is in a particular market\n        marketToJoin.accountMembership[borrower] = true;\n        accountAssets[borrower].push(cToken);\n\n        emit MarketEntered(cToken, borrower);\n\n        return Error.NO_ERROR;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing necessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(address cTokenAddress)\n        external\n        override\n        returns (uint256)\n    {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\n        .getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"C501\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return\n                fail(\n                    Error.NONZERO_BORROW_BALANCE,\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\n                );\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint256 allowed = redeemAllowedInternal(\n            cTokenAddress,\n            msg.sender,\n            tokensHeld\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.REJECTION,\n                    FailureInfo.EXIT_MARKET_REJECTION,\n                    allowed\n                );\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        accountAssets[msg.sender] = new CToken[](0);\n        CToken[] storage newMarketList = accountAssets[msg.sender];\n        uint256 len = userAssetList.length;\n        uint256 assetIndex = len;\n        for (uint256 i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                continue;\n            }\n            newMarketList.push(userAssetList[i]);\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    /**\n     * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!mintGuardianPaused[cToken], \"C502\");\n\n        // Shh - currently unused\n        minter;\n        mintAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, minter, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param actualMintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 actualMintAmount,\n        uint256 mintTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        minter;\n        actualMintAmount;\n        mintTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external override returns (uint256) {\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, redeemer, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function redeemAllowedInternal(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) internal view returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            redeemer,\n            CToken(cToken),\n            redeemTokens,\n            0\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external pure override {\n        // Shh - currently unused\n        cToken;\n        redeemer;\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"C503\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        Error err;\n        uint256 shortfall;\n        require(!borrowGuardianPaused[cToken], \"C504\");\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            // only cTokens may call borrowAllowed if borrower not in market\n            require(msg.sender == cToken, \"C505\");\n\n            // attempt to add borrower to the market\n            err = addToMarketInternal(CToken(msg.sender), borrower);\n            if (err != Error.NO_ERROR) {\n                return uint256(err);\n            }\n\n            // it should be impossible to break the important invariant\n            assert(markets[cToken].accountMembership[borrower]);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint256(Error.PRICE_ERROR);\n        }\n\n        uint256 borrowCap = borrowCaps[cToken];\n        // Borrow cap of 0 corresponds to unlimited borrowing\n        if (borrowCap != 0) {\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\n            (MathError mathErr, uint256 nextTotalBorrows) = addUInt(\n                totalBorrows,\n                borrowAmount\n            );\n            require(mathErr == MathError.NO_ERROR, \"C506\");\n            require(nextTotalBorrows < borrowCap, \"C507\");\n        }\n\n        (err, , shortfall) = getHypotheticalAccountLiquidityInternal(\n            borrower,\n            CToken(cToken),\n            0,\n            borrowAmount\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        borrower;\n        borrowAmount;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external override returns (uint256) {\n        // Shh - currently unused\n        payer;\n        borrower;\n        repayAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 borrowerIndex\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        payer;\n        borrower;\n        actualRepayAmount;\n        borrowerIndex;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        // Shh - currently unused\n        liquidator;\n\n        if (\n            !markets[cTokenBorrowed].isListed ||\n            !markets[cTokenCollateral].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* The borrower must have shortfall in order to be liquidatable */\n        (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\n            borrower\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall == 0) {\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\n        }\n\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\n            borrower\n        );\n        (MathError mathErr, uint256 maxClose) = mulScalarTruncate(\n            Exp({mantissa: closeFactorMantissa}),\n            borrowBalance\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return uint256(Error.MATH_ERROR);\n        }\n        if (repayAmount > maxClose) {\n            return uint256(Error.TOO_MUCH_REPAY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenBorrowed;\n        cTokenCollateral;\n        liquidator;\n        borrower;\n        actualRepayAmount;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!seizeGuardianPaused, \"C508\");\n\n        // Shh - currently unused\n        seizeTokens;\n\n        if (\n            !markets[cTokenCollateral].isListed ||\n            !markets[cTokenBorrowed].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (\n            CToken(cTokenCollateral).comptroller() !=\n            CToken(cTokenBorrowed).comptroller()\n        ) {\n            return uint256(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cTokenCollateral);\n        distributeSupplierComp(cTokenCollateral, borrower, false);\n        distributeSupplierComp(cTokenCollateral, liquidator, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenCollateral;\n        cTokenBorrowed;\n        liquidator;\n        borrower;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!transferGuardianPaused, \"C509\");\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, src, false);\n        distributeSupplierComp(cToken, dst, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        src;\n        dst;\n        transferTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 sumCollateral;\n        uint256 sumBorrowPlusEffects;\n        uint256 cTokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToDenom;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(address(0)),\n            0,\n            0\n        );\n\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account)\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        return\n            getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(cTokenModify),\n            redeemTokens,\n            borrowAmount\n        );\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint256 oErr;\n        MathError mErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint256 i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (\n                oErr,\n                vars.cTokenBalance,\n                vars.borrowBalance,\n                vars.exchangeRateMantissa\n            ) = asset.getAccountSnapshot(account);\n            if (oErr != 0) {\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({\n                mantissa: markets[address(asset)].collateralFactorMantissa\n            });\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            (mErr, vars.tokensToDenom) = mulExp3(\n                vars.collateralFactor,\n                vars.exchangeRate,\n                vars.oraclePrice\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumCollateral += tokensToDenom * cTokenBalance\n            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(\n                vars.tokensToDenom,\n                vars.cTokenBalance,\n                vars.sumCollateral\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                vars.oraclePrice,\n                vars.borrowBalance,\n                vars.sumBorrowPlusEffects\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.tokensToDenom,\n                    redeemTokens,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.oraclePrice,\n                    borrowAmount,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (\n                Error.NO_ERROR,\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\n                0\n            );\n        } else {\n            return (\n                Error.NO_ERROR,\n                0,\n                vars.sumBorrowPlusEffects - vars.sumCollateral\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 actualRepayAmount\n    ) external view override returns (uint256, uint256) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenBorrowed)\n        );\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenCollateral)\n        );\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint256(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\n        .exchangeRateStored(); // Note: reverts on error\n        uint256 seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n        MathError mathErr;\n\n        (mathErr, numerator) = mulExp(\n            liquidationIncentiveMantissa,\n            priceBorrowedMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, denominator) = mulExp(\n            priceCollateralMantissa,\n            exchangeRateMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, ratio) = divExp(numerator, denominator);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, seizeTokens) = mulScalarTruncate(ratio, actualRepayAmount);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        return (uint256(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\n                );\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the closeFactor used when liquidating borrows\n     * @dev Admin function to set closeFactor\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK\n                );\n        }\n\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param cToken The market to set the factor on\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCollateralFactor(\n        CToken cToken,\n        uint256 newCollateralFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\n                );\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return\n                fail(\n                    Error.MARKET_NOT_LISTED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\n                );\n        }\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.9\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_COLLATERAL_FACTOR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\n                );\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (\n            newCollateralFactorMantissa != 0 &&\n            oracle.getUnderlyingPrice(cToken) == 0\n        ) {\n            return\n                fail(\n                    Error.PRICE_ERROR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\n                );\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            cToken,\n            oldCollateralFactorMantissa,\n            newCollateralFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets maxAssets which controls how many markets can be entered\n     * @dev Admin function to set maxAssets\n     * @param newMaxAssets New max assets\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setMaxAssets(uint256 newMaxAssets) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_MAX_ASSETS_OWNER_CHECK\n                );\n        }\n\n        uint256 oldMaxAssets = maxAssets;\n        maxAssets = newMaxAssets;\n        emit NewMaxAssets(oldMaxAssets, newMaxAssets);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets liquidationIncentive\n     * @dev Admin function to set liquidationIncentive\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n                );\n        }\n\n        // Check de-scaled min <= newLiquidationIncentive <= max\n        Exp memory newLiquidationIncentive = Exp({\n            mantissa: newLiquidationIncentiveMantissa\n        });\n        Exp memory minLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMinMantissa\n        });\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        Exp memory maxLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMaxMantissa\n        });\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        // Save current value for use in log\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(\n            oldLiquidationIncentiveMantissa,\n            newLiquidationIncentiveMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param cToken The address of the market (token) to list\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _supportMarket(CToken cToken) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\n                );\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return\n                fail(\n                    Error.MARKET_ALREADY_LISTED,\n                    FailureInfo.SUPPORT_MARKET_EXISTS\n                );\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        Market storage market = markets[address(cToken)];\n        market.isListed = true;\n        market.isComped = false;\n        market.collateralFactorMantissa = 0;\n\n        _addMarketInternal(address(cToken));\n\n        emit MarketListed(cToken);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _addMarketInternal(address cToken) internal {\n        for (uint256 i = 0; i < allMarkets.length; i++) {\n            require(allMarkets[i] != CToken(cToken), \"C510\");\n        }\n        allMarkets.push(CToken(cToken));\n    }\n\n    /**\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n     */\n    function _setMarketBorrowCaps(\n        CToken[] calldata cTokens,\n        uint256[] calldata newBorrowCaps\n    ) external {\n        require(msg.sender == admin || msg.sender == borrowCapGuardian, \"C511\");\n\n        uint256 numMarkets = cTokens.length;\n        uint256 numBorrowCaps = newBorrowCaps.length;\n\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \"C512\");\n\n        for (uint256 i = 0; i < numMarkets; i++) {\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\n        }\n    }\n\n    /**\n     * @notice Admin function to change the Borrow Cap Guardian\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\n     */\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\n        require(msg.sender == admin, \"C513\");\n\n        // Save current value for inclusion in log\n        address oldBorrowCapGuardian = borrowCapGuardian;\n\n        // Store borrowCapGuardian with value newBorrowCapGuardian\n        borrowCapGuardian = newBorrowCapGuardian;\n\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n    }\n\n    /**\n     * @notice Admin function to change the Pause Guardian\n     * @param newPauseGuardian The address of the new Pause Guardian\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _setPauseGuardian(address newPauseGuardian)\n        public\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\n                );\n        }\n\n        // Save current value for inclusion in log\n        address oldPauseGuardian = pauseGuardian;\n\n        // Store pauseGuardian with value newPauseGuardian\n        pauseGuardian = newPauseGuardian;\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n        require(markets[address(cToken)].isListed, \"C514\");\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"C515\");\n        require(msg.sender == admin || state == true, \"C516\");\n\n        mintGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Mint\", state);\n        return state;\n    }\n\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n        require(markets[address(cToken)].isListed, \"C514\");\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"C515\");\n        require(msg.sender == admin || state == true, \"C516\");\n\n        borrowGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Borrow\", state);\n        return state;\n    }\n\n    function _setTransferPaused(bool state) public returns (bool) {\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"C515\");\n        require(msg.sender == admin || state == true, \"C516\");\n\n        transferGuardianPaused = state;\n        emit ActionPaused(\"Transfer\", state);\n        return state;\n    }\n\n    function _setSeizePaused(bool state) public returns (bool) {\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"C515\");\n        require(msg.sender == admin || state == true, \"C516\");\n\n        seizeGuardianPaused = state;\n        emit ActionPaused(\"Seize\", state);\n        return state;\n    }\n\n    function _become(Unitroller unitroller) public {\n        require(msg.sender == unitroller.admin(), \"C517\");\n        require(unitroller._acceptImplementation() == 0, \"C518\");\n    }\n\n    /**\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\n     */\n    function adminOrInitializing() internal view returns (bool) {\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\n    }\n\n    /*** Comp Distribution ***/\n\n    /**\n     * @notice Recalculate and update COMP speeds for all COMP markets\n     */\n    function refreshCompSpeeds() public {\n        require(msg.sender == tx.origin, \"C519\");\n        refreshCompSpeedsInternal();\n    }\n\n    function refreshCompSpeedsInternal() internal {\n        CToken[] memory allMarkets_ = allMarkets;\n\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets_[i];\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n            updateCompSupplyIndex(address(cToken));\n            updateCompBorrowIndex(address(cToken), borrowIndex);\n        }\n\n        Exp memory totalUtility = Exp({mantissa: 0});\n        Exp[] memory utilities = new Exp[](allMarkets_.length);\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets_[i];\n            if (markets[address(cToken)].isComped) {\n                Exp memory assetPrice = Exp({\n                    mantissa: oracle.getUnderlyingPrice(cToken)\n                });\n                Exp memory utility = mul_(assetPrice, cToken.totalBorrows());\n                utilities[i] = utility;\n                totalUtility = add_(totalUtility, utility);\n            }\n        }\n\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets[i];\n            uint256 newSpeed = totalUtility.mantissa > 0\n                ? mul_(compRate, div_(utilities[i], totalUtility))\n                : 0;\n            compSpeeds[address(cToken)] = newSpeed;\n            emit CompSpeedUpdated(cToken, newSpeed);\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the supply index\n     * @param cToken The market whose supply index to update\n     */\n    function updateCompSupplyIndex(address cToken) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        uint256 supplySpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(supplyState.block));\n        if (deltaBlocks > 0 && supplySpeed > 0) {\n            uint256 supplyTokens = CToken(cToken).totalSupply();\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\n            Double memory ratio = supplyTokens > 0\n                ? fraction(compAccrued, supplyTokens)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: supplyState.index}),\n                ratio\n            );\n            compSupplyState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"C520\"),\n                block: safe32(blockNumber, \"C521\")\n            });\n        } else if (deltaBlocks > 0) {\n            supplyState.block = safe32(blockNumber, \"C521\");\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the borrow index\n     * @param cToken The market whose borrow index to update\n     */\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex)\n        internal\n    {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        uint256 borrowSpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(borrowState.block));\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\n            uint256 borrowAmount = div_(\n                CToken(cToken).totalBorrows(),\n                marketBorrowIndex\n            );\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\n            Double memory ratio = borrowAmount > 0\n                ? fraction(compAccrued, borrowAmount)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: borrowState.index}),\n                ratio\n            );\n            compBorrowState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"C520\"),\n                block: safe32(blockNumber, \"C521\")\n            });\n        } else if (deltaBlocks > 0) {\n            borrowState.block = safe32(blockNumber, \"C521\");\n        }\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\n     * @param cToken The market in which the supplier is interacting\n     * @param supplier The address of the supplier to distribute COMP to\n     */\n    function distributeSupplierComp(\n        address cToken,\n        address supplier,\n        bool distributeAll\n    ) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\n        Double memory supplierIndex = Double({\n            mantissa: compSupplierIndex[cToken][supplier]\n        });\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\n\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n            supplierIndex.mantissa = compInitialIndex;\n        }\n\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\n        compAccrued[supplier] = transferComp(\n            supplier,\n            supplierAccrued,\n            distributeAll ? 0 : compClaimThreshold\n        );\n        emit DistributedSupplierComp(\n            CToken(cToken),\n            supplier,\n            supplierDelta,\n            supplyIndex.mantissa\n        );\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n     * @param cToken The market in which the borrower is interacting\n     * @param borrower The address of the borrower to distribute COMP to\n     */\n    function distributeBorrowerComp(\n        address cToken,\n        address borrower,\n        Exp memory marketBorrowIndex,\n        bool distributeAll\n    ) internal {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\n        Double memory borrowerIndex = Double({\n            mantissa: compBorrowerIndex[cToken][borrower]\n        });\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\n\n        if (borrowerIndex.mantissa > 0) {\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\n            uint256 borrowerAmount = div_(\n                CToken(cToken).borrowBalanceStored(borrower),\n                marketBorrowIndex\n            );\n            uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\n            uint256 borrowerAccrued = add_(\n                compAccrued[borrower],\n                borrowerDelta\n            );\n            compAccrued[borrower] = transferComp(\n                borrower,\n                borrowerAccrued,\n                distributeAll ? 0 : compClaimThreshold\n            );\n            emit DistributedBorrowerComp(\n                CToken(cToken),\n                borrower,\n                borrowerDelta,\n                borrowIndex.mantissa\n            );\n        }\n    }\n\n    /**\n     * @notice Transfer COMP to the user, if they are above the threshold\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\n     * @param user The address of the user to transfer COMP to\n     * @param userAccrued The amount of COMP to (possibly) transfer\n     * @return The amount of COMP which was NOT transferred to the user\n     */\n    function transferComp(\n        address user,\n        uint256 userAccrued,\n        uint256 threshold\n    ) internal returns (uint256) {\n        if (userAccrued >= threshold && userAccrued > 0) {\n            TROP comp = TROP(getCompAddress());\n            uint256 compRemaining = comp.balanceOf(address(this));\n            if (userAccrued <= compRemaining) {\n                comp.transfer(user, userAccrued);\n                return 0;\n            }\n        }\n        return userAccrued;\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in all markets\n     * @param holder The address to claim COMP for\n     */\n    function claimComp(address holder) public {\n        return claimComp(holder, allMarkets);\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in the specified markets\n     * @param holder The address to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     */\n    function claimComp(address holder, CToken[] memory cTokens) public {\n        address[] memory holders = new address[](1);\n        holders[0] = holder;\n        claimComp(holders, cTokens, true, true);\n    }\n\n    /**\n     * @notice Claim all comp accrued by the holders\n     * @param holders The addresses to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     * @param borrowers Whether or not to claim COMP earned by borrowing\n     * @param suppliers Whether or not to claim COMP earned by supplying\n     */\n    function claimComp(\n        address[] memory holders,\n        CToken[] memory cTokens,\n        bool borrowers,\n        bool suppliers\n    ) public {\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            CToken cToken = cTokens[i];\n            require(markets[address(cToken)].isListed, \"C522\");\n            if (borrowers == true) {\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n                updateCompBorrowIndex(address(cToken), borrowIndex);\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeBorrowerComp(\n                        address(cToken),\n                        holders[j],\n                        borrowIndex,\n                        true\n                    );\n                }\n            }\n            if (suppliers == true) {\n                updateCompSupplyIndex(address(cToken));\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeSupplierComp(address(cToken), holders[j], true);\n                }\n            }\n        }\n    }\n\n    /*** Comp Distribution Admin ***/\n\n    /**\n     * @notice Set the amount of COMP distributed per block\n     * @param compRate_ The amount of COMP wei per block to distribute\n     */\n    function _setCompRate(uint256 compRate_) public {\n        require(adminOrInitializing(), \"C523\");\n\n        uint256 oldRate = compRate;\n        compRate = compRate_;\n        emit NewCompRate(oldRate, compRate_);\n\n        refreshCompSpeedsInternal();\n    }\n\n    /**\n     * @notice Add markets to compMarkets, allowing them to earn COMP in the flywheel\n     * @param cTokens The addresses of the markets to add\n     */\n    function _addCompMarkets(address[] memory cTokens) public {\n        require(adminOrInitializing(), \"C524\");\n\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            _addCompMarketInternal(cTokens[i]);\n        }\n\n        refreshCompSpeedsInternal();\n    }\n\n    function _addCompMarketInternal(address cToken) internal {\n        Market storage market = markets[cToken];\n        require(market.isListed == true, \"C525\");\n        require(market.isComped == false, \"C526\");\n\n        market.isComped = true;\n        emit MarketComped(CToken(cToken), true);\n\n        if (\n            compSupplyState[cToken].index == 0 &&\n            compSupplyState[cToken].block == 0\n        ) {\n            compSupplyState[cToken] = CompMarketState({\n                index: compInitialIndex,\n                block: safe32(getBlockNumber(), \"C521\")\n            });\n        }\n\n        if (\n            compBorrowState[cToken].index == 0 &&\n            compBorrowState[cToken].block == 0\n        ) {\n            compBorrowState[cToken] = CompMarketState({\n                index: compInitialIndex,\n                block: safe32(getBlockNumber(), \"C521\")\n            });\n        }\n    }\n\n    /**\n     * @notice Remove a market from compMarkets, preventing it from earning COMP in the flywheel\n     * @param cToken The address of the market to drop\n     */\n    function _dropCompMarket(address cToken) public {\n        require(msg.sender == admin, \"C527\");\n\n        Market storage market = markets[cToken];\n        require(market.isComped == true, \"C528\");\n\n        market.isComped = false;\n        emit MarketComped(CToken(cToken), false);\n\n        refreshCompSpeedsInternal();\n    }\n\n    /**\n     * @notice Return all of the markets\n     * @dev The automatic getter may be used to access an individual market.\n     * @return The list of market addresses\n     */\n    function getAllMarkets() public view returns (CToken[] memory) {\n        return allMarkets;\n    }\n\n    function getBlockNumber() public view virtual returns (uint256) {\n        return block.number;\n    }\n\n    /**\n     * @notice Return the address of the COMP token\n     * @return The address of COMP\n     */\n    function getCompAddress() public view virtual returns (address) {\n        return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n    }\n}\n"
    },
    "contracts/ComptrollerG4.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\nimport \"./Governance/TROP.sol\";\n\n/**\n * @title tropykus Comptroller Contract\n * @author tropykus\n */\ncontract ComptrollerG4 is\n    ComptrollerV3Storage,\n    ComptrollerInterface,\n    ComptrollerErrorReporter,\n    Exponential\n{\n    /// @notice Emitted when an admin supports a market\n    event MarketListed(CToken cToken);\n\n    /// @notice Emitted when an account enters a market\n    event MarketEntered(CToken cToken, address account);\n\n    /// @notice Emitted when an account exits a market\n    event MarketExited(CToken cToken, address account);\n\n    /// @notice Emitted when close factor is changed by admin\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /// @notice Emitted when a collateral factor is changed by admin\n    event NewCollateralFactor(\n        CToken cToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /// @notice Emitted when liquidation incentive is changed by admin\n    event NewLiquidationIncentive(\n        uint256 oldLiquidationIncentiveMantissa,\n        uint256 newLiquidationIncentiveMantissa\n    );\n\n    /// @notice Emitted when maxAssets is changed by admin\n    event NewMaxAssets(uint256 oldMaxAssets, uint256 newMaxAssets);\n\n    /// @notice Emitted when price oracle is changed\n    event NewPriceOracle(\n        PriceOracle oldPriceOracle,\n        PriceOracle newPriceOracle\n    );\n\n    /// @notice Emitted when pause guardian is changed\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n    /// @notice Emitted when an action is paused globally\n    event ActionPaused(string action, bool pauseState);\n\n    /// @notice Emitted when an action is paused on a market\n    event ActionPaused(CToken cToken, string action, bool pauseState);\n\n    /// @notice Emitted when market comped status is changed\n    event MarketComped(CToken cToken, bool isComped);\n\n    /// @notice Emitted when COMP rate is changed\n    event NewCompRate(uint256 oldCompRate, uint256 newCompRate);\n\n    /// @notice Emitted when a new COMP speed is calculated for a market\n    event CompSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\n\n    /// @notice Emitted when COMP is distributed to a supplier\n    event DistributedSupplierComp(\n        CToken indexed cToken,\n        address indexed supplier,\n        uint256 compDelta,\n        uint256 compSupplyIndex\n    );\n\n    /// @notice Emitted when COMP is distributed to a borrower\n    event DistributedBorrowerComp(\n        CToken indexed cToken,\n        address indexed borrower,\n        uint256 compDelta,\n        uint256 compBorrowIndex\n    );\n\n    /// @notice The threshold above which the flywheel transfers COMP, in wei\n    uint256 public constant compClaimThreshold = 0.001e18;\n\n    /// @notice The initial COMP index for a market\n    uint224 public constant compInitialIndex = 1e36;\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n    // liquidationIncentiveMantissa must be no less than this value\n    uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\n\n    // liquidationIncentiveMantissa must be no greater than this value\n    uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(address account)\n        external\n        view\n        returns (CToken[] memory)\n    {\n        CToken[] memory assetsIn = accountAssets[account];\n\n        return assetsIn;\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(address account, CToken cToken)\n        external\n        view\n        returns (bool)\n    {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(address[] memory cTokens)\n        public\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = cTokens.length;\n\n        uint256[] memory results = new uint256[](len);\n        for (uint256 i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n     * @param cToken The market to enter\n     * @param borrower The address of the account to modify\n     * @return Success indicator for whether the market was entered\n     */\n    function addToMarketInternal(CToken cToken, address borrower)\n        internal\n        returns (Error)\n    {\n        Market storage marketToJoin = markets[address(cToken)];\n\n        if (!marketToJoin.isListed) {\n            // market is not listed, cannot join\n            return Error.MARKET_NOT_LISTED;\n        }\n\n        if (marketToJoin.accountMembership[borrower] == true) {\n            // already joined\n            return Error.NO_ERROR;\n        }\n\n        if (accountAssets[borrower].length >= maxAssets) {\n            // no space, cannot join\n            return Error.TOO_MANY_ASSETS;\n        }\n\n        // survived the gauntlet, add to list\n        // NOTE: we store these somewhat redundantly as a significant optimization\n        //  this avoids having to iterate through the list for the most common use cases\n        //  that is, only when we need to perform liquidity checks\n        //  and not whenever we want to check if an account is in a particular market\n        marketToJoin.accountMembership[borrower] = true;\n        accountAssets[borrower].push(cToken);\n\n        emit MarketEntered(cToken, borrower);\n\n        return Error.NO_ERROR;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing necessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(address cTokenAddress)\n        external\n        override\n        returns (uint256)\n    {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\n        .getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return\n                fail(\n                    Error.NONZERO_BORROW_BALANCE,\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\n                );\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint256 allowed = redeemAllowedInternal(\n            cTokenAddress,\n            msg.sender,\n            tokensHeld\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.REJECTION,\n                    FailureInfo.EXIT_MARKET_REJECTION,\n                    allowed\n                );\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        accountAssets[msg.sender] = new CToken[](0);\n        CToken[] storage newMarketList = accountAssets[msg.sender];\n        uint256 len = userAssetList.length;\n        uint256 assetIndex = len;\n        for (uint256 i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                continue;\n            }\n            newMarketList.push(userAssetList[i]);\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    /**\n     * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!mintGuardianPaused[cToken], \"mint is paused\");\n\n        // Shh - currently unused\n        minter;\n        mintAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, minter, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param actualMintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 actualMintAmount,\n        uint256 mintTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        minter;\n        actualMintAmount;\n        mintTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external override returns (uint256) {\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, redeemer, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function redeemAllowedInternal(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) internal view returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            redeemer,\n            CToken(cToken),\n            redeemTokens,\n            0\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external pure override {\n        // Shh - currently unused\n        cToken;\n        redeemer;\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"redeemTokens zero\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        Error err;\n        uint256 shortfall;\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            // only cTokens may call borrowAllowed if borrower not in market\n            require(msg.sender == cToken, \"sender must be cToken\");\n\n            // attempt to add borrower to the market\n            err = addToMarketInternal(CToken(msg.sender), borrower);\n            if (err != Error.NO_ERROR) {\n                return uint256(err);\n            }\n\n            // it should be impossible to break the important invariant\n            assert(markets[cToken].accountMembership[borrower]);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint256(Error.PRICE_ERROR);\n        }\n\n        (err, , shortfall) = getHypotheticalAccountLiquidityInternal(\n            borrower,\n            CToken(cToken),\n            0,\n            borrowAmount\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        borrower;\n        borrowAmount;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external override returns (uint256) {\n        // Shh - currently unused\n        payer;\n        borrower;\n        repayAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 borrowerIndex\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        payer;\n        borrower;\n        actualRepayAmount;\n        borrowerIndex;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        // Shh - currently unused\n        liquidator;\n\n        if (\n            !markets[cTokenBorrowed].isListed ||\n            !markets[cTokenCollateral].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* The borrower must have shortfall in order to be liquidatable */\n        (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\n            borrower\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall == 0) {\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\n        }\n\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\n            borrower\n        );\n        (MathError mathErr, uint256 maxClose) = mulScalarTruncate(\n            Exp({mantissa: closeFactorMantissa}),\n            borrowBalance\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return uint256(Error.MATH_ERROR);\n        }\n        if (repayAmount > maxClose) {\n            return uint256(Error.TOO_MUCH_REPAY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenBorrowed;\n        cTokenCollateral;\n        liquidator;\n        borrower;\n        actualRepayAmount;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!seizeGuardianPaused, \"seize is paused\");\n\n        // Shh - currently unused\n        seizeTokens;\n\n        if (\n            !markets[cTokenCollateral].isListed ||\n            !markets[cTokenBorrowed].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (\n            CToken(cTokenCollateral).comptroller() !=\n            CToken(cTokenBorrowed).comptroller()\n        ) {\n            return uint256(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cTokenCollateral);\n        distributeSupplierComp(cTokenCollateral, borrower, false);\n        distributeSupplierComp(cTokenCollateral, liquidator, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenCollateral;\n        cTokenBorrowed;\n        liquidator;\n        borrower;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, src, false);\n        distributeSupplierComp(cToken, dst, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        src;\n        dst;\n        transferTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 sumCollateral;\n        uint256 sumBorrowPlusEffects;\n        uint256 cTokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToDenom;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(address(0)),\n            0,\n            0\n        );\n\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account)\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        return\n            getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(cTokenModify),\n            redeemTokens,\n            borrowAmount\n        );\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint256 oErr;\n        MathError mErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint256 i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (\n                oErr,\n                vars.cTokenBalance,\n                vars.borrowBalance,\n                vars.exchangeRateMantissa\n            ) = asset.getAccountSnapshot(account);\n            if (oErr != 0) {\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({\n                mantissa: markets[address(asset)].collateralFactorMantissa\n            });\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            (mErr, vars.tokensToDenom) = mulExp3(\n                vars.collateralFactor,\n                vars.exchangeRate,\n                vars.oraclePrice\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumCollateral += tokensToDenom * cTokenBalance\n            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(\n                vars.tokensToDenom,\n                vars.cTokenBalance,\n                vars.sumCollateral\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                vars.oraclePrice,\n                vars.borrowBalance,\n                vars.sumBorrowPlusEffects\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.tokensToDenom,\n                    redeemTokens,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.oraclePrice,\n                    borrowAmount,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (\n                Error.NO_ERROR,\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\n                0\n            );\n        } else {\n            return (\n                Error.NO_ERROR,\n                0,\n                vars.sumBorrowPlusEffects - vars.sumCollateral\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 actualRepayAmount\n    ) external view override returns (uint256, uint256) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenBorrowed)\n        );\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenCollateral)\n        );\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint256(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\n        .exchangeRateStored(); // Note: reverts on error\n        uint256 seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n        MathError mathErr;\n\n        (mathErr, numerator) = mulExp(\n            liquidationIncentiveMantissa,\n            priceBorrowedMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, denominator) = mulExp(\n            priceCollateralMantissa,\n            exchangeRateMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, ratio) = divExp(numerator, denominator);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, seizeTokens) = mulScalarTruncate(ratio, actualRepayAmount);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        return (uint256(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\n                );\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the closeFactor used when liquidating borrows\n     * @dev Admin function to set closeFactor\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK\n                );\n        }\n\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param cToken The market to set the factor on\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCollateralFactor(\n        CToken cToken,\n        uint256 newCollateralFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\n                );\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return\n                fail(\n                    Error.MARKET_NOT_LISTED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\n                );\n        }\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.9\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_COLLATERAL_FACTOR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\n                );\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (\n            newCollateralFactorMantissa != 0 &&\n            oracle.getUnderlyingPrice(cToken) == 0\n        ) {\n            return\n                fail(\n                    Error.PRICE_ERROR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\n                );\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            cToken,\n            oldCollateralFactorMantissa,\n            newCollateralFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets maxAssets which controls how many markets can be entered\n     * @dev Admin function to set maxAssets\n     * @param newMaxAssets New max assets\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setMaxAssets(uint256 newMaxAssets) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_MAX_ASSETS_OWNER_CHECK\n                );\n        }\n\n        uint256 oldMaxAssets = maxAssets;\n        maxAssets = newMaxAssets;\n        emit NewMaxAssets(oldMaxAssets, newMaxAssets);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets liquidationIncentive\n     * @dev Admin function to set liquidationIncentive\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n                );\n        }\n\n        // Check de-scaled min <= newLiquidationIncentive <= max\n        Exp memory newLiquidationIncentive = Exp({\n            mantissa: newLiquidationIncentiveMantissa\n        });\n        Exp memory minLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMinMantissa\n        });\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        Exp memory maxLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMaxMantissa\n        });\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        // Save current value for use in log\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(\n            oldLiquidationIncentiveMantissa,\n            newLiquidationIncentiveMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param cToken The address of the market (token) to list\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _supportMarket(CToken cToken) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\n                );\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return\n                fail(\n                    Error.MARKET_ALREADY_LISTED,\n                    FailureInfo.SUPPORT_MARKET_EXISTS\n                );\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        Market storage market = markets[address(cToken)];\n        market.isListed = true;\n        market.isComped = false;\n        market.collateralFactorMantissa = 0;\n\n        _addMarketInternal(address(cToken));\n\n        emit MarketListed(cToken);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _addMarketInternal(address cToken) internal {\n        for (uint256 i = 0; i < allMarkets.length; i++) {\n            require(allMarkets[i] != CToken(cToken), \"market already added\");\n        }\n        allMarkets.push(CToken(cToken));\n    }\n\n    /**\n     * @notice Admin function to change the Pause Guardian\n     * @param newPauseGuardian The address of the new Pause Guardian\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _setPauseGuardian(address newPauseGuardian)\n        public\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\n                );\n        }\n\n        // Save current value for inclusion in log\n        address oldPauseGuardian = pauseGuardian;\n\n        // Store pauseGuardian with value newPauseGuardian\n        pauseGuardian = newPauseGuardian;\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        mintGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Mint\", state);\n        return state;\n    }\n\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        borrowGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Borrow\", state);\n        return state;\n    }\n\n    function _setTransferPaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        transferGuardianPaused = state;\n        emit ActionPaused(\"Transfer\", state);\n        return state;\n    }\n\n    function _setSeizePaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        seizeGuardianPaused = state;\n        emit ActionPaused(\"Seize\", state);\n        return state;\n    }\n\n    function _become(Unitroller unitroller) public {\n        require(\n            msg.sender == unitroller.admin(),\n            \"only unitroller admin can change brains\"\n        );\n        require(\n            unitroller._acceptImplementation() == 0,\n            \"change not authorized\"\n        );\n    }\n\n    /**\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\n     */\n    function adminOrInitializing() internal view returns (bool) {\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\n    }\n\n    /*** Comp Distribution ***/\n\n    /**\n     * @notice Recalculate and update COMP speeds for all COMP markets\n     */\n    function refreshCompSpeeds() public {\n        require(\n            msg.sender == tx.origin,\n            \"only externally owned accounts may refresh speeds\"\n        );\n        refreshCompSpeedsInternal();\n    }\n\n    function refreshCompSpeedsInternal() internal {\n        CToken[] memory allMarkets_ = allMarkets;\n\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets_[i];\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n            updateCompSupplyIndex(address(cToken));\n            updateCompBorrowIndex(address(cToken), borrowIndex);\n        }\n\n        Exp memory totalUtility = Exp({mantissa: 0});\n        Exp[] memory utilities = new Exp[](allMarkets_.length);\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets_[i];\n            if (markets[address(cToken)].isComped) {\n                Exp memory assetPrice = Exp({\n                    mantissa: oracle.getUnderlyingPrice(cToken)\n                });\n                Exp memory utility = mul_(assetPrice, cToken.totalBorrows());\n                utilities[i] = utility;\n                totalUtility = add_(totalUtility, utility);\n            }\n        }\n\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets[i];\n            uint256 newSpeed = totalUtility.mantissa > 0\n                ? mul_(compRate, div_(utilities[i], totalUtility))\n                : 0;\n            compSpeeds[address(cToken)] = newSpeed;\n            emit CompSpeedUpdated(cToken, newSpeed);\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the supply index\n     * @param cToken The market whose supply index to update\n     */\n    function updateCompSupplyIndex(address cToken) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        uint256 supplySpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(supplyState.block));\n        if (deltaBlocks > 0 && supplySpeed > 0) {\n            uint256 supplyTokens = CToken(cToken).totalSupply();\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\n            Double memory ratio = supplyTokens > 0\n                ? fraction(compAccrued, supplyTokens)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: supplyState.index}),\n                ratio\n            );\n            compSupplyState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"new index exceeds 224 bits\"),\n                block: safe32(blockNumber, \"block number exceeds 32 bits\")\n            });\n        } else if (deltaBlocks > 0) {\n            supplyState.block = safe32(\n                blockNumber,\n                \"block number exceeds 32 bits\"\n            );\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the borrow index\n     * @param cToken The market whose borrow index to update\n     */\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex)\n        internal\n    {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        uint256 borrowSpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(borrowState.block));\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\n            uint256 borrowAmount = div_(\n                CToken(cToken).totalBorrows(),\n                marketBorrowIndex\n            );\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\n            Double memory ratio = borrowAmount > 0\n                ? fraction(compAccrued, borrowAmount)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: borrowState.index}),\n                ratio\n            );\n            compBorrowState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"new index exceeds 224 bits\"),\n                block: safe32(blockNumber, \"block number exceeds 32 bits\")\n            });\n        } else if (deltaBlocks > 0) {\n            borrowState.block = safe32(\n                blockNumber,\n                \"block number exceeds 32 bits\"\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\n     * @param cToken The market in which the supplier is interacting\n     * @param supplier The address of the supplier to distribute COMP to\n     */\n    function distributeSupplierComp(\n        address cToken,\n        address supplier,\n        bool distributeAll\n    ) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\n        Double memory supplierIndex = Double({\n            mantissa: compSupplierIndex[cToken][supplier]\n        });\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\n\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n            supplierIndex.mantissa = compInitialIndex;\n        }\n\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\n        compAccrued[supplier] = transferComp(\n            supplier,\n            supplierAccrued,\n            distributeAll ? 0 : compClaimThreshold\n        );\n        emit DistributedSupplierComp(\n            CToken(cToken),\n            supplier,\n            supplierDelta,\n            supplyIndex.mantissa\n        );\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n     * @param cToken The market in which the borrower is interacting\n     * @param borrower The address of the borrower to distribute COMP to\n     */\n    function distributeBorrowerComp(\n        address cToken,\n        address borrower,\n        Exp memory marketBorrowIndex,\n        bool distributeAll\n    ) internal {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\n        Double memory borrowerIndex = Double({\n            mantissa: compBorrowerIndex[cToken][borrower]\n        });\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\n\n        if (borrowerIndex.mantissa > 0) {\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\n            uint256 borrowerAmount = div_(\n                CToken(cToken).borrowBalanceStored(borrower),\n                marketBorrowIndex\n            );\n            uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\n            uint256 borrowerAccrued = add_(\n                compAccrued[borrower],\n                borrowerDelta\n            );\n            compAccrued[borrower] = transferComp(\n                borrower,\n                borrowerAccrued,\n                distributeAll ? 0 : compClaimThreshold\n            );\n            emit DistributedBorrowerComp(\n                CToken(cToken),\n                borrower,\n                borrowerDelta,\n                borrowIndex.mantissa\n            );\n        }\n    }\n\n    /**\n     * @notice Transfer TROP to the user, if they are above the threshold\n     * @dev Note: If there is not enough TROP, we do not perform the transfer all.\n     * @param user The address of the user to transfer TROP to\n     * @param userAccrued The amount of TROP to (possibly) transfer\n     * @return The amount of TROP which was NOT transferred to the user\n     */\n    function transferComp(\n        address user,\n        uint256 userAccrued,\n        uint256 threshold\n    ) internal returns (uint256) {\n        if (userAccrued >= threshold && userAccrued > 0) {\n            TROP trop = TROP(getCompAddress());\n            uint256 tropRemaining = trop.balanceOf(address(this));\n            if (userAccrued <= tropRemaining) {\n                trop.transfer(user, userAccrued);\n                return 0;\n            }\n        }\n        return userAccrued;\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in all markets\n     * @param holder The address to claim COMP for\n     */\n    function claimComp(address holder) public {\n        return claimComp(holder, allMarkets);\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in the specified markets\n     * @param holder The address to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     */\n    function claimComp(address holder, CToken[] memory cTokens) public {\n        address[] memory holders = new address[](1);\n        holders[0] = holder;\n        claimComp(holders, cTokens, true, true);\n    }\n\n    /**\n     * @notice Claim all comp accrued by the holders\n     * @param holders The addresses to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     * @param borrowers Whether or not to claim COMP earned by borrowing\n     * @param suppliers Whether or not to claim COMP earned by supplying\n     */\n    function claimComp(\n        address[] memory holders,\n        CToken[] memory cTokens,\n        bool borrowers,\n        bool suppliers\n    ) public {\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            CToken cToken = cTokens[i];\n            require(markets[address(cToken)].isListed, \"market must be listed\");\n            if (borrowers == true) {\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n                updateCompBorrowIndex(address(cToken), borrowIndex);\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeBorrowerComp(\n                        address(cToken),\n                        holders[j],\n                        borrowIndex,\n                        true\n                    );\n                }\n            }\n            if (suppliers == true) {\n                updateCompSupplyIndex(address(cToken));\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeSupplierComp(address(cToken), holders[j], true);\n                }\n            }\n        }\n    }\n\n    /*** Comp Distribution Admin ***/\n\n    /**\n     * @notice Set the amount of COMP distributed per block\n     * @param compRate_ The amount of COMP wei per block to distribute\n     */\n    function _setCompRate(uint256 compRate_) public {\n        require(adminOrInitializing(), \"only admin can change comp rate\");\n\n        uint256 oldRate = compRate;\n        compRate = compRate_;\n        emit NewCompRate(oldRate, compRate_);\n\n        refreshCompSpeedsInternal();\n    }\n\n    /**\n     * @notice Add markets to compMarkets, allowing them to earn COMP in the flywheel\n     * @param cTokens The addresses of the markets to add\n     */\n    function _addCompMarkets(address[] memory cTokens) public {\n        require(adminOrInitializing(), \"only admin can add comp market\");\n\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            _addCompMarketInternal(cTokens[i]);\n        }\n\n        refreshCompSpeedsInternal();\n    }\n\n    function _addCompMarketInternal(address cToken) internal {\n        Market storage market = markets[cToken];\n        require(market.isListed == true, \"comp market is not listed\");\n        require(market.isComped == false, \"comp market already added\");\n\n        market.isComped = true;\n        emit MarketComped(CToken(cToken), true);\n\n        if (\n            compSupplyState[cToken].index == 0 &&\n            compSupplyState[cToken].block == 0\n        ) {\n            compSupplyState[cToken] = CompMarketState({\n                index: compInitialIndex,\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n            });\n        }\n\n        if (\n            compBorrowState[cToken].index == 0 &&\n            compBorrowState[cToken].block == 0\n        ) {\n            compBorrowState[cToken] = CompMarketState({\n                index: compInitialIndex,\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n            });\n        }\n    }\n\n    /**\n     * @notice Remove a market from compMarkets, preventing it from earning COMP in the flywheel\n     * @param cToken The address of the market to drop\n     */\n    function _dropCompMarket(address cToken) public {\n        require(msg.sender == admin, \"only admin can drop comp market\");\n\n        Market storage market = markets[cToken];\n        require(market.isComped == true, \"market is not a comp market\");\n\n        market.isComped = false;\n        emit MarketComped(CToken(cToken), false);\n\n        refreshCompSpeedsInternal();\n    }\n\n    /**\n     * @notice Return all of the markets\n     * @dev The automatic getter may be used to access an individual market.\n     * @return The list of market addresses\n     */\n    function getAllMarkets() public view returns (CToken[] memory) {\n        return allMarkets;\n    }\n\n    function getBlockNumber() public view returns (uint256) {\n        return block.number;\n    }\n\n    /**\n     * @notice Return the address of the COMP token\n     * @return The address of COMP\n     */\n    function getCompAddress() public pure returns (address) {\n        return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n    }\n}\n"
    },
    "contracts/ComptrollerG3.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\nimport \"./Governance/TROP.sol\";\n\n/**\n * @title tropykus Comptroller Contract\n * @author tropykus\n */\ncontract ComptrollerG3 is\n    ComptrollerV3Storage,\n    ComptrollerInterface,\n    ComptrollerErrorReporter,\n    Exponential\n{\n    /// @notice Emitted when an admin supports a market\n    event MarketListed(CToken cToken);\n\n    /// @notice Emitted when an account enters a market\n    event MarketEntered(CToken cToken, address account);\n\n    /// @notice Emitted when an account exits a market\n    event MarketExited(CToken cToken, address account);\n\n    /// @notice Emitted when close factor is changed by admin\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /// @notice Emitted when a collateral factor is changed by admin\n    event NewCollateralFactor(\n        CToken cToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /// @notice Emitted when liquidation incentive is changed by admin\n    event NewLiquidationIncentive(\n        uint256 oldLiquidationIncentiveMantissa,\n        uint256 newLiquidationIncentiveMantissa\n    );\n\n    /// @notice Emitted when maxAssets is changed by admin\n    event NewMaxAssets(uint256 oldMaxAssets, uint256 newMaxAssets);\n\n    /// @notice Emitted when price oracle is changed\n    event NewPriceOracle(\n        PriceOracle oldPriceOracle,\n        PriceOracle newPriceOracle\n    );\n\n    /// @notice Emitted when pause guardian is changed\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n    /// @notice Emitted when an action is paused globally\n    event ActionPaused(string action, bool pauseState);\n\n    /// @notice Emitted when an action is paused on a market\n    event ActionPaused(CToken cToken, string action, bool pauseState);\n\n    /// @notice Emitted when market comped status is changed\n    event MarketComped(CToken cToken, bool isComped);\n\n    /// @notice Emitted when COMP rate is changed\n    event NewCompRate(uint256 oldCompRate, uint256 newCompRate);\n\n    /// @notice Emitted when a new COMP speed is calculated for a market\n    event CompSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\n\n    /// @notice Emitted when COMP is distributed to a supplier\n    event DistributedSupplierComp(\n        CToken indexed cToken,\n        address indexed supplier,\n        uint256 compDelta,\n        uint256 compSupplyIndex\n    );\n\n    /// @notice Emitted when COMP is distributed to a borrower\n    event DistributedBorrowerComp(\n        CToken indexed cToken,\n        address indexed borrower,\n        uint256 compDelta,\n        uint256 compBorrowIndex\n    );\n\n    /// @notice The threshold above which the flywheel transfers COMP, in wei\n    uint256 public constant compClaimThreshold = 0.001e18;\n\n    /// @notice The initial COMP index for a market\n    uint224 public constant compInitialIndex = 1e36;\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n    // liquidationIncentiveMantissa must be no less than this value\n    uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\n\n    // liquidationIncentiveMantissa must be no greater than this value\n    uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(address account)\n        external\n        view\n        returns (CToken[] memory)\n    {\n        CToken[] memory assetsIn = accountAssets[account];\n\n        return assetsIn;\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(address account, CToken cToken)\n        external\n        view\n        returns (bool)\n    {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(address[] memory cTokens)\n        public\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = cTokens.length;\n\n        uint256[] memory results = new uint256[](len);\n        for (uint256 i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n     * @param cToken The market to enter\n     * @param borrower The address of the account to modify\n     * @return Success indicator for whether the market was entered\n     */\n    function addToMarketInternal(CToken cToken, address borrower)\n        internal\n        returns (Error)\n    {\n        Market storage marketToJoin = markets[address(cToken)];\n\n        if (!marketToJoin.isListed) {\n            // market is not listed, cannot join\n            return Error.MARKET_NOT_LISTED;\n        }\n\n        if (marketToJoin.accountMembership[borrower] == true) {\n            // already joined\n            return Error.NO_ERROR;\n        }\n\n        if (accountAssets[borrower].length >= maxAssets) {\n            // no space, cannot join\n            return Error.TOO_MANY_ASSETS;\n        }\n\n        // survived the gauntlet, add to list\n        // NOTE: we store these somewhat redundantly as a significant optimization\n        //  this avoids having to iterate through the list for the most common use cases\n        //  that is, only when we need to perform liquidity checks\n        //  and not whenever we want to check if an account is in a particular market\n        marketToJoin.accountMembership[borrower] = true;\n        accountAssets[borrower].push(cToken);\n\n        emit MarketEntered(cToken, borrower);\n\n        return Error.NO_ERROR;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing neccessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(address cTokenAddress)\n        external\n        override\n        returns (uint256)\n    {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\n        .getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return\n                fail(\n                    Error.NONZERO_BORROW_BALANCE,\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\n                );\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint256 allowed = redeemAllowedInternal(\n            cTokenAddress,\n            msg.sender,\n            tokensHeld\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.REJECTION,\n                    FailureInfo.EXIT_MARKET_REJECTION,\n                    allowed\n                );\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        accountAssets[msg.sender] = new CToken[](0);\n        CToken[] storage newMarketList = accountAssets[msg.sender];\n        uint256 len = userAssetList.length;\n        uint256 assetIndex = len;\n        for (uint256 i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                continue;\n            }\n            newMarketList.push(userAssetList[i]);\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    /**\n     * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!mintGuardianPaused[cToken], \"mint is paused\");\n\n        // Shh - currently unused\n        minter;\n        mintAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, minter, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param actualMintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 actualMintAmount,\n        uint256 mintTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        minter;\n        actualMintAmount;\n        mintTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external override returns (uint256) {\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, redeemer, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function redeemAllowedInternal(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) internal view returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            redeemer,\n            CToken(cToken),\n            redeemTokens,\n            0\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external pure override {\n        // Shh - currently unused\n        cToken;\n        redeemer;\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"redeemTokens zero\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        Error err;\n        uint256 shortfall;\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            // only cTokens may call borrowAllowed if borrower not in market\n            require(msg.sender == cToken, \"sender must be cToken\");\n\n            // attempt to add borrower to the market\n            err = addToMarketInternal(CToken(msg.sender), borrower);\n            if (err != Error.NO_ERROR) {\n                return uint256(err);\n            }\n\n            // it should be impossible to break the important invariant\n            assert(markets[cToken].accountMembership[borrower]);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint256(Error.PRICE_ERROR);\n        }\n\n        (err, , shortfall) = getHypotheticalAccountLiquidityInternal(\n            borrower,\n            CToken(cToken),\n            0,\n            borrowAmount\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        borrower;\n        borrowAmount;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external override returns (uint256) {\n        // Shh - currently unused\n        payer;\n        borrower;\n        repayAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 borrowerIndex\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        payer;\n        borrower;\n        actualRepayAmount;\n        borrowerIndex;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        // Shh - currently unused\n        liquidator;\n\n        if (\n            !markets[cTokenBorrowed].isListed ||\n            !markets[cTokenCollateral].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* The borrower must have shortfall in order to be liquidatable */\n        (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\n            borrower\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall == 0) {\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\n        }\n\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\n            borrower\n        );\n        (MathError mathErr, uint256 maxClose) = mulScalarTruncate(\n            Exp({mantissa: closeFactorMantissa}),\n            borrowBalance\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return uint256(Error.MATH_ERROR);\n        }\n        if (repayAmount > maxClose) {\n            return uint256(Error.TOO_MUCH_REPAY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenBorrowed;\n        cTokenCollateral;\n        liquidator;\n        borrower;\n        actualRepayAmount;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!seizeGuardianPaused, \"seize is paused\");\n\n        // Shh - currently unused\n        seizeTokens;\n\n        if (\n            !markets[cTokenCollateral].isListed ||\n            !markets[cTokenBorrowed].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (\n            CToken(cTokenCollateral).comptroller() !=\n            CToken(cTokenBorrowed).comptroller()\n        ) {\n            return uint256(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cTokenCollateral);\n        distributeSupplierComp(cTokenCollateral, borrower, false);\n        distributeSupplierComp(cTokenCollateral, liquidator, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenCollateral;\n        cTokenBorrowed;\n        liquidator;\n        borrower;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, src, false);\n        distributeSupplierComp(cToken, dst, false);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        src;\n        dst;\n        transferTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 sumCollateral;\n        uint256 sumBorrowPlusEffects;\n        uint256 cTokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToDenom;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(address(0)),\n            0,\n            0\n        );\n\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account)\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        return\n            getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(cTokenModify),\n            redeemTokens,\n            borrowAmount\n        );\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint256 oErr;\n        MathError mErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint256 i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (\n                oErr,\n                vars.cTokenBalance,\n                vars.borrowBalance,\n                vars.exchangeRateMantissa\n            ) = asset.getAccountSnapshot(account);\n            if (oErr != 0) {\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({\n                mantissa: markets[address(asset)].collateralFactorMantissa\n            });\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            (mErr, vars.tokensToDenom) = mulExp3(\n                vars.collateralFactor,\n                vars.exchangeRate,\n                vars.oraclePrice\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumCollateral += tokensToDenom * cTokenBalance\n            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(\n                vars.tokensToDenom,\n                vars.cTokenBalance,\n                vars.sumCollateral\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                vars.oraclePrice,\n                vars.borrowBalance,\n                vars.sumBorrowPlusEffects\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.tokensToDenom,\n                    redeemTokens,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.oraclePrice,\n                    borrowAmount,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (\n                Error.NO_ERROR,\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\n                0\n            );\n        } else {\n            return (\n                Error.NO_ERROR,\n                0,\n                vars.sumBorrowPlusEffects - vars.sumCollateral\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 actualRepayAmount\n    ) external view override returns (uint256, uint256) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenBorrowed)\n        );\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenCollateral)\n        );\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint256(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\n        .exchangeRateStored(); // Note: reverts on error\n        uint256 seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n        MathError mathErr;\n\n        (mathErr, numerator) = mulExp(\n            liquidationIncentiveMantissa,\n            priceBorrowedMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, denominator) = mulExp(\n            priceCollateralMantissa,\n            exchangeRateMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, ratio) = divExp(numerator, denominator);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, seizeTokens) = mulScalarTruncate(ratio, actualRepayAmount);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        return (uint256(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\n                );\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the closeFactor used when liquidating borrows\n     * @dev Admin function to set closeFactor\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK\n                );\n        }\n\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param cToken The market to set the factor on\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCollateralFactor(\n        CToken cToken,\n        uint256 newCollateralFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\n                );\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return\n                fail(\n                    Error.MARKET_NOT_LISTED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\n                );\n        }\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.9\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_COLLATERAL_FACTOR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\n                );\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (\n            newCollateralFactorMantissa != 0 &&\n            oracle.getUnderlyingPrice(cToken) == 0\n        ) {\n            return\n                fail(\n                    Error.PRICE_ERROR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\n                );\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            cToken,\n            oldCollateralFactorMantissa,\n            newCollateralFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets maxAssets which controls how many markets can be entered\n     * @dev Admin function to set maxAssets\n     * @param newMaxAssets New max assets\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setMaxAssets(uint256 newMaxAssets) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_MAX_ASSETS_OWNER_CHECK\n                );\n        }\n\n        uint256 oldMaxAssets = maxAssets;\n        maxAssets = newMaxAssets;\n        emit NewMaxAssets(oldMaxAssets, newMaxAssets);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets liquidationIncentive\n     * @dev Admin function to set liquidationIncentive\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n                );\n        }\n\n        // Check de-scaled min <= newLiquidationIncentive <= max\n        Exp memory newLiquidationIncentive = Exp({\n            mantissa: newLiquidationIncentiveMantissa\n        });\n        Exp memory minLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMinMantissa\n        });\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        Exp memory maxLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMaxMantissa\n        });\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        // Save current value for use in log\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(\n            oldLiquidationIncentiveMantissa,\n            newLiquidationIncentiveMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param cToken The address of the market (token) to list\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _supportMarket(CToken cToken) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\n                );\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return\n                fail(\n                    Error.MARKET_ALREADY_LISTED,\n                    FailureInfo.SUPPORT_MARKET_EXISTS\n                );\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        Market storage market = markets[address(cToken)];\n        market.isListed = true;\n        market.isComped = false;\n        market.collateralFactorMantissa = 0;\n\n        _addMarketInternal(address(cToken));\n\n        emit MarketListed(cToken);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _addMarketInternal(address cToken) internal {\n        for (uint256 i = 0; i < allMarkets.length; i++) {\n            require(allMarkets[i] != CToken(cToken), \"market already added\");\n        }\n        allMarkets.push(CToken(cToken));\n    }\n\n    /**\n     * @notice Admin function to change the Pause Guardian\n     * @param newPauseGuardian The address of the new Pause Guardian\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _setPauseGuardian(address newPauseGuardian)\n        public\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\n                );\n        }\n\n        // Save current value for inclusion in log\n        address oldPauseGuardian = pauseGuardian;\n\n        // Store pauseGuardian with value newPauseGuardian\n        pauseGuardian = newPauseGuardian;\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        mintGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Mint\", state);\n        return state;\n    }\n\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        borrowGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Borrow\", state);\n        return state;\n    }\n\n    function _setTransferPaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        transferGuardianPaused = state;\n        emit ActionPaused(\"Transfer\", state);\n        return state;\n    }\n\n    function _setSeizePaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        seizeGuardianPaused = state;\n        emit ActionPaused(\"Seize\", state);\n        return state;\n    }\n\n    function _become(\n        Unitroller unitroller,\n        uint256 compRate_,\n        address[] memory compMarketsToAdd,\n        address[] memory otherMarketsToAdd\n    ) public {\n        require(\n            msg.sender == unitroller.admin(),\n            \"only unitroller admin can change brains\"\n        );\n        require(\n            unitroller._acceptImplementation() == 0,\n            \"change not authorized\"\n        );\n\n        ComptrollerG3(address(unitroller))._becomeG3(\n            compRate_,\n            compMarketsToAdd,\n            otherMarketsToAdd\n        );\n    }\n\n    function _becomeG3(\n        uint256 compRate_,\n        address[] memory compMarketsToAdd,\n        address[] memory otherMarketsToAdd\n    ) public {\n        require(\n            msg.sender == comptrollerImplementation,\n            \"only brains can become itself\"\n        );\n\n        for (uint256 i = 0; i < compMarketsToAdd.length; i++) {\n            _addMarketInternal(address(compMarketsToAdd[i]));\n        }\n\n        for (uint256 i = 0; i < otherMarketsToAdd.length; i++) {\n            _addMarketInternal(address(otherMarketsToAdd[i]));\n        }\n\n        _setCompRate(compRate_);\n        _addCompMarkets(compMarketsToAdd);\n    }\n\n    /**\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\n     */\n    function adminOrInitializing() internal view returns (bool) {\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\n    }\n\n    /*** TROP Distribution ***/\n\n    /**\n     * @notice Recalculate and update COMP speeds for all COMP markets\n     */\n    function refreshCompSpeeds() public {\n        CToken[] memory allMarkets_ = allMarkets;\n\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets_[i];\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n            updateCompSupplyIndex(address(cToken));\n            updateCompBorrowIndex(address(cToken), borrowIndex);\n        }\n\n        Exp memory totalUtility = Exp({mantissa: 0});\n        Exp[] memory utilities = new Exp[](allMarkets_.length);\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets_[i];\n            if (markets[address(cToken)].isComped) {\n                Exp memory assetPrice = Exp({\n                    mantissa: oracle.getUnderlyingPrice(cToken)\n                });\n                Exp memory interestPerBlock = mul_(\n                    Exp({mantissa: cToken.borrowRatePerBlock()}),\n                    cToken.totalBorrows()\n                );\n                Exp memory utility = mul_(interestPerBlock, assetPrice);\n                utilities[i] = utility;\n                totalUtility = add_(totalUtility, utility);\n            }\n        }\n\n        for (uint256 i = 0; i < allMarkets_.length; i++) {\n            CToken cToken = allMarkets[i];\n            uint256 newSpeed = totalUtility.mantissa > 0\n                ? mul_(compRate, div_(utilities[i], totalUtility))\n                : 0;\n            compSpeeds[address(cToken)] = newSpeed;\n            emit CompSpeedUpdated(cToken, newSpeed);\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the supply index\n     * @param cToken The market whose supply index to update\n     */\n    function updateCompSupplyIndex(address cToken) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        uint256 supplySpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(supplyState.block));\n        if (deltaBlocks > 0 && supplySpeed > 0) {\n            uint256 supplyTokens = CToken(cToken).totalSupply();\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\n            Double memory ratio = supplyTokens > 0\n                ? fraction(compAccrued, supplyTokens)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: supplyState.index}),\n                ratio\n            );\n            compSupplyState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"new index exceeds 224 bits\"),\n                block: safe32(blockNumber, \"block number exceeds 32 bits\")\n            });\n        } else if (deltaBlocks > 0) {\n            supplyState.block = safe32(\n                blockNumber,\n                \"block number exceeds 32 bits\"\n            );\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the borrow index\n     * @param cToken The market whose borrow index to update\n     */\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex)\n        internal\n    {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        uint256 borrowSpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(borrowState.block));\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\n            uint256 borrowAmount = div_(\n                CToken(cToken).totalBorrows(),\n                marketBorrowIndex\n            );\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\n            Double memory ratio = borrowAmount > 0\n                ? fraction(compAccrued, borrowAmount)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: borrowState.index}),\n                ratio\n            );\n            compBorrowState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"new index exceeds 224 bits\"),\n                block: safe32(blockNumber, \"block number exceeds 32 bits\")\n            });\n        } else if (deltaBlocks > 0) {\n            borrowState.block = safe32(\n                blockNumber,\n                \"block number exceeds 32 bits\"\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\n     * @param cToken The market in which the supplier is interacting\n     * @param supplier The address of the supplier to distribute COMP to\n     */\n    function distributeSupplierComp(\n        address cToken,\n        address supplier,\n        bool distributeAll\n    ) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\n        Double memory supplierIndex = Double({\n            mantissa: compSupplierIndex[cToken][supplier]\n        });\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\n\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n            supplierIndex.mantissa = compInitialIndex;\n        }\n\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\n        compAccrued[supplier] = transferComp(\n            supplier,\n            supplierAccrued,\n            distributeAll ? 0 : compClaimThreshold\n        );\n        emit DistributedSupplierComp(\n            CToken(cToken),\n            supplier,\n            supplierDelta,\n            supplyIndex.mantissa\n        );\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n     * @param cToken The market in which the borrower is interacting\n     * @param borrower The address of the borrower to distribute COMP to\n     */\n    function distributeBorrowerComp(\n        address cToken,\n        address borrower,\n        Exp memory marketBorrowIndex,\n        bool distributeAll\n    ) internal {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\n        Double memory borrowerIndex = Double({\n            mantissa: compBorrowerIndex[cToken][borrower]\n        });\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\n\n        if (borrowerIndex.mantissa > 0) {\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\n            uint256 borrowerAmount = div_(\n                CToken(cToken).borrowBalanceStored(borrower),\n                marketBorrowIndex\n            );\n            uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\n            uint256 borrowerAccrued = add_(\n                compAccrued[borrower],\n                borrowerDelta\n            );\n            compAccrued[borrower] = transferComp(\n                borrower,\n                borrowerAccrued,\n                distributeAll ? 0 : compClaimThreshold\n            );\n            emit DistributedBorrowerComp(\n                CToken(cToken),\n                borrower,\n                borrowerDelta,\n                borrowIndex.mantissa\n            );\n        }\n    }\n\n    /**\n     * @notice Transfer COMP to the user, if they are above the threshold\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\n     * @param user The address of the user to transfer COMP to\n     * @param userAccrued The amount of COMP to (possibly) transfer\n     * @return The amount of COMP which was NOT transferred to the user\n     */\n    function transferComp(\n        address user,\n        uint256 userAccrued,\n        uint256 threshold\n    ) internal returns (uint256) {\n        if (userAccrued >= threshold && userAccrued > 0) {\n            TROP comp = TROP(getCompAddress());\n            uint256 compRemaining = comp.balanceOf(address(this));\n            if (userAccrued <= compRemaining) {\n                comp.transfer(user, userAccrued);\n                return 0;\n            }\n        }\n        return userAccrued;\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in all markets\n     * @param holder The address to claim COMP for\n     */\n    function claimComp(address holder) public {\n        return claimComp(holder, allMarkets);\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in the specified markets\n     * @param holder The address to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     */\n    function claimComp(address holder, CToken[] memory cTokens) public {\n        address[] memory holders = new address[](1);\n        holders[0] = holder;\n        claimComp(holders, cTokens, true, true);\n    }\n\n    /**\n     * @notice Claim all comp accrued by the holders\n     * @param holders The addresses to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     * @param borrowers Whether or not to claim COMP earned by borrowing\n     * @param suppliers Whether or not to claim COMP earned by supplying\n     */\n    function claimComp(\n        address[] memory holders,\n        CToken[] memory cTokens,\n        bool borrowers,\n        bool suppliers\n    ) public {\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            CToken cToken = cTokens[i];\n            require(markets[address(cToken)].isListed, \"market must be listed\");\n            if (borrowers == true) {\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n                updateCompBorrowIndex(address(cToken), borrowIndex);\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeBorrowerComp(\n                        address(cToken),\n                        holders[j],\n                        borrowIndex,\n                        true\n                    );\n                }\n            }\n            if (suppliers == true) {\n                updateCompSupplyIndex(address(cToken));\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeSupplierComp(address(cToken), holders[j], true);\n                }\n            }\n        }\n    }\n\n    /*** TROP Distribution Admin ***/\n\n    /**\n     * @notice Set the amount of COMP distributed per block\n     * @param compRate_ The amount of COMP wei per block to distribute\n     */\n    function _setCompRate(uint256 compRate_) public {\n        require(adminOrInitializing(), \"only admin can change comp rate\");\n\n        uint256 oldRate = compRate;\n        compRate = compRate_;\n        emit NewCompRate(oldRate, compRate_);\n\n        refreshCompSpeeds();\n    }\n\n    /**\n     * @notice Add markets to compMarkets, allowing them to earn COMP in the flywheel\n     * @param cTokens The addresses of the markets to add\n     */\n    function _addCompMarkets(address[] memory cTokens) public {\n        require(adminOrInitializing(), \"only admin can add comp market\");\n\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            _addCompMarketInternal(cTokens[i]);\n        }\n\n        refreshCompSpeeds();\n    }\n\n    function _addCompMarketInternal(address cToken) internal {\n        Market storage market = markets[cToken];\n        require(market.isListed == true, \"comp market is not listed\");\n        require(market.isComped == false, \"comp market already added\");\n\n        market.isComped = true;\n        emit MarketComped(CToken(cToken), true);\n\n        if (\n            compSupplyState[cToken].index == 0 &&\n            compSupplyState[cToken].block == 0\n        ) {\n            compSupplyState[cToken] = CompMarketState({\n                index: compInitialIndex,\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n            });\n        }\n\n        if (\n            compBorrowState[cToken].index == 0 &&\n            compBorrowState[cToken].block == 0\n        ) {\n            compBorrowState[cToken] = CompMarketState({\n                index: compInitialIndex,\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n            });\n        }\n    }\n\n    /**\n     * @notice Remove a market from compMarkets, preventing it from earning COMP in the flywheel\n     * @param cToken The address of the market to drop\n     */\n    function _dropCompMarket(address cToken) public {\n        require(msg.sender == admin, \"only admin can drop comp market\");\n\n        Market storage market = markets[cToken];\n        require(market.isComped == true, \"market is not a comp market\");\n\n        market.isComped = false;\n        emit MarketComped(CToken(cToken), false);\n\n        refreshCompSpeeds();\n    }\n\n    /**\n     * @notice Return all of the markets\n     * @dev The automatic getter may be used to access an individual market.\n     * @return The list of market addresses\n     */\n    function getAllMarkets() public view returns (CToken[] memory) {\n        return allMarkets;\n    }\n\n    function getBlockNumber() public view virtual returns (uint256) {\n        return block.number;\n    }\n\n    /**\n     * @notice Return the address of the COMP token\n     * @return The address of COMP\n     */\n    function getCompAddress() public view virtual returns (address) {\n        return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n    }\n}\n"
    },
    "contracts/PriceOracleProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./PriceOracle.sol\";\nimport \"./PriceOracleAdapter.sol\";\n\ncontract PriceOracleProxy is PriceOracle {\n    /// @notice Address of the guardian\n    address public guardian;\n    /// @notice Address of the pending guardian\n    address public pendingGuardian;\n    /// @notice Mapping of the cTokenAddress => adapterAddress\n    mapping(address => address) public tokenAdapter;\n    ///@notice Emitted when pendingGuardian is changed\n    event NewPendingGuardian(\n        address oldPendingGuardian,\n        address newPendingGuardian\n    );\n    ///@notice Emitted when pendingGuardian is accepted, which means gaurdian is updated\n    event NewGuardian(address oldGuardian, address newGuardian);\n    /// @notice Struct of the cTokensDetail\n    struct CtokenDetail {\n        address cToken;\n        string cTokenName;\n    }\n\n    /// @notice Array of cTokensDetail\n    CtokenDetail[] public cTokensArray;\n\n    /**\n     * @notice Get the length of cTokensArray\n     * @return The length of cTokensArray\n     */\n    function cTokenArrayCount() public view returns (uint256) {\n        return cTokensArray.length;\n    }\n\n    /// @param guardian_ The address of the guardian, which may set the\n    constructor(address guardian_) {\n        guardian = guardian_;\n    }\n\n    /**\n     * @notice Get the underlying price of a listed cToken asset\n     * @param cToken The cToken to get the underlying price of\n     * @return The underlying asset price mantissa (scaled by 1e18)\n     */\n    function getUnderlyingPrice(CToken cToken)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        address oracleAdapter = tokenAdapter[address(cToken)];\n        //validate mapping\n        if (oracleAdapter == address(0)) {\n            return 0;\n        }\n        return PriceOracleAdapter(oracleAdapter).assetPrices(address(cToken));\n    }\n\n    /**\n     * @notice Set the underlying price of a listed cToken asset\n     * @param addressToken Address of the cToken\n     * @param addressAdapter Address of the OracleAdapter\n     */\n    function setAdapterToToken(address addressToken, address addressAdapter)\n        public\n    {\n        //validate only guardian can set\n        require(\n            msg.sender == guardian,\n            \"PriceOracleProxy: only guardian may set the address\"\n        );\n        require(\n            addressToken != address(0),\n            \"PriceOracleProxy: address token can not be 0\"\n        );\n        require(\n            addressAdapter != address(0),\n            \"PriceOracleProxy: address adapter can not be 0\"\n        );\n        //validate and set new cToken in CtokenDetail\n        if (tokenAdapter[addressToken] == address(0)) {\n            CtokenDetail memory _cTokenD = CtokenDetail({\n                cToken: addressToken,\n                cTokenName: CToken(addressToken).symbol()\n            });\n\n            cTokensArray.push(_cTokenD);\n        }\n        //set token => adapter\n        tokenAdapter[addressToken] = addressAdapter;\n    }\n\n    /**\n     * @notice Begins transfer of gaurdian rights. The newPendingGaurdian must call `_acceptAdmin` to finalize the transfer.\n     * @param newPendingGuardian New pending gaurdian.\n     */\n    function _setPendingAdmin(address newPendingGuardian) public {\n        // Check caller = gaurdian\n        require(\n            msg.sender == guardian,\n            \"PriceOracleProxy: only guardian may set the address\"\n        );\n        require(\n            newPendingGuardian != address(0),\n            \"PriceOracleProxy: address admin can not be 0\"\n        );\n        // Save current value, if any, for inclusion in log\n        address oldPendingGuardian = guardian;\n        // Store pendingGaurdian with value newPendingGaurdian\n        pendingGuardian = newPendingGuardian;\n        // Emit NewPendingGaurdian(oldPendingGaurdian, newPendingGaurdian)\n        emit NewPendingGuardian(oldPendingGuardian, newPendingGuardian);\n    }\n\n    /// @notice Accepts transfer of gaurdian rights. msg.sender must be pendingGaurdian\n    function _acceptAdmin() public {\n        // Check caller is pendingGaurdian and pendingGaurdian ≠ address(0)\n        require(\n            msg.sender == pendingGuardian,\n            \"PriceOracleProxy: only guardian may set the address\"\n        );\n        require(\n            msg.sender != address(0),\n            \"PriceOracleProxy: sender can not be 0\"\n        );\n\n        // Save current values for inclusion in log\n        address oldGuardian = guardian;\n        address oldPendingGaurdian = pendingGuardian;\n\n        // Store gaurdian with value pendingGaurdian\n        guardian = pendingGuardian;\n\n        // Clear the pending value\n        pendingGuardian = address(0);\n\n        emit NewGuardian(oldGuardian, guardian);\n        emit NewPendingGuardian(oldPendingGaurdian, pendingGuardian);\n    }\n}\n"
    },
    "contracts/PriceOracleAdapter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nabstract contract PriceOracleAdapter {\n    /// @notice Event adapter interface updated\n    event PriceOracleAdapterUpdated(address oldAddress, address newAddress);\n\n    /**\n     * @notice Get the price\n     * @return The underlying asset price mantissa (scaled by 1e18).\n     *  Zero means the price is unavailable.\n     */\n    function assetPrices(address cTokenAddress)\n        external\n        view\n        virtual\n        returns (uint256);\n}\n"
    },
    "contracts/PriceOracleAdapterMoc.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./PriceOracleAdapter.sol\";\n\ninterface PriceProviderMoC {\n    function peek() external view returns (bytes32, bool);\n}\n\ncontract PriceOracleAdapterMoc is PriceOracleAdapter {\n    /// @notice Address of the guardian\n    address public guardian;\n    /// @notice The MoC price oracle, which will continue to serve prices\n    PriceProviderMoC public priceProviderMoC;\n\n    /// @notice Guardian updated\n    event NewGuardian(address oldGuardian, address newGuardian);\n\n    /**\n     * @notice Construct a PriceOracleAdapter for a MoC oracle\n     * @param guardian_ address of guardian that is allowed to manage this contract\n     * @param priceProvider address of asset's MoC price provider\n     */\n    constructor(address guardian_, address priceProvider) {\n        require(\n            guardian_ != address(0),\n            \"PriceOracleAdapterMoc: guardian could not be 0\"\n        );\n        require(\n            priceProvider != address(0),\n            \"PriceOracleAdapterMoc: priceProvider could not be 0\"\n        );\n        guardian = guardian_;\n        priceProviderMoC = PriceProviderMoC(priceProvider);\n    }\n\n    /**\n     * @notice Get the price from MoC and divide it by the rBTC price\n     * @return The price\n     */\n    function assetPrices(address) public view override returns (uint256) {\n        (bytes32 price, bool has) = priceProviderMoC.peek();\n        require(has, \"PriceOracleAdapterMoc: Oracle have no Price\");\n        return uint256(price);\n    }\n\n    /**\n     * @notice Set the address of price provider\n     * @param priceProviderAddress address of price provider\n     */\n    function setPriceProvider(address priceProviderAddress) public {\n        require(\n            msg.sender == guardian,\n            \"PriceOracleAdapterMoc: only guardian may set the address\"\n        );\n        require(\n            priceProviderAddress != address(0),\n            \"PriceOracleAdapterMoc: address could not be 0\"\n        );\n        //set old address\n        address oldPriceProviderAddress = address(priceProviderMoC);\n        //update interface address\n        priceProviderMoC = PriceProviderMoC(priceProviderAddress);\n        //emit event\n        emit PriceOracleAdapterUpdated(\n            oldPriceProviderAddress,\n            priceProviderAddress\n        );\n    }\n\n    /**\n     * @notice Set the address of the guardian\n     * @param newGuardian address of the guardian\n     */\n    function setGuardian(address newGuardian) public {\n        require(msg.sender == guardian, \"PriceOracleAdapterMoc: only guardian\");\n        require(\n            guardian != address(0),\n            \"PriceOracleAdapterMoc: guardin address can not be 0\"\n        );\n        //set old address\n        address oldGuardian = guardian;\n        //update\n        guardian = newGuardian;\n        //emit event\n        emit NewGuardian(oldGuardian, newGuardian);\n    }\n}\n"
    },
    "contracts/mocks/PriceOracleAdapterCompound.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"../PriceOracleAdapter.sol\";\nimport \"../CErc20.sol\";\n\ninterface V1PriceOracleInterface {\n    function assetPrices(address asset) external view returns (uint256);\n}\n\ncontract PriceOracleAdapterCompound is PriceOracleAdapter {\n    /// @notice Address of the guardian\n    address public guardian;\n    /// @notice Event oracle key updateed\n    event PriceOracleKeyUpdated(\n        address oldAddress,\n        address newAddress,\n        address cTokenAddress\n    );\n    /// @notice The price oracle, which will continue to serve prices of compound\n    V1PriceOracleInterface public priceProviderInterface;\n\n    // mapping(addressCtoken => addressKeyOracle);\n    mapping(address => address) public oracleKeyAddress;\n\n    /// @notice Frozen SAI price (or 0 if not set yet)\n    uint256 public saiPrice;\n\n    constructor(address guardian_) {\n        guardian = guardian_;\n    }\n\n    /**\n     * @notice Get the price\n     * @param cTokenAddress address of cToken\n     * @return The price\n     */\n    function assetPrices(address cTokenAddress)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        //get keyAddress or undlerlyingAddress\n        address asset = (oracleKeyAddress[cTokenAddress] != address(0))\n            ? address(oracleKeyAddress[cTokenAddress])\n            : address(CErc20(cTokenAddress).underlying());\n        return priceProviderInterface.assetPrices(asset);\n    }\n\n    /**\n     * @notice Set the address of price provider\n     * @param priceProviderAddress address of price provider\n     */\n    function setPriceProvider(address priceProviderAddress) public {\n        require(\n            msg.sender == guardian,\n            \"PriceOracleAdapterCompound: only guardian may set the address\"\n        );\n        require(\n            priceProviderAddress != address(0),\n            \"PriceOracleAdapterCompound: address could not be 0\"\n        );\n        //set old address\n        address oldBtcPriceProviderAddress = address(priceProviderInterface);\n        //update interface address\n        priceProviderInterface = V1PriceOracleInterface(priceProviderAddress);\n        //emit event\n        emit PriceOracleAdapterUpdated(\n            oldBtcPriceProviderAddress,\n            address(priceProviderInterface)\n        );\n    }\n\n    /**\n     * @notice Set the key oracle address of cToken address\n     * @param cTokenAddress address of key ctoken\n     * @param keyOracle address of key oracle\n     */\n    function setKeyOracle(address cTokenAddress, address keyOracle) public {\n        require(\n            msg.sender == guardian,\n            \"PriceOracleAdapterCompound: only guardian may set the address\"\n        );\n        require(\n            cTokenAddress != address(0),\n            \"PriceOracleAdapterCompound: cTokenAddress could not be 0\"\n        );\n        require(\n            keyOracle != address(0),\n            \"PriceOracleAdapterCompound: keyOracle could not be 0\"\n        );\n        //set old address\n        address oldBtcPriceProviderAddress = address(\n            oracleKeyAddress[cTokenAddress]\n        );\n        //update key address\n        oracleKeyAddress[cTokenAddress] = keyOracle;\n        //emit event\n        emit PriceOracleKeyUpdated(\n            oldBtcPriceProviderAddress,\n            address(oracleKeyAddress[cTokenAddress]),\n            cTokenAddress\n        );\n    }\n\n    /**\n     * @notice Set the price of SAI, permanently\n     * @param price The price for SAI\n     */\n    function setSaiPrice(uint256 price) public {\n        require(msg.sender == guardian, \"only guardian may set the SAI price\");\n        require(saiPrice == 0, \"SAI price may only be set once\");\n        require(price < 0.1e18, \"SAI price must be < 0.1 ETH\");\n        saiPrice = price;\n    }\n}\n"
    },
    "contracts/mocks/SimplePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"../PriceOracle.sol\";\nimport \"../CErc20.sol\";\n\n/**\n * @title Simplified Oracle for testing purposes.\n * @author tropykus\n * @notice This contract is meant for testing only.\n */\ncontract SimplePriceOracle is PriceOracle {\n    mapping(address => uint256) prices;\n    event PricePosted(\n        address asset,\n        uint256 previousPriceMantissa,\n        uint256 requestedPriceMantissa,\n        uint256 newPriceMantissa\n    );\n\n    function getUnderlyingPrice(CToken cToken)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        if (compareStrings(cToken.symbol(), \"cRBTC\")) {\n            return prices[(address(cToken))];\n        } else {\n            return prices[address(CErc20(address(cToken)).underlying())];\n        }\n    }\n\n    function setUnderlyingPrice(CToken cToken, uint256 underlyingPriceMantissa)\n        public\n    {\n        address asset = address(CErc20(address(cToken)).underlying());\n        emit PricePosted(\n            asset,\n            prices[asset],\n            underlyingPriceMantissa,\n            underlyingPriceMantissa\n        );\n        prices[asset] = underlyingPriceMantissa;\n    }\n\n    function setDirectPrice(address asset, uint256 price) public {\n        emit PricePosted(asset, prices[asset], price, price);\n        prices[asset] = price;\n    }\n\n    // v1 price oracle interface for use as backing of proxy\n    function assetPrices(address asset) external view returns (uint256) {\n        return prices[asset];\n    }\n\n    function compareStrings(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (keccak256(abi.encodePacked((a))) ==\n            keccak256(abi.encodePacked((b))));\n    }\n}\n"
    },
    "contracts/mocks/MockPriceProviderMoC.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"../CErc20.sol\";\n\n/**\n * @title A mock price provider of Money on Chain (MoC)\n * @notice You can use this contract for only simulation\n */\ncontract MockPriceProviderMoC {\n    /// @notice rbtcPrice of the interface provicer MoC\n    bytes32 rbtcPrice;\n    /// @notice has of the interface provicer MoC\n    bool has;\n    /// @notice Address of the guardian\n    address public guardian;\n    /// @notice Event rbtcPrice updated\n    event MockPriceProviderMoCUpdated(uint256 oldPrice, uint256 newPrice);\n\n    constructor(address guardian_, uint256 price) {\n        require(\n            guardian_ != address(0),\n            \"MockPriceProviderMoC: address could not be 0\"\n        );\n        require(\n            price != uint256(0),\n            \"MockPriceProviderMoC: price could not be 0\"\n        );\n        guardian = guardian_;\n        rbtcPrice = bytes32(price);\n        has = true;\n    }\n\n    function peek() public view returns (bytes32, bool) {\n        return (rbtcPrice, has);\n    }\n\n    /**\n     * @notice Set the rbtcPrice price provider\n     * @param price uint of price provider\n     */\n    function setPrice(uint256 price) public {\n        require(\n            msg.sender == guardian,\n            \"MockPriceProviderMoC: only guardian may set the address\"\n        );\n        require(\n            price != uint256(0),\n            \"MockPriceProviderMoC: price could not be 0\"\n        );\n        //set old price\n        bytes32 oldRbtcPrice = rbtcPrice;\n        //update rbtcPrice\n        rbtcPrice = bytes32(price);\n        //emit event\n        emit MockPriceProviderMoCUpdated(\n            uint256(oldRbtcPrice),\n            uint256(rbtcPrice)\n        );\n    }\n}\n"
    },
    "contracts/CErc20Immutable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CErc20.sol\";\n\n/**\n * @title tropykus CErc20Immutable Contract\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\n * @author tropykus\n */\ncontract CErc20Immutable is CErc20 {\n    /**\n     * @notice Construct a new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     * @param admin_ Address of the administrator of this token\n     */\n    constructor(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address payable admin_\n    ) {\n        // Creator of the contract is admin during initialization\n        admin = payable(msg.sender);\n\n        // Initialize the market\n        initialize(\n            underlying_,\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set the proper admin now that initialization is done\n        admin = admin_;\n    }\n}\n"
    },
    "contracts/CErc20Delegate.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CErc20.sol\";\n\n/**\n * @title tropykus CErc20Delegate Contract\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\n * @author tropykus\n */\ncontract CErc20Delegate is CErc20, CDelegateInterface {\n    /**\n     * @notice Construct an empty delegate\n     */\n    constructor() {\n        // solium-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @notice Called by the delegator on a delegate to initialize it for duty\n     * @param data The encoded bytes data for any initialization\n     */\n    function _becomeImplementation(bytes memory data) public override {\n        // Shh -- currently unused\n        data;\n\n        // Shh -- we don't ever want this hook to be marked pure\n        if (false) {\n            implementation = address(0);\n        }\n\n        require(msg.sender == admin, \"ER01\");\n    }\n\n    /**\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\n     */\n    function _resignImplementation() public override {\n        // Shh -- we don't ever want this hook to be marked pure\n        if (false) {\n            implementation = address(0);\n        }\n\n        require(msg.sender == admin, \"ER02\");\n    }\n}\n"
    },
    "contracts/CCompLikeDelegate.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CErc20Delegate.sol\";\n\ninterface CompLike {\n    function delegate(address delegatee) external;\n}\n\n/**\n * @title Compound's CCompLikeDelegate Contract\n * @notice CTokens which can 'delegate votes' of their underlying ERC-20\n * @author tropykus\n */\ncontract CCompLikeDelegate is CErc20Delegate {\n    /**\n     * @notice Construct an empty delegate\n     */\n    constructor() CErc20Delegate() {}\n\n    /**\n     * @notice Admin call to delegate the votes of the COMP-like underlying\n     * @param compLikeDelegatee The address to delegate votes to\n     */\n    function _delegateCompLikeTo(address compLikeDelegatee) external {\n        require(\n            msg.sender == admin,\n            \"only the admin may set the comp-like delegate\"\n        );\n        CompLike(underlying).delegate(compLikeDelegatee);\n    }\n}\n"
    },
    "contracts/ComptrollerG2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\n\n/**\n * @title tropykus Comptroller Contract\n * @author tropykus\n */\ncontract ComptrollerG2 is\n    ComptrollerV2Storage,\n    ComptrollerInterface,\n    ComptrollerErrorReporter,\n    Exponential\n{\n    /**\n     * @notice Emitted when an admin supports a market\n     */\n    event MarketListed(CToken cToken);\n\n    /**\n     * @notice Emitted when an account enters a market\n     */\n    event MarketEntered(CToken cToken, address account);\n\n    /**\n     * @notice Emitted when an account exits a market\n     */\n    event MarketExited(CToken cToken, address account);\n\n    /**\n     * @notice Emitted when close factor is changed by admin\n     */\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /**\n     * @notice Emitted when a collateral factor is changed by admin\n     */\n    event NewCollateralFactor(\n        CToken cToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /**\n     * @notice Emitted when liquidation incentive is changed by admin\n     */\n    event NewLiquidationIncentive(\n        uint256 oldLiquidationIncentiveMantissa,\n        uint256 newLiquidationIncentiveMantissa\n    );\n\n    /**\n     * @notice Emitted when maxAssets is changed by admin\n     */\n    event NewMaxAssets(uint256 oldMaxAssets, uint256 newMaxAssets);\n\n    /**\n     * @notice Emitted when price oracle is changed\n     */\n    event NewPriceOracle(\n        PriceOracle oldPriceOracle,\n        PriceOracle newPriceOracle\n    );\n\n    /**\n     * @notice Emitted when pause guardian is changed\n     */\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n    /**\n     * @notice Emitted when an action is paused globally\n     */\n    event ActionPaused(string action, bool pauseState);\n\n    /**\n     * @notice Emitted when an action is paused on a market\n     */\n    event ActionPaused(CToken cToken, string action, bool pauseState);\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n    // liquidationIncentiveMantissa must be no less than this value\n    uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\n\n    // liquidationIncentiveMantissa must be no greater than this value\n    uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(address account)\n        external\n        view\n        returns (CToken[] memory)\n    {\n        CToken[] memory assetsIn = accountAssets[account];\n\n        return assetsIn;\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(address account, CToken cToken)\n        external\n        view\n        returns (bool)\n    {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(address[] memory cTokens)\n        public\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = cTokens.length;\n\n        uint256[] memory results = new uint256[](len);\n        for (uint256 i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n     * @param cToken The market to enter\n     * @param borrower The address of the account to modify\n     * @return Success indicator for whether the market was entered\n     */\n    function addToMarketInternal(CToken cToken, address borrower)\n        internal\n        returns (Error)\n    {\n        Market storage marketToJoin = markets[address(cToken)];\n\n        if (!marketToJoin.isListed) {\n            // market is not listed, cannot join\n            return Error.MARKET_NOT_LISTED;\n        }\n\n        if (marketToJoin.accountMembership[borrower] == true) {\n            // already joined\n            return Error.NO_ERROR;\n        }\n\n        if (accountAssets[borrower].length >= maxAssets) {\n            // no space, cannot join\n            return Error.TOO_MANY_ASSETS;\n        }\n\n        // survived the gauntlet, add to list\n        // NOTE: we store these somewhat redundantly as a significant optimization\n        //  this avoids having to iterate through the list for the most common use cases\n        //  that is, only when we need to perform liquidity checks\n        //  and not whenever we want to check if an account is in a particular market\n        marketToJoin.accountMembership[borrower] = true;\n        accountAssets[borrower].push(cToken);\n\n        emit MarketEntered(cToken, borrower);\n\n        return Error.NO_ERROR;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing neccessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(address cTokenAddress)\n        external\n        override\n        returns (uint256)\n    {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\n        .getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return\n                fail(\n                    Error.NONZERO_BORROW_BALANCE,\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\n                );\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint256 allowed = redeemAllowedInternal(\n            cTokenAddress,\n            msg.sender,\n            tokensHeld\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.REJECTION,\n                    FailureInfo.EXIT_MARKET_REJECTION,\n                    allowed\n                );\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        accountAssets[msg.sender] = new CToken[](0);\n        CToken[] storage newMarketList = accountAssets[msg.sender];\n        uint256 len = userAssetList.length;\n        uint256 assetIndex = len;\n        for (uint256 i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                continue;\n            }\n            newMarketList.push(userAssetList[i]);\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    /**\n     * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external view override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!mintGuardianPaused[cToken], \"mint is paused\");\n\n        // Shh - currently unused\n        minter;\n        mintAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param actualMintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 actualMintAmount,\n        uint256 mintTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        minter;\n        actualMintAmount;\n        mintTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external view override returns (uint256) {\n        return redeemAllowedInternal(cToken, redeemer, redeemTokens);\n    }\n\n    function redeemAllowedInternal(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) internal view returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            redeemer,\n            CToken(cToken),\n            redeemTokens,\n            0\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external pure override {\n        // Shh - currently unused\n        cToken;\n        redeemer;\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"redeemTokens zero\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        Error err;\n        uint256 shortfall;\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            // only cTokens may call borrowAllowed if borrower not in market\n            require(msg.sender == cToken, \"sender must be cToken\");\n\n            // attempt to add borrower to the market\n            err = addToMarketInternal(CToken(msg.sender), borrower);\n            if (err != Error.NO_ERROR) {\n                return uint256(err);\n            }\n\n            // it should be impossible to break the important invariant\n            assert(markets[cToken].accountMembership[borrower]);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint256(Error.PRICE_ERROR);\n        }\n\n        (err, , shortfall) = getHypotheticalAccountLiquidityInternal(\n            borrower,\n            CToken(cToken),\n            0,\n            borrowAmount\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        borrower;\n        borrowAmount;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        // Shh - currently unused\n        payer;\n        borrower;\n        repayAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 borrowerIndex\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        payer;\n        borrower;\n        actualRepayAmount;\n        borrowerIndex;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        // Shh - currently unused\n        liquidator;\n\n        if (\n            !markets[cTokenBorrowed].isListed ||\n            !markets[cTokenCollateral].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        /* The borrower must have shortfall in order to be liquidatable */\n        (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\n            borrower\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall == 0) {\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\n        }\n\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\n            borrower\n        );\n        (MathError mathErr, uint256 maxClose) = mulScalarTruncate(\n            Exp({mantissa: closeFactorMantissa}),\n            borrowBalance\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return uint256(Error.MATH_ERROR);\n        }\n        if (repayAmount > maxClose) {\n            return uint256(Error.TOO_MUCH_REPAY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenBorrowed;\n        cTokenCollateral;\n        liquidator;\n        borrower;\n        actualRepayAmount;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external view override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!seizeGuardianPaused, \"seize is paused\");\n\n        // Shh - currently unused\n        liquidator;\n        borrower;\n        seizeTokens;\n\n        if (\n            !markets[cTokenCollateral].isListed ||\n            !markets[cTokenBorrowed].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (\n            CToken(cTokenCollateral).comptroller() !=\n            CToken(cTokenBorrowed).comptroller()\n        ) {\n            return uint256(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenCollateral;\n        cTokenBorrowed;\n        liquidator;\n        borrower;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external view override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n        // Shh - currently unused\n        dst;\n\n        // *may include Policy Hook-type checks\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        return redeemAllowedInternal(cToken, src, transferTokens);\n    }\n\n    /**\n     * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        src;\n        dst;\n        transferTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            maxAssets = maxAssets;\n        }\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 sumCollateral;\n        uint256 sumBorrowPlusEffects;\n        uint256 cTokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToEther;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(address(0)),\n            0,\n            0\n        );\n\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account)\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        return\n            getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(cTokenModify),\n            redeemTokens,\n            borrowAmount\n        );\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint256 oErr;\n        MathError mErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint256 i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (\n                oErr,\n                vars.cTokenBalance,\n                vars.borrowBalance,\n                vars.exchangeRateMantissa\n            ) = asset.getAccountSnapshot(account);\n            if (oErr != 0) {\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({\n                mantissa: markets[address(asset)].collateralFactorMantissa\n            });\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            (mErr, vars.tokensToEther) = mulExp3(\n                vars.collateralFactor,\n                vars.exchangeRate,\n                vars.oraclePrice\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumCollateral += tokensToEther * cTokenBalance\n            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(\n                vars.tokensToEther,\n                vars.cTokenBalance,\n                vars.sumCollateral\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                vars.oraclePrice,\n                vars.borrowBalance,\n                vars.sumBorrowPlusEffects\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToEther * redeemTokens\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.tokensToEther,\n                    redeemTokens,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.oraclePrice,\n                    borrowAmount,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (\n                Error.NO_ERROR,\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\n                0\n            );\n        } else {\n            return (\n                Error.NO_ERROR,\n                0,\n                vars.sumBorrowPlusEffects - vars.sumCollateral\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 actualRepayAmount\n    ) external view override returns (uint256, uint256) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenBorrowed)\n        );\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenCollateral)\n        );\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint256(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\n        .exchangeRateStored(); // Note: reverts on error\n        uint256 seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n        MathError mathErr;\n\n        (mathErr, numerator) = mulExp(\n            liquidationIncentiveMantissa,\n            priceBorrowedMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, denominator) = mulExp(\n            priceCollateralMantissa,\n            exchangeRateMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, ratio) = divExp(numerator, denominator);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, seizeTokens) = mulScalarTruncate(ratio, actualRepayAmount);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        return (uint256(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\n                );\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the closeFactor used when liquidating borrows\n     * @dev Admin function to set closeFactor\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK\n                );\n        }\n\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param cToken The market to set the factor on\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCollateralFactor(\n        CToken cToken,\n        uint256 newCollateralFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\n                );\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return\n                fail(\n                    Error.MARKET_NOT_LISTED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\n                );\n        }\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.9\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_COLLATERAL_FACTOR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\n                );\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (\n            newCollateralFactorMantissa != 0 &&\n            oracle.getUnderlyingPrice(cToken) == 0\n        ) {\n            return\n                fail(\n                    Error.PRICE_ERROR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\n                );\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            cToken,\n            oldCollateralFactorMantissa,\n            newCollateralFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets maxAssets which controls how many markets can be entered\n     * @dev Admin function to set maxAssets\n     * @param newMaxAssets New max assets\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setMaxAssets(uint256 newMaxAssets) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_MAX_ASSETS_OWNER_CHECK\n                );\n        }\n\n        uint256 oldMaxAssets = maxAssets;\n        maxAssets = newMaxAssets;\n        emit NewMaxAssets(oldMaxAssets, newMaxAssets);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets liquidationIncentive\n     * @dev Admin function to set liquidationIncentive\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n                );\n        }\n\n        // Check de-scaled min <= newLiquidationIncentive <= max\n        Exp memory newLiquidationIncentive = Exp({\n            mantissa: newLiquidationIncentiveMantissa\n        });\n        Exp memory minLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMinMantissa\n        });\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        Exp memory maxLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMaxMantissa\n        });\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        // Save current value for use in log\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(\n            oldLiquidationIncentiveMantissa,\n            newLiquidationIncentiveMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param cToken The address of the market (token) to list\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _supportMarket(CToken cToken) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\n                );\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return\n                fail(\n                    Error.MARKET_ALREADY_LISTED,\n                    FailureInfo.SUPPORT_MARKET_EXISTS\n                );\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        Market storage market = markets[address(cToken)];\n        market.isListed = true;\n        market.isComped = false;\n        market.collateralFactorMantissa = 0;\n\n        emit MarketListed(cToken);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Admin function to change the Pause Guardian\n     * @param newPauseGuardian The address of the new Pause Guardian\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _setPauseGuardian(address newPauseGuardian)\n        public\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\n                );\n        }\n\n        // Save current value for inclusion in log\n        address oldPauseGuardian = pauseGuardian;\n\n        // Store pauseGuardian with value newPauseGuardian\n        pauseGuardian = newPauseGuardian;\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        mintGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Mint\", state);\n        return state;\n    }\n\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        borrowGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Borrow\", state);\n        return state;\n    }\n\n    function _setTransferPaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        transferGuardianPaused = state;\n        emit ActionPaused(\"Transfer\", state);\n        return state;\n    }\n\n    function _setSeizePaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        seizeGuardianPaused = state;\n        emit ActionPaused(\"Seize\", state);\n        return state;\n    }\n\n    function _become(Unitroller unitroller) public {\n        require(\n            msg.sender == unitroller.admin(),\n            \"only unitroller admin can change brains\"\n        );\n\n        uint256 changeStatus = unitroller._acceptImplementation();\n        require(changeStatus == 0, \"change not authorized\");\n    }\n}\n"
    },
    "contracts/ComptrollerG1.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\n\n/**\n * @title tropykus Comptroller Contract\n * @author tropykus\n * @dev This was the first version of the Comptroller brains.\n *  We keep it so our tests can continue to do the real-life behavior of upgrading from this logic forward.\n */\ncontract ComptrollerG1 is\n    ComptrollerV1Storage,\n    ComptrollerInterface,\n    ComptrollerErrorReporter,\n    Exponential\n{\n    struct Market {\n        /**\n         * @notice Whether or not this market is listed\n         */\n        bool isListed;\n        /**\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\n         *  Must be between 0 and 1, and stored as a mantissa.\n         */\n        uint256 collateralFactorMantissa;\n        /**\n         * @notice Per-market mapping of \"accounts in this asset\"\n         */\n        mapping(address => bool) accountMembership;\n    }\n\n    /**\n     * @notice Official mapping of cTokens -> Market metadata\n     * @dev Used e.g. to determine if a market is supported\n     */\n    mapping(address => Market) public markets;\n\n    /**\n     * @notice Emitted when an admin supports a market\n     */\n    event MarketListed(CToken cToken);\n\n    /**\n     * @notice Emitted when an account enters a market\n     */\n    event MarketEntered(CToken cToken, address account);\n\n    /**\n     * @notice Emitted when an account exits a market\n     */\n    event MarketExited(CToken cToken, address account);\n\n    /**\n     * @notice Emitted when close factor is changed by admin\n     */\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /**\n     * @notice Emitted when a collateral factor is changed by admin\n     */\n    event NewCollateralFactor(\n        CToken cToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /**\n     * @notice Emitted when liquidation incentive is changed by admin\n     */\n    event NewLiquidationIncentive(\n        uint256 oldLiquidationIncentiveMantissa,\n        uint256 newLiquidationIncentiveMantissa\n    );\n\n    /**\n     * @notice Emitted when maxAssets is changed by admin\n     */\n    event NewMaxAssets(uint256 oldMaxAssets, uint256 newMaxAssets);\n\n    /**\n     * @notice Emitted when price oracle is changed\n     */\n    event NewPriceOracle(\n        PriceOracle oldPriceOracle,\n        PriceOracle newPriceOracle\n    );\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 constant closeFactorMinMantissa = 5e16; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint256 constant closeFactorMaxMantissa = 9e17; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 constant collateralFactorMaxMantissa = 9e17; // 0.9\n\n    // liquidationIncentiveMantissa must be no less than this value\n    uint256 constant liquidationIncentiveMinMantissa = mantissaOne;\n\n    // liquidationIncentiveMantissa must be no greater than this value\n    uint256 constant liquidationIncentiveMaxMantissa = 15e17; // 1.5\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(address account)\n        external\n        view\n        returns (CToken[] memory)\n    {\n        CToken[] memory assetsIn = accountAssets[account];\n\n        return assetsIn;\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(address account, CToken cToken)\n        external\n        view\n        returns (bool)\n    {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(address[] memory cTokens)\n        public\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = cTokens.length;\n\n        uint256[] memory results = new uint256[](len);\n        for (uint256 i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n            Market storage marketToJoin = markets[address(cToken)];\n\n            if (!marketToJoin.isListed) {\n                // if market is not listed, cannot join move along\n                results[i] = uint256(Error.MARKET_NOT_LISTED);\n                continue;\n            }\n\n            if (marketToJoin.accountMembership[msg.sender] == true) {\n                // if already joined, move along\n                results[i] = uint256(Error.NO_ERROR);\n                continue;\n            }\n\n            if (accountAssets[msg.sender].length >= maxAssets) {\n                // if no space, cannot join, move along\n                results[i] = uint256(Error.TOO_MANY_ASSETS);\n                continue;\n            }\n\n            // survived the gauntlet, add to list\n            // NOTE: we store these somewhat redundantly as a significant optimization\n            //  this avoids having to iterate through the list for the most common use cases\n            //  that is, only when we need to perform liquidity checks\n            //   and not whenever we want to check if an account is in a particular market\n            marketToJoin.accountMembership[msg.sender] = true;\n            accountAssets[msg.sender].push(cToken);\n\n            emit MarketEntered(cToken, msg.sender);\n\n            results[i] = uint256(Error.NO_ERROR);\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing neccessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(address cTokenAddress)\n        external\n        override\n        returns (uint256)\n    {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\n        .getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return\n                fail(\n                    Error.NONZERO_BORROW_BALANCE,\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\n                );\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint256 allowed = redeemAllowedInternal(\n            cTokenAddress,\n            msg.sender,\n            tokensHeld\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.REJECTION,\n                    FailureInfo.EXIT_MARKET_REJECTION,\n                    allowed\n                );\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        accountAssets[msg.sender] = new CToken[](0);\n        CToken[] storage newMarketList = accountAssets[msg.sender];\n        uint256 len = userAssetList.length;\n        uint256 assetIndex = len;\n        for (uint256 i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                continue;\n            }\n            newMarketList.push(userAssetList[i]);\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    /**\n     * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external view override returns (uint256) {\n        minter; // currently unused\n        mintAmount; // currently unused\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param mintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 mintAmount,\n        uint256 mintTokens\n    ) external override {\n        cToken; // currently unused\n        minter; // currently unused\n        mintAmount; // currently unused\n        mintTokens; // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external view override returns (uint256) {\n        return redeemAllowedInternal(cToken, redeemer, redeemTokens);\n    }\n\n    function redeemAllowedInternal(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) internal view returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            redeemer,\n            CToken(cToken),\n            redeemTokens,\n            0\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external pure override {\n        cToken; // currently unused\n        redeemer; // currently unused\n        redeemAmount; // currently unused\n        redeemTokens; // currently unused\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"redeemTokens zero\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external view override returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            return uint256(Error.MARKET_NOT_ENTERED);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint256(Error.PRICE_ERROR);\n        }\n\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            borrower,\n            CToken(cToken),\n            0,\n            borrowAmount\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override {\n        cToken; // currently unused\n        borrower; // currently unused\n        borrowAmount; // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        payer; // currently unused\n        borrower; // currently unused\n        repayAmount; // currently unused\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount,\n        uint256 borrowerIndex\n    ) external override {\n        cToken; // currently unused\n        payer; // currently unused\n        borrower; // currently unused\n        repayAmount; // currently unused\n        borrowerIndex; // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        liquidator; // currently unused\n        borrower; // currently unused\n        repayAmount; // currently unused\n\n        if (\n            !markets[cTokenBorrowed].isListed ||\n            !markets[cTokenCollateral].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        /* The borrower must have shortfall in order to be liquidatable */\n        (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\n            borrower\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall == 0) {\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\n        }\n\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\n            borrower\n        );\n        (MathError mathErr, uint256 maxClose) = mulScalarTruncate(\n            Exp({mantissa: closeFactorMantissa}),\n            borrowBalance\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return uint256(Error.MATH_ERROR);\n        }\n        if (repayAmount > maxClose) {\n            return uint256(Error.TOO_MUCH_REPAY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        uint256 seizeTokens\n    ) external override {\n        cTokenBorrowed; // currently unused\n        cTokenCollateral; // currently unused\n        liquidator; // currently unused\n        borrower; // currently unused\n        repayAmount; // currently unused\n        seizeTokens; // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external view override returns (uint256) {\n        liquidator; // currently unused\n        borrower; // currently unused\n        seizeTokens; // currently unused\n\n        if (\n            !markets[cTokenCollateral].isListed ||\n            !markets[cTokenBorrowed].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (\n            CToken(cTokenCollateral).comptroller() !=\n            CToken(cTokenBorrowed).comptroller()\n        ) {\n            return uint256(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override {\n        cTokenCollateral; // currently unused\n        cTokenBorrowed; // currently unused\n        liquidator; // currently unused\n        borrower; // currently unused\n        seizeTokens; // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external view override returns (uint256) {\n        cToken; // currently unused\n        src; // currently unused\n        dst; // currently unused\n        transferTokens; // currently unused\n\n        // *may include Policy Hook-type checks\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        return redeemAllowedInternal(cToken, src, transferTokens);\n    }\n\n    /**\n     * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override {\n        cToken; // currently unused\n        src; // currently unused\n        dst; // currently unused\n        transferTokens; // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 sumCollateral;\n        uint256 sumBorrowPlusEffects;\n        uint256 cTokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToEther;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(address(0)),\n            0,\n            0\n        );\n\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account)\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        return\n            getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint256 oErr;\n        MathError mErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint256 i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (\n                oErr,\n                vars.cTokenBalance,\n                vars.borrowBalance,\n                vars.exchangeRateMantissa\n            ) = asset.getAccountSnapshot(account);\n            if (oErr != 0) {\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({\n                mantissa: markets[address(asset)].collateralFactorMantissa\n            });\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            (mErr, vars.tokensToEther) = mulExp3(\n                vars.collateralFactor,\n                vars.exchangeRate,\n                vars.oraclePrice\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumCollateral += tokensToEther * cTokenBalance\n            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(\n                vars.tokensToEther,\n                vars.cTokenBalance,\n                vars.sumCollateral\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                vars.oraclePrice,\n                vars.borrowBalance,\n                vars.sumBorrowPlusEffects\n            );\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToEther * redeemTokens\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.tokensToEther,\n                    redeemTokens,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\n                    vars.oraclePrice,\n                    borrowAmount,\n                    vars.sumBorrowPlusEffects\n                );\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (\n                Error.NO_ERROR,\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\n                0\n            );\n        } else {\n            return (\n                Error.NO_ERROR,\n                0,\n                vars.sumBorrowPlusEffects - vars.sumCollateral\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param repayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 repayAmount\n    ) external view override returns (uint256, uint256) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenBorrowed)\n        );\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenCollateral)\n        );\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint256(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = repayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = repayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\n        .exchangeRateStored(); // Note: reverts on error\n        uint256 seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n        MathError mathErr;\n\n        (mathErr, numerator) = mulExp(\n            liquidationIncentiveMantissa,\n            priceBorrowedMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, denominator) = mulExp(\n            priceCollateralMantissa,\n            exchangeRateMantissa\n        );\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, ratio) = divExp(numerator, denominator);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, seizeTokens) = mulScalarTruncate(ratio, repayAmount);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint256(Error.MATH_ERROR), 0);\n        }\n\n        return (uint256(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n        // Check caller is admin OR currently initialzing as new unitroller implementation\n        if (!adminOrInitializing()) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\n                );\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Ensure invoke newOracle.isPriceOracle() returns true\n        // require(newOracle.isPriceOracle(), \"oracle method isPriceOracle returned false\");\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the closeFactor used when liquidating borrows\n     * @dev Admin function to set closeFactor\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin OR currently initialzing as new unitroller implementation\n        if (!adminOrInitializing()) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK\n                );\n        }\n\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_CLOSE_FACTOR,\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\n                );\n        }\n\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param cToken The market to set the factor on\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCollateralFactor(\n        CToken cToken,\n        uint256 newCollateralFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\n                );\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return\n                fail(\n                    Error.MARKET_NOT_LISTED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\n                );\n        }\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.9\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_COLLATERAL_FACTOR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\n                );\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (\n            newCollateralFactorMantissa != 0 &&\n            oracle.getUnderlyingPrice(cToken) == 0\n        ) {\n            return\n                fail(\n                    Error.PRICE_ERROR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\n                );\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            cToken,\n            oldCollateralFactorMantissa,\n            newCollateralFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets maxAssets which controls how many markets can be entered\n     * @dev Admin function to set maxAssets\n     * @param newMaxAssets New max assets\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setMaxAssets(uint256 newMaxAssets) external returns (uint256) {\n        // Check caller is admin OR currently initialzing as new unitroller implementation\n        if (!adminOrInitializing()) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_MAX_ASSETS_OWNER_CHECK\n                );\n        }\n\n        uint256 oldMaxAssets = maxAssets;\n        maxAssets = newMaxAssets;\n        emit NewMaxAssets(oldMaxAssets, newMaxAssets);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets liquidationIncentive\n     * @dev Admin function to set liquidationIncentive\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin OR currently initialzing as new unitroller implementation\n        if (!adminOrInitializing()) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n                );\n        }\n\n        // Check de-scaled 1 <= newLiquidationDiscount <= 1.5\n        Exp memory newLiquidationIncentive = Exp({\n            mantissa: newLiquidationIncentiveMantissa\n        });\n        Exp memory minLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMinMantissa\n        });\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        Exp memory maxLiquidationIncentive = Exp({\n            mantissa: liquidationIncentiveMaxMantissa\n        });\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\n            return\n                fail(\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\n                );\n        }\n\n        // Save current value for use in log\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(\n            oldLiquidationIncentiveMantissa,\n            newLiquidationIncentiveMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param cToken The address of the market (token) to list\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _supportMarket(CToken cToken) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\n                );\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return\n                fail(\n                    Error.MARKET_ALREADY_LISTED,\n                    FailureInfo.SUPPORT_MARKET_EXISTS\n                );\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        Market storage market = markets[address(cToken)];\n        market.isListed = true;\n        market.collateralFactorMantissa = 0;\n\n        emit MarketListed(cToken);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _become(\n        Unitroller unitroller,\n        PriceOracle _oracle,\n        uint256 _closeFactorMantissa,\n        uint256 _maxAssets,\n        bool reinitializing\n    ) public virtual {\n        require(\n            msg.sender == unitroller.admin(),\n            \"only unitroller admin can change brains\"\n        );\n        uint256 changeStatus = unitroller._acceptImplementation();\n\n        require(changeStatus == 0, \"change not authorized\");\n\n        if (!reinitializing) {\n            ComptrollerG1 freshBrainedComptroller = ComptrollerG1(\n                address(unitroller)\n            );\n\n            // Ensure invoke _setPriceOracle() = 0\n            uint256 err = freshBrainedComptroller._setPriceOracle(_oracle);\n            require(err == uint256(Error.NO_ERROR), \"set price oracle error\");\n\n            // Ensure invoke _setCloseFactor() = 0\n            err = freshBrainedComptroller._setCloseFactor(_closeFactorMantissa);\n            require(err == uint256(Error.NO_ERROR), \"set close factor error\");\n\n            // Ensure invoke _setMaxAssets() = 0\n            err = freshBrainedComptroller._setMaxAssets(_maxAssets);\n            require(err == uint256(Error.NO_ERROR), \"set max asssets error\");\n\n            // Ensure invoke _setLiquidationIncentive(liquidationIncentiveMinMantissa) = 0\n            err = freshBrainedComptroller._setLiquidationIncentive(\n                liquidationIncentiveMinMantissa\n            );\n            require(\n                err == uint256(Error.NO_ERROR),\n                \"set liquidation incentive error\"\n            );\n        }\n    }\n\n    /**\n     * @dev Check that caller is admin or this contract is initializing itself as\n     * the new implementation.\n     * There should be no way to satisfy msg.sender == comptrollerImplementaiton\n     * without tx.origin also being admin, but both are included for extra safety\n     */\n    function adminOrInitializing() internal view returns (bool) {\n        bool initializing = (msg.sender == comptrollerImplementation &&\n            tx.origin == admin);\n        //solium-disable-previous-line security/no-tx-origin\n        bool isAdmin = msg.sender == admin;\n        return isAdmin || initializing;\n    }\n}\n"
    },
    "contracts/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\nimport \"./Governance/TROP.sol\";\n\n/**\n * @title tropykus Comptroller Contract\n * @author tropykus\n */\ncontract Comptroller is\n    ComptrollerV5Storage,\n    ComptrollerInterface,\n    ComptrollerErrorReporter,\n    ExponentialNoError\n{\n    /// @notice Emitted when an admin supports a market\n    event MarketListed(CToken cToken);\n\n    /// @notice Emitted when an account enters a market\n    event MarketEntered(CToken cToken, address account);\n\n    /// @notice Emitted when an account exits a market\n    event MarketExited(CToken cToken, address account);\n\n    /// @notice Emitted when close factor is changed by admin\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /// @notice Emitted when a collateral factor is changed by admin\n    event NewCollateralFactor(\n        CToken cToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /// @notice Emitted when liquidation incentive is changed by admin\n    event NewLiquidationIncentive(\n        uint256 oldLiquidationIncentiveMantissa,\n        uint256 newLiquidationIncentiveMantissa\n    );\n\n    /// @notice Emitted when price oracle is changed\n    event NewPriceOracle(\n        PriceOracle oldPriceOracle,\n        PriceOracle newPriceOracle\n    );\n\n    /// @notice Emitted when pause guardian is changed\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n    /// @notice Emitted when an action is paused globally\n    event ActionPaused(string action, bool pauseState);\n\n    /// @notice Emitted when an action is paused on a market\n    event ActionPaused(CToken cToken, string action, bool pauseState);\n\n    /// @notice Emitted when a new COMP speed is calculated for a market\n    event CompSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\n\n    /// @notice Emitted when a new COMP speed is set for a contributor\n    event ContributorCompSpeedUpdated(\n        address indexed contributor,\n        uint256 newSpeed\n    );\n\n    /// @notice Emitted when COMP is distributed to a supplier\n    event DistributedSupplierComp(\n        CToken indexed cToken,\n        address indexed supplier,\n        uint256 compDelta,\n        uint256 compSupplyIndex\n    );\n\n    /// @notice Emitted when COMP is distributed to a borrower\n    event DistributedBorrowerComp(\n        CToken indexed cToken,\n        address indexed borrower,\n        uint256 compDelta,\n        uint256 compBorrowIndex\n    );\n\n    /// @notice Emitted when borrow cap for a cToken is changed\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\n\n    /// @notice Emitted when borrow cap guardian is changed\n    event NewBorrowCapGuardian(\n        address oldBorrowCapGuardian,\n        address newBorrowCapGuardian\n    );\n\n    /// @notice Emitted when COMP is granted by admin\n    event CompGranted(address recipient, uint256 amount);\n\n    /// @notice The initial COMP index for a market\n    uint224 public constant compInitialIndex = 1e36;\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(address account)\n        external\n        view\n        returns (CToken[] memory)\n    {\n        return accountAssets[account];\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(address account, CToken cToken)\n        external\n        view\n        returns (bool)\n    {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(address[] memory cTokens)\n        public\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = cTokens.length;\n\n        uint256[] memory results = new uint256[](len);\n        for (uint256 i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n     * @param cToken The market to enter\n     * @param borrower The address of the account to modify\n     * @return Success indicator for whether the market was entered\n     */\n    function addToMarketInternal(CToken cToken, address borrower)\n        internal\n        returns (Error)\n    {\n        Market storage marketToJoin = markets[address(cToken)];\n\n        if (!marketToJoin.isListed) {\n            // market is not listed, cannot join\n            return Error.MARKET_NOT_LISTED;\n        }\n\n        if (marketToJoin.accountMembership[borrower] == true) {\n            // already joined\n            return Error.NO_ERROR;\n        }\n\n        // survived the gauntlet, add to list\n        // NOTE: we store these somewhat redundantly as a significant optimization\n        //  this avoids having to iterate through the list for the most common use cases\n        //  that is, only when we need to perform liquidity checks\n        //  and not whenever we want to check if an account is in a particular market\n        marketToJoin.accountMembership[borrower] = true;\n        accountAssets[borrower].push(cToken);\n\n        emit MarketEntered(cToken, borrower);\n\n        return Error.NO_ERROR;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing necessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(address cTokenAddress)\n        external\n        override\n        returns (uint256)\n    {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\n        .getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return\n                fail(\n                    Error.NONZERO_BORROW_BALANCE,\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\n                );\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint256 allowed = redeemAllowedInternal(\n            cTokenAddress,\n            msg.sender,\n            tokensHeld\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.REJECTION,\n                    FailureInfo.EXIT_MARKET_REJECTION,\n                    allowed\n                );\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        accountAssets[msg.sender] = new CToken[](0);\n        CToken[] storage newMarketList = accountAssets[msg.sender];\n        uint256 len = userAssetList.length;\n        uint256 assetIndex = len;\n        for (uint256 i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                continue;\n            }\n            newMarketList.push(userAssetList[i]);\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    // /**\n    //  * @notice Checks if the account should be allowed to mint tokens in the given market\n    //  * @param cToken The market to verify the mint against\n    //  * @param minter The account which would get the minted tokens\n    //  * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n    //  * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n    //  */\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256\n    ) external override returns (uint256) {\n        // Shh - currently unused mintAmount\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!mintGuardianPaused[cToken], \"mint is paused\");\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, minter);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    // /**\n    //  * @notice Validates mint and reverts on rejection. May emit logs.\n    //  * @param cToken Asset being minted\n    //  * @param minter The address minting the tokens\n    //  * @param actualMintAmount The amount of the underlying asset being minted\n    //  * @param mintTokens The number of tokens being minted\n    //  */\n    function mintVerify(\n        address,\n        address,\n        uint256,\n        uint256\n    ) external override {\n        // Shh - we don't ever want this hook to be marked pure\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external override returns (uint256) {\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, redeemer);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function redeemAllowedInternal(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) internal view returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            redeemer,\n            CToken(cToken),\n            redeemTokens,\n            0\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    // /**\n    //  * @notice Validates redeem and reverts on rejection. May emit logs.\n    //  * @param cToken Asset being redeemed\n    //  * @param redeemer The address redeeming the tokens\n    //  * @param redeemAmount The amount of the underlying asset being redeemed\n    //  * @param redeemTokens The number of tokens being redeemed\n    //  */\n    function redeemVerify(\n        address,\n        address,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external pure override {\n        // Shh - currently unused  cToken,  redeemer\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"redeemTokens zero\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        Error err;\n        uint256 shortfall;\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            // only cTokens may call borrowAllowed if borrower not in market\n            require(msg.sender == cToken, \"sender not cToken\");\n\n            // attempt to add borrower to the market\n            err = addToMarketInternal(CToken(msg.sender), borrower);\n            if (err != Error.NO_ERROR) {\n                return uint256(err);\n            }\n\n            // it should be impossible to break the important invariant\n            assert(markets[cToken].accountMembership[borrower]);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint256(Error.PRICE_ERROR);\n        }\n\n        uint256 borrowCap = borrowCaps[cToken];\n        // Borrow cap of 0 corresponds to unlimited borrowing\n        if (borrowCap != 0) {\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\n            uint256 nextTotalBorrows = add_(totalBorrows, borrowAmount);\n            require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\n        }\n\n        (err, , shortfall) = getHypotheticalAccountLiquidityInternal(\n            borrower,\n            CToken(cToken),\n            0,\n            borrowAmount\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    // /**\n    //  * @notice Validates borrow and reverts on rejection. May emit logs. Currently unused\n    //  * @param cToken Asset whose underlying is being borrowed\n    //  * @param borrower The address borrowing the underlying\n    //  * @param borrowAmount The amount of the underlying asset requested to borrow\n    //  */\n    function borrowVerify(\n        address,\n        address,\n        uint256\n    ) external override {\n        // Shh - currently unused\n        // Shh - we don't ever want this hook to be marked pure\n    }\n\n    // /**\n    //  * @notice Checks if the account should be allowed to repay a borrow in the given market\n    //  * @param cToken The market to verify the repay against\n    //  * @param payer The account which would repay the asset\n    //  * @param borrower The account which would borrowed the asset\n    //  * @param repayAmount The amount of the underlying asset the account would repay\n    //  * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n    //  */\n    function repayBorrowAllowed(\n        address cToken,\n        address,\n        address borrower,\n        uint256\n    ) external override returns (uint256) {\n        // Shh - currently unused payer, repayAmount\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n        updateCompBorrowIndex(cToken, borrowIndex);\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    // /**\n    //  * @notice Validates repayBorrow and reverts on rejection. May emit logs. Currently unused\n    //  * @param cToken Asset being repaid\n    //  * @param payer The address repaying the borrow\n    //  * @param borrower The address of the borrower\n    //  * @param actualRepayAmount The amount of underlying being repaid\n    //  */\n    function repayBorrowVerify(\n        address,\n        address,\n        address,\n        uint256,\n        uint256\n    ) external override {\n        // Shh - currently unused\n        // Shh - we don't ever want this hook to be marked pure\n    }\n\n    // /**\n    //  * @notice Checks if the liquidation should be allowed to occur\n    //  * @param cTokenBorrowed Asset which was borrowed by the borrower\n    //  * @param cTokenCollateral Asset which was used as collateral and will be seized\n    //  * @param liquidator The address repaying the borrow and seizing the collateral\n    //  * @param borrower The address of the borrower\n    //  * @param repayAmount The amount of underlying being repaid\n    //  */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address,\n        address borrower,\n        uint256 repayAmount\n    ) external view override returns (uint256) {\n        // Shh - currently unused liquidator\n\n        if (\n            !markets[cTokenBorrowed].isListed ||\n            !markets[cTokenCollateral].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* The borrower must have shortfall in order to be liquidatable */\n        (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\n            borrower\n        );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall == 0) {\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\n        }\n\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\n            borrower\n        );\n        uint256 maxClose = mul_ScalarTruncate(\n            Exp({mantissa: closeFactorMantissa}),\n            borrowBalance\n        );\n        if (repayAmount > maxClose) {\n            return uint256(Error.TOO_MUCH_REPAY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    // /**\n    //  * @notice Validates liquidateBorrow and reverts on rejection. May emit logs. Currently unused\n    //  * @param cTokenBorrowed Asset which was borrowed by the borrower\n    //  * @param cTokenCollateral Asset which was used as collateral and will be seized\n    //  * @param liquidator The address repaying the borrow and seizing the collateral\n    //  * @param borrower The address of the borrower\n    //  * @param actualRepayAmount The amount of underlying being repaid\n    //  */\n    function liquidateBorrowVerify(\n        address,\n        address,\n        address,\n        address,\n        uint256,\n        uint256\n    ) external override {\n        // Shh - currently unused\n        // Shh - we don't ever want this hook to be marked pure\n    }\n\n    // /**\n    //  * @notice Checks if the seizing of assets should be allowed to occur\n    //  * @param cTokenCollateral Asset which was used as collateral and will be seized\n    //  * @param cTokenBorrowed Asset which was borrowed by the borrower\n    //  * @param liquidator The address repaying the borrow and seizing the collateral\n    //  * @param borrower The address of the borrower\n    //  * @param seizeTokens The number of collateral tokens to seize\n    //  */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!seizeGuardianPaused, \"seize is paused\");\n\n        // Shh - currently unused seizeTokens;\n\n        if (\n            !markets[cTokenCollateral].isListed ||\n            !markets[cTokenBorrowed].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (\n            CToken(cTokenCollateral).comptroller() !=\n            CToken(cTokenBorrowed).comptroller()\n        ) {\n            return uint256(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cTokenCollateral);\n        distributeSupplierComp(cTokenCollateral, borrower);\n        distributeSupplierComp(cTokenCollateral, liquidator);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    // /**\n    //  * @notice Validates seize and reverts on rejection. May emit logs. Currently unused\n    //  * @param cTokenCollateral Asset which was used as collateral and will be seized\n    //  * @param cTokenBorrowed Asset which was borrowed by the borrower\n    //  * @param liquidator The address repaying the borrow and seizing the collateral\n    //  * @param borrower The address of the borrower\n    //  * @param seizeTokens The number of collateral tokens to seize\n    //  */\n    function seizeVerify(\n        address,\n        address,\n        address,\n        address,\n        uint256\n    ) external override {\n        // Shh - currently unused\n        // Shh - we don't ever want this hook to be marked pure\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, src);\n        distributeSupplierComp(cToken, dst);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    // /**\n    //  * @notice Validates transfer and reverts on rejection. May emit logs. Currently unused\n    //  * @param cToken Asset being transferred\n    //  * @param src The account which sources the tokens\n    //  * @param dst The account which receives the tokens\n    //  * @param transferTokens The number of cTokens to transfer\n    //  */\n    function transferVerify(\n        address,\n        address,\n        address,\n        uint256\n    ) external override {\n        // Shh - currently unused\n        // Shh - we don't ever want this hook to be marked pure\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 sumCollateral;\n        uint256 sumBorrowPlusEffects;\n        uint256 cTokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToDenom;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(address(0)),\n            0,\n            0\n        );\n\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account)\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        return\n            getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n            account,\n            CToken(cTokenModify),\n            redeemTokens,\n            borrowAmount\n        );\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n        )\n    {\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint256 oErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint256 i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (\n                oErr,\n                vars.cTokenBalance,\n                vars.borrowBalance,\n                vars.exchangeRateMantissa\n            ) = asset.getAccountSnapshot(account);\n            if (oErr != 0) {\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({\n                mantissa: markets[address(asset)].collateralFactorMantissa\n            });\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            vars.tokensToDenom = mul_(\n                mul_(vars.collateralFactor, vars.exchangeRate),\n                vars.oraclePrice\n            );\n\n            // sumCollateral += tokensToDenom * cTokenBalance\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\n                vars.tokensToDenom,\n                vars.cTokenBalance,\n                vars.sumCollateral\n            );\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                vars.oraclePrice,\n                vars.borrowBalance,\n                vars.sumBorrowPlusEffects\n            );\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                    vars.tokensToDenom,\n                    redeemTokens,\n                    vars.sumBorrowPlusEffects\n                );\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                    vars.oraclePrice,\n                    borrowAmount,\n                    vars.sumBorrowPlusEffects\n                );\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (\n                Error.NO_ERROR,\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\n                0\n            );\n        } else {\n            return (\n                Error.NO_ERROR,\n                0,\n                vars.sumBorrowPlusEffects - vars.sumCollateral\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 actualRepayAmount\n    ) external view override returns (uint256, uint256) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenBorrowed)\n        );\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenCollateral)\n        );\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint256(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\n        .exchangeRateStored(); // Note: reverts on error\n        uint256 seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n\n        numerator = mul_(\n            Exp({mantissa: liquidationIncentiveMantissa}),\n            Exp({mantissa: priceBorrowedMantissa})\n        );\n        denominator = mul_(\n            Exp({mantissa: priceCollateralMantissa}),\n            Exp({mantissa: exchangeRateMantissa})\n        );\n        ratio = div_(numerator, denominator);\n\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\n\n        return (uint256(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\n                );\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the closeFactor used when liquidating borrows\n     * @dev Admin function to set closeFactor\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure\n     */\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        require(msg.sender == admin, \"only admin can set close factor\");\n\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param cToken The market to set the factor on\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCollateralFactor(\n        CToken cToken,\n        uint256 newCollateralFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\n                );\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return\n                fail(\n                    Error.MARKET_NOT_LISTED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\n                );\n        }\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.9\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_COLLATERAL_FACTOR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\n                );\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (\n            newCollateralFactorMantissa != 0 &&\n            oracle.getUnderlyingPrice(cToken) == 0\n        ) {\n            return\n                fail(\n                    Error.PRICE_ERROR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\n                );\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            cToken,\n            oldCollateralFactorMantissa,\n            newCollateralFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets liquidationIncentive\n     * @dev Admin function to set liquidationIncentive\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\n        external\n        returns (uint256)\n    {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n                );\n        }\n\n        // Save current value for use in log\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(\n            oldLiquidationIncentiveMantissa,\n            newLiquidationIncentiveMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param cToken The address of the market (token) to list\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _supportMarket(CToken cToken) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\n                );\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return\n                fail(\n                    Error.MARKET_ALREADY_LISTED,\n                    FailureInfo.SUPPORT_MARKET_EXISTS\n                );\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        // Note that isComped is not in active use anymore\n        Market storage market = markets[address(cToken)];\n        market.isListed = true;\n        market.isComped = false;\n        market.collateralFactorMantissa = 0;\n\n        _addMarketInternal(address(cToken));\n\n        emit MarketListed(cToken);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _addMarketInternal(address cToken) internal {\n        for (uint256 i = 0; i < allMarkets.length; i++) {\n            require(allMarkets[i] != CToken(cToken), \"market already added\");\n        }\n        allMarkets.push(CToken(cToken));\n    }\n\n    /**\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n     */\n    function _setMarketBorrowCaps(\n        CToken[] calldata cTokens,\n        uint256[] calldata newBorrowCaps\n    ) external {\n        require(\n            msg.sender == admin || msg.sender == borrowCapGuardian,\n            \"only admin or guardian\"\n        );\n\n        uint256 numMarkets = cTokens.length;\n        uint256 numBorrowCaps = newBorrowCaps.length;\n\n        require(\n            numMarkets != 0 && numMarkets == numBorrowCaps,\n            \"invalid input\"\n        );\n\n        for (uint256 i = 0; i < numMarkets; i++) {\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\n        }\n    }\n\n    /**\n     * @notice Admin function to change the Borrow Cap Guardian\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\n     */\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\n        require(msg.sender == admin, \"only admin can set guardian\");\n\n        // Save current value for inclusion in log\n        address oldBorrowCapGuardian = borrowCapGuardian;\n\n        // Store borrowCapGuardian with value newBorrowCapGuardian\n        borrowCapGuardian = newBorrowCapGuardian;\n\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n    }\n\n    /**\n     * @notice Admin function to change the Pause Guardian\n     * @param newPauseGuardian The address of the new Pause Guardian\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _setPauseGuardian(address newPauseGuardian)\n        public\n        returns (uint256)\n    {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\n                );\n        }\n\n        // Save current value for inclusion in log\n        address oldPauseGuardian = pauseGuardian;\n\n        // Store pauseGuardian with value newPauseGuardian\n        pauseGuardian = newPauseGuardian;\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n        require(markets[address(cToken)].isListed, \"market not listed\");\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        mintGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Mint\", state);\n        return state;\n    }\n\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n        require(markets[address(cToken)].isListed, \"market is not listed\");\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        borrowGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Borrow\", state);\n        return state;\n    }\n\n    function _setTransferPaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        transferGuardianPaused = state;\n        emit ActionPaused(\"Transfer\", state);\n        return state;\n    }\n\n    function _setSeizePaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        seizeGuardianPaused = state;\n        emit ActionPaused(\"Seize\", state);\n        return state;\n    }\n\n    function _become(Unitroller unitroller) public {\n        require(\n            msg.sender == unitroller.admin(),\n            \"only unitroller admin can become\"\n        );\n        require(\n            unitroller._acceptImplementation() == 0,\n            \"change not authorized\"\n        );\n    }\n\n    /**\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\n     */\n    function adminOrInitializing() internal view returns (bool) {\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\n    }\n\n    /*** TROP Distribution ***/\n\n    /**\n     * @notice Set COMP speed for a single market\n     * @param cToken The market whose COMP speed to update\n     * @param compSpeed New COMP speed for market\n     */\n    function setCompSpeedInternal(CToken cToken, uint256 compSpeed) internal {\n        uint256 currentCompSpeed = compSpeeds[address(cToken)];\n        if (currentCompSpeed != 0) {\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n            updateCompSupplyIndex(address(cToken));\n            updateCompBorrowIndex(address(cToken), borrowIndex);\n        } else if (compSpeed != 0) {\n            // Add the COMP market\n            Market storage market = markets[address(cToken)];\n            require(market.isListed == true, \"comp market is not listed\");\n\n            if (\n                compSupplyState[address(cToken)].index == 0 &&\n                compSupplyState[address(cToken)].block == 0\n            ) {\n                compSupplyState[address(cToken)] = CompMarketState({\n                    index: compInitialIndex,\n                    block: safe32(\n                        getBlockNumber(),\n                        \"block number exceeds 32 bits\"\n                    )\n                });\n            }\n\n            if (\n                compBorrowState[address(cToken)].index == 0 &&\n                compBorrowState[address(cToken)].block == 0\n            ) {\n                compBorrowState[address(cToken)] = CompMarketState({\n                    index: compInitialIndex,\n                    block: safe32(\n                        getBlockNumber(),\n                        \"block number exceeds 32 bits\"\n                    )\n                });\n            }\n        }\n\n        if (currentCompSpeed != compSpeed) {\n            compSpeeds[address(cToken)] = compSpeed;\n            emit CompSpeedUpdated(cToken, compSpeed);\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the supply index\n     * @param cToken The market whose supply index to update\n     */\n    function updateCompSupplyIndex(address cToken) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        uint256 supplySpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(supplyState.block));\n        if (deltaBlocks > 0 && supplySpeed > 0) {\n            uint256 supplyTokens = CToken(cToken).totalSupply();\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\n            Double memory ratio = supplyTokens > 0\n                ? fraction(compAccrued, supplyTokens)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: supplyState.index}),\n                ratio\n            );\n            compSupplyState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"index exceeds 224 bits\"),\n                block: safe32(blockNumber, \"block exceeds 32 bits\")\n            });\n        } else if (deltaBlocks > 0) {\n            supplyState.block = safe32(blockNumber, \"block exceeds 32 bits\");\n        }\n    }\n\n    /**\n     * @notice Accrue COMP to the market by updating the borrow index\n     * @param cToken The market whose borrow index to update\n     */\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex)\n        internal\n    {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        uint256 borrowSpeed = compSpeeds[cToken];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(blockNumber, uint256(borrowState.block));\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\n            uint256 borrowAmount = div_(\n                CToken(cToken).totalBorrows(),\n                marketBorrowIndex\n            );\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\n            Double memory ratio = borrowAmount > 0\n                ? fraction(compAccrued, borrowAmount)\n                : Double({mantissa: 0});\n            Double memory index = add_(\n                Double({mantissa: borrowState.index}),\n                ratio\n            );\n            compBorrowState[cToken] = CompMarketState({\n                index: safe224(index.mantissa, \"index exceeds 224 bits\"),\n                block: safe32(blockNumber, \"block exceeds 32 bits\")\n            });\n        } else if (deltaBlocks > 0) {\n            borrowState.block = safe32(blockNumber, \"block exceeds 32 bits\");\n        }\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\n     * @param cToken The market in which the supplier is interacting\n     * @param supplier The address of the supplier to distribute COMP to\n     */\n    function distributeSupplierComp(address cToken, address supplier) internal {\n        CompMarketState storage supplyState = compSupplyState[cToken];\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\n        Double memory supplierIndex = Double({\n            mantissa: compSupplierIndex[cToken][supplier]\n        });\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\n\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n            supplierIndex.mantissa = compInitialIndex;\n        }\n\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\n        compAccrued[supplier] = supplierAccrued;\n        emit DistributedSupplierComp(\n            CToken(cToken),\n            supplier,\n            supplierDelta,\n            supplyIndex.mantissa\n        );\n    }\n\n    /**\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n     * @param cToken The market in which the borrower is interacting\n     * @param borrower The address of the borrower to distribute COMP to\n     */\n    function distributeBorrowerComp(\n        address cToken,\n        address borrower,\n        Exp memory marketBorrowIndex\n    ) internal {\n        CompMarketState storage borrowState = compBorrowState[cToken];\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\n        Double memory borrowerIndex = Double({\n            mantissa: compBorrowerIndex[cToken][borrower]\n        });\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\n\n        if (borrowerIndex.mantissa > 0) {\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\n            uint256 borrowerAmount = div_(\n                CToken(cToken).borrowBalanceStored(borrower),\n                marketBorrowIndex\n            );\n            uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\n            uint256 borrowerAccrued = add_(\n                compAccrued[borrower],\n                borrowerDelta\n            );\n            compAccrued[borrower] = borrowerAccrued;\n            emit DistributedBorrowerComp(\n                CToken(cToken),\n                borrower,\n                borrowerDelta,\n                borrowIndex.mantissa\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\n     * @param contributor The address to calculate contributor rewards for\n     */\n    function updateContributorRewards(address contributor) public {\n        uint256 compSpeed = compContributorSpeeds[contributor];\n        uint256 blockNumber = getBlockNumber();\n        uint256 deltaBlocks = sub_(\n            blockNumber,\n            lastContributorBlock[contributor]\n        );\n        if (deltaBlocks > 0 && compSpeed > 0) {\n            uint256 newAccrued = mul_(deltaBlocks, compSpeed);\n            uint256 contributorAccrued = add_(\n                compAccrued[contributor],\n                newAccrued\n            );\n\n            compAccrued[contributor] = contributorAccrued;\n            lastContributorBlock[contributor] = blockNumber;\n        }\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in all markets\n     * @param holder The address to claim COMP for\n     */\n    function claimComp(address holder) public {\n        return claimComp(holder, allMarkets);\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in the specified markets\n     * @param holder The address to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     */\n    function claimComp(address holder, CToken[] memory cTokens) public {\n        address[] memory holders = new address[](1);\n        holders[0] = holder;\n        claimComp(holders, cTokens, true, true);\n    }\n\n    /**\n     * @notice Claim all comp accrued by the holders\n     * @param holders The addresses to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     * @param borrowers Whether or not to claim COMP earned by borrowing\n     * @param suppliers Whether or not to claim COMP earned by supplying\n     */\n    function claimComp(\n        address[] memory holders,\n        CToken[] memory cTokens,\n        bool borrowers,\n        bool suppliers\n    ) public {\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            CToken cToken = cTokens[i];\n            require(markets[address(cToken)].isListed, \"market must be listed\");\n            if (borrowers == true) {\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\n                updateCompBorrowIndex(address(cToken), borrowIndex);\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeBorrowerComp(\n                        address(cToken),\n                        holders[j],\n                        borrowIndex\n                    );\n                    compAccrued[holders[j]] = grantCompInternal(\n                        holders[j],\n                        compAccrued[holders[j]]\n                    );\n                }\n            }\n            if (suppliers == true) {\n                updateCompSupplyIndex(address(cToken));\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeSupplierComp(address(cToken), holders[j]);\n                    compAccrued[holders[j]] = grantCompInternal(\n                        holders[j],\n                        compAccrued[holders[j]]\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Transfer TROP to the user\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\n     * @param user The address of the user to transfer COMP to\n     * @param amount The amount of COMP to (possibly) transfer\n     * @return The amount of COMP which was NOT transferred to the user\n     */\n    function grantCompInternal(address user, uint256 amount)\n        internal\n        returns (uint256)\n    {\n        TROP comp = TROP(getCompAddress());\n        uint256 compRemaining = comp.balanceOf(address(this));\n        if (amount > 0 && amount <= compRemaining) {\n            comp.transfer(user, amount);\n            return 0;\n        }\n        return amount;\n    }\n\n    /*** TROP Distribution Admin ***/\n\n    /**\n     * @notice Transfer COMP to the recipient\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\n     * @param recipient The address of the recipient to transfer COMP to\n     * @param amount The amount of COMP to (possibly) transfer\n     */\n    function _grantComp(address recipient, uint256 amount) public {\n        require(adminOrInitializing(), \"only admin can grant comp\");\n        uint256 amountLeft = grantCompInternal(recipient, amount);\n        require(amountLeft == 0, \"insufficient comp for grant\");\n        emit CompGranted(recipient, amount);\n    }\n\n    /**\n     * @notice Set COMP speed for a single market\n     * @param cToken The market whose COMP speed to update\n     * @param compSpeed New COMP speed for market\n     */\n    function _setCompSpeed(CToken cToken, uint256 compSpeed) public {\n        require(adminOrInitializing(), \"only admin can set comp speed\");\n        setCompSpeedInternal(cToken, compSpeed);\n    }\n\n    /**\n     * @notice Set COMP speed for a single contributor\n     * @param contributor The contributor whose COMP speed to update\n     * @param compSpeed New COMP speed for contributor\n     */\n    function _setContributorCompSpeed(address contributor, uint256 compSpeed)\n        public\n    {\n        require(adminOrInitializing(), \"only admin can set comp speed\");\n\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\n        updateContributorRewards(contributor);\n        if (compSpeed == 0) {\n            // release storage\n            delete lastContributorBlock[contributor];\n        } else {\n            lastContributorBlock[contributor] = getBlockNumber();\n        }\n        compContributorSpeeds[contributor] = compSpeed;\n\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\n    }\n\n    /**\n     * @notice Return all of the markets\n     * @dev The automatic getter may be used to access an individual market.\n     * @return The list of market addresses\n     */\n    function getAllMarkets() public view returns (CToken[] memory) {\n        return allMarkets;\n    }\n\n    function getBlockNumber() public view virtual returns (uint256) {\n        return block.number;\n    }\n\n    /**\n     * @notice Set the address of the TROP token\n     */\n    function setCompAddress(address tropAddress_) public virtual {\n        require(msg.sender == admin, \"only admin can set TROP\");\n        tropAddress = tropAddress_;\n    }\n\n    /**\n     * @notice Return the address of the TROP token\n     * @return The address of TROP\n     */\n    function getCompAddress() public view virtual returns (address) {\n        return tropAddress;\n    }\n}\n"
    },
    "contracts/Whitelist.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./WhitelistInterface.sol\";\n\ncontract Whitelist is WhitelistInterface {\n    bool public override enabled;\n    address owner;\n    mapping(address => bool) public override exist;\n    address[] users;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n        enabled = true;\n    }\n\n    function setStatus(bool _newStatus) external override onlyOwner {\n        enabled = _newStatus;\n    }\n\n    function addUsers(address[] memory _users) external override onlyOwner {\n        for (uint256 i = 0; i < _users.length; i++) {\n            if (exist[_users[i]]) continue;\n            users.push(_users[i]);\n            exist[_users[i]] = true;\n        }\n    }\n\n    function getUsers()\n        external\n        view\n        override\n        returns (address[] memory currentUsers)\n    {\n        currentUsers = users;\n    }\n\n    function removeUser(address _user) external override onlyOwner {\n        if (exist[_user]) {\n            exist[_user] = false;\n            address[] memory oldUsers = users;\n            users = new address[](0);\n            for (uint256 i = 0; i < oldUsers.length; i++) {\n                if (oldUsers[i] == _user) continue;\n                users.push(oldUsers[i]);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Timelock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./SafeMath.sol\";\n\ncontract Timelock {\n    using SafeMath for uint256;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant MINIMUM_DELAY = 2 days;\n    uint256 public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint256 public delay;\n\n    mapping(bytes32 => bool) public queuedTransactions;\n\n    constructor(address admin_, uint256 delay_) {\n        require(\n            delay_ >= MINIMUM_DELAY,\n            \"Timelock::constructor: Delay must exceed minimum delay.\"\n        );\n        require(\n            delay_ <= MAXIMUM_DELAY,\n            \"Timelock::setDelay: Delay must not exceed maximum delay.\"\n        );\n\n        admin = admin_;\n        delay = delay_;\n    }\n\n    fallback() external payable {}\n\n    receive() external payable {}\n\n    function setDelay(uint256 delay_) public {\n        require(\n            msg.sender == address(this),\n            \"Timelock::setDelay: Call must come from Timelock.\"\n        );\n        require(\n            delay_ >= MINIMUM_DELAY,\n            \"Timelock::setDelay: Delay must exceed minimum delay.\"\n        );\n        require(\n            delay_ <= MAXIMUM_DELAY,\n            \"Timelock::setDelay: Delay must not exceed maximum delay.\"\n        );\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(\n            msg.sender == pendingAdmin,\n            \"Timelock::acceptAdmin: Call must come from pendingAdmin.\"\n        );\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        require(\n            msg.sender == address(this),\n            \"Timelock::setPendingAdmin: Call must come from Timelock.\"\n        );\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public returns (bytes32) {\n        require(\n            msg.sender == admin,\n            \"Timelock::queueTransaction: Call must come from admin.\"\n        );\n        require(\n            eta >= getBlockTimestamp().add(delay),\n            \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public {\n        require(\n            msg.sender == admin,\n            \"Timelock::cancelTransaction: Call must come from admin.\"\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public payable returns (bytes memory) {\n        require(\n            msg.sender == admin,\n            \"Timelock::executeTransaction: Call must come from admin.\"\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        require(\n            queuedTransactions[txHash],\n            \"Timelock::executeTransaction: Transaction hasn't been queued.\"\n        );\n        require(\n            getBlockTimestamp() >= eta,\n            \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\n        );\n        require(\n            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\n            \"Timelock::executeTransaction: Transaction is stale.\"\n        );\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(\n                bytes4(keccak256(bytes(signature))),\n                data\n            );\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value: value}(\n            callData\n        );\n        require(\n            success,\n            \"Timelock::executeTransaction: Transaction execution reverted.\"\n        );\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint256) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.6;\n\nimport \"./SafeMath.sol\";\n\ninterface ERC20Base {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    function balanceOf(address who) external view returns (uint256);\n}\n\nabstract contract ERC20 is ERC20Base {\n    function transfer(address to, uint256 value)\n        external\n        virtual\n        returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external virtual returns (bool);\n}\n\nabstract contract ERC20NS is ERC20Base {\n    function transfer(address to, uint256 value) external virtual;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external virtual;\n}\n\n/**\n * @title Standard ERC20 token\n * @dev Implementation of the basic standard token.\n *  See https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public override totalSupply;\n    mapping(address => mapping(address => uint256)) public override allowance;\n    mapping(address => uint256) public override balanceOf;\n\n    constructor(\n        uint256 _initialAmount,\n        string memory _tokenName,\n        uint8 _decimalUnits,\n        string memory _tokenSymbol\n    ) {\n        totalSupply = _initialAmount;\n        balanceOf[msg.sender] = _initialAmount;\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        decimals = _decimalUnits;\n    }\n\n    function transfer(address dst, uint256 amount)\n        external\n        virtual\n        override\n        returns (bool)\n    {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(\n            amount,\n            \"Insufficient balance\"\n        );\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n        emit Transfer(msg.sender, dst, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external virtual override returns (bool) {\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(\n            amount,\n            \"Insufficient allowance\"\n        );\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n        emit Transfer(src, dst, amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        allowance[msg.sender][_spender] = amount;\n        emit Approval(msg.sender, _spender, amount);\n        return true;\n    }\n}\n\n/**\n * @title Non-Standard ERC20 token\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n */\ncontract NonStandardToken is ERC20NS {\n    using SafeMath for uint256;\n\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n    uint256 public override totalSupply;\n    mapping(address => mapping(address => uint256)) public override allowance;\n    mapping(address => uint256) public override balanceOf;\n\n    constructor(\n        uint256 _initialAmount,\n        string memory _tokenName,\n        uint8 _decimalUnits,\n        string memory _tokenSymbol\n    ) {\n        totalSupply = _initialAmount;\n        balanceOf[msg.sender] = _initialAmount;\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        decimals = _decimalUnits;\n    }\n\n    function transfer(address dst, uint256 amount) external override {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(\n            amount,\n            \"Insufficient balance\"\n        );\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n        emit Transfer(msg.sender, dst, amount);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external override {\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(\n            amount,\n            \"Insufficient allowance\"\n        );\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n        emit Transfer(src, dst, amount);\n    }\n\n    function approve(address _spender, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        allowance[msg.sender][_spender] = amount;\n        emit Approval(msg.sender, _spender, amount);\n        return true;\n    }\n}\n\ncontract ERC20Harness is StandardToken {\n    using SafeMath for uint256;\n\n    // To support testing, we can specify addresses for which transferFrom should fail and return false\n    mapping(address => bool) public failTransferFromAddresses;\n\n    // To support testing, we allow the contract to always fail `transfer`.\n    mapping(address => bool) public failTransferToAddresses;\n\n    constructor(\n        uint256 _initialAmount,\n        string memory _tokenName,\n        uint8 _decimalUnits,\n        string memory _tokenSymbol\n    ) StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {}\n\n    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n        failTransferFromAddresses[src] = _fail;\n    }\n\n    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n        failTransferToAddresses[dst] = _fail;\n    }\n\n    function harnessSetBalance(address _account, uint256 _amount) public {\n        balanceOf[_account] = _amount;\n    }\n\n    function transfer(address dst, uint256 amount)\n        external\n        override\n        returns (bool success)\n    {\n        // Added for testing purposes\n        if (failTransferToAddresses[dst]) {\n            return false;\n        }\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(\n            amount,\n            \"Insufficient balance\"\n        );\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n        emit Transfer(msg.sender, dst, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external override returns (bool success) {\n        // Added for testing purposes\n        if (failTransferFromAddresses[src]) {\n            return false;\n        }\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(\n            amount,\n            \"Insufficient allowance\"\n        );\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n        emit Transfer(src, dst, amount);\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}