{
  "address": "0x9A676e781A523b5d0C0e43731313A708CB607508",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimalUnits",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0610946ccaca8ac622e6ef661eb5cf0ae30d1bea8389f903d59f589d7f91fdb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9A676e781A523b5d0C0e43731313A708CB607508",
    "transactionIndex": 0,
    "gasUsed": "576654",
    "logsBloom": "0x
    "blockHash": "0x5a3471bd812fcc27ff45fd57f24421f4c436b66a62dcea6cad66af25839b67cf",
    "transactionHash": "0xc0610946ccaca8ac622e6ef661eb5cf0ae30d1bea8389f903d59f589d7f91fdb",
    "logs": [],
    "blockNumber": 15,
    "cumulativeGasUsed": "576654",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "2000000000000000000000000",
    "USDT token",
    18,
    "rUSDT"
  ],
  "solcInputHash": "3f2295c0e5923ce11cb0f26c6e52bee2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard token.  See https://github.com/ethereum/EIPs/issues/20\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Standard ERC20 token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20.sol\":\"StandardToken\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface ERC20Base {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value)\\n        external\\n        returns (bool);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n}\\n\\nabstract contract ERC20 is ERC20Base {\\n    function transfer(address to, uint256 value)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual returns (bool);\\n}\\n\\nabstract contract ERC20NS is ERC20Base {\\n    function transfer(address to, uint256 value) external virtual;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual;\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n * @dev Implementation of the basic standard token.\\n *  See https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract StandardToken is ERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public override totalSupply;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n    mapping(address => uint256) public override balanceOf;\\n\\n    constructor(\\n        uint256 _initialAmount,\\n        string memory _tokenName,\\n        uint8 _decimalUnits,\\n        string memory _tokenSymbol\\n    ) {\\n        totalSupply = _initialAmount;\\n        balanceOf[msg.sender] = _initialAmount;\\n        name = _tokenName;\\n        symbol = _tokenSymbol;\\n        decimals = _decimalUnits;\\n    }\\n\\n    function transfer(address dst, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(\\n            amount,\\n            \\\"Insufficient balance\\\"\\n        );\\n        balanceOf[dst] = balanceOf[dst].add(amount, \\\"Balance overflow\\\");\\n        emit Transfer(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(\\n            amount,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        balanceOf[src] = balanceOf[src].sub(amount, \\\"Insufficient balance\\\");\\n        balanceOf[dst] = balanceOf[dst].add(amount, \\\"Balance overflow\\\");\\n        emit Transfer(src, dst, amount);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        allowance[msg.sender][_spender] = amount;\\n        emit Approval(msg.sender, _spender, amount);\\n        return true;\\n    }\\n}\\n\\n/**\\n * @title Non-Standard ERC20 token\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ncontract NonStandardToken is ERC20NS {\\n    using SafeMath for uint256;\\n\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n    uint256 public override totalSupply;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n    mapping(address => uint256) public override balanceOf;\\n\\n    constructor(\\n        uint256 _initialAmount,\\n        string memory _tokenName,\\n        uint8 _decimalUnits,\\n        string memory _tokenSymbol\\n    ) {\\n        totalSupply = _initialAmount;\\n        balanceOf[msg.sender] = _initialAmount;\\n        name = _tokenName;\\n        symbol = _tokenSymbol;\\n        decimals = _decimalUnits;\\n    }\\n\\n    function transfer(address dst, uint256 amount) external override {\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(\\n            amount,\\n            \\\"Insufficient balance\\\"\\n        );\\n        balanceOf[dst] = balanceOf[dst].add(amount, \\\"Balance overflow\\\");\\n        emit Transfer(msg.sender, dst, amount);\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external override {\\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(\\n            amount,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        balanceOf[src] = balanceOf[src].sub(amount, \\\"Insufficient balance\\\");\\n        balanceOf[dst] = balanceOf[dst].add(amount, \\\"Balance overflow\\\");\\n        emit Transfer(src, dst, amount);\\n    }\\n\\n    function approve(address _spender, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        allowance[msg.sender][_spender] = amount;\\n        emit Approval(msg.sender, _spender, amount);\\n        return true;\\n    }\\n}\\n\\ncontract ERC20Harness is StandardToken {\\n    using SafeMath for uint256;\\n\\n    // To support testing, we can specify addresses for which transferFrom should fail and return false\\n    mapping(address => bool) public failTransferFromAddresses;\\n\\n    // To support testing, we allow the contract to always fail `transfer`.\\n    mapping(address => bool) public failTransferToAddresses;\\n\\n    constructor(\\n        uint256 _initialAmount,\\n        string memory _tokenName,\\n        uint8 _decimalUnits,\\n        string memory _tokenSymbol\\n    ) StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {}\\n\\n    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\\n        failTransferFromAddresses[src] = _fail;\\n    }\\n\\n    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\\n        failTransferToAddresses[dst] = _fail;\\n    }\\n\\n    function harnessSetBalance(address _account, uint256 _amount) public {\\n        balanceOf[_account] = _amount;\\n    }\\n\\n    function transfer(address dst, uint256 amount)\\n        external\\n        override\\n        returns (bool success)\\n    {\\n        // Added for testing purposes\\n        if (failTransferToAddresses[dst]) {\\n            return false;\\n        }\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(\\n            amount,\\n            \\\"Insufficient balance\\\"\\n        );\\n        balanceOf[dst] = balanceOf[dst].add(amount, \\\"Balance overflow\\\");\\n        emit Transfer(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external override returns (bool success) {\\n        // Added for testing purposes\\n        if (failTransferFromAddresses[src]) {\\n            return false;\\n        }\\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(\\n            amount,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        balanceOf[src] = balanceOf[src].sub(amount, \\\"Insufficient balance\\\");\\n        balanceOf[dst] = balanceOf[dst].add(amount, \\\"Balance overflow\\\");\\n        emit Transfer(src, dst, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x5450f997ac4f79dc1109aed20142bc67e17b97b78d7d399f7250f6ee04b38582\",\"license\":\"UNLICENSED\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe578b9602160e7ddbb5e7b6d355bb4508fa134684afe46e4043602c652e0e041\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000a3f38038062000a3f8339810160408190526200003491620001f0565b6003849055336000908152600560209081526040822086905584516200005e929186019062000093565b5080516200007490600190602084019062000093565b50506002805460ff191660ff9290921691909117905550620002d29050565b828054620000a1906200027f565b90600052602060002090601f016020900481019282620000c5576000855562000110565b82601f10620000e057805160ff191683800117855562000110565b8280016001018555821562000110579182015b8281111562000110578251825591602001919060010190620000f3565b506200011e92915062000122565b5090565b5b808211156200011e576000815560010162000123565b600082601f8301126200014b57600080fd5b81516001600160401b0380821115620001685762000168620002bc565b604051601f8301601f19908116603f01168101908282118183101715620001935762000193620002bc565b81604052838152602092508683858801011115620001b057600080fd5b600091505b83821015620001d45785820183015181830184015290820190620001b5565b83821115620001e65760008385830101525b9695505050505050565b600080600080608085870312156200020757600080fd5b845160208601519094506001600160401b03808211156200022757600080fd5b620002358883890162000139565b94506040870151915060ff821682146200024e57600080fd5b6060870151919350808211156200026457600080fd5b50620002738782880162000139565b91505092959194509250565b600181811c908216806200029457607f821691505b60208210811415620002b657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61075d80620002e26000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461010357806370a082311461012257806395d89b4114610142578063a9059cbb1461014a578063dd62ed3e1461015d57600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100f0575b600080fd5b6100a0610188565b6040516100ad9190610652565b60405180910390f35b6100c96100c4366004610628565b610216565b60405190151581526020016100ad565b6100e260035481565b6040519081526020016100ad565b6100c96100fe3660046105ec565b610282565b6002546101109060ff1681565b60405160ff90911681526020016100ad565b6100e2610130366004610597565b60056020526000908152604090205481565b6100a0610401565b6100c9610158366004610628565b61040e565b6100e261016b3660046105b9565b600460209081526000928352604080842090915290825290205481565b60008054610195906106d6565b80601f01602080910402602001604051908101604052809291908181526020018280546101c1906106d6565b801561020e5780601f106101e35761010080835404028352916020019161020e565b820191906000526020600020905b8154815290600101906020018083116101f157829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102719086815260200190565b60405180910390a350600192915050565b6040805180820182526016815275496e73756666696369656e7420616c6c6f77616e636560501b6020808301919091526001600160a01b038616600090815260048252838120338252909152918220546102dd9184906104fe565b6001600160a01b0385166000818152600460209081526040808320338452825280832094909455835180850185526014815273496e73756666696369656e742062616c616e636560601b818301529282526005905291909120546103429184906104fe565b6001600160a01b0380861660009081526005602081815260408084209590955584518086018652601081526f42616c616e6365206f766572666c6f7760801b81830152938816835252919091205461039b918490610541565b6001600160a01b0380851660008181526005602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103ef9086815260200190565b60405180910390a35060019392505050565b60018054610195906106d6565b6040805180820182526014815273496e73756666696369656e742062616c616e636560601b6020808301919091523360009081526005909152918220546104569184906104fe565b3360009081526005602081815260408084209490945583518085018552601081526f42616c616e6365206f766572666c6f7760801b818301526001600160a01b0388168452919052919020546104ad918490610541565b6001600160a01b0384166000818152600560205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102719086815260200190565b6000818484111561052b5760405162461bcd60e51b81526004016105229190610652565b60405180910390fd5b50600061053884866106bf565b95945050505050565b60008061054e84866106a7565b905082858210156105725760405162461bcd60e51b81526004016105229190610652565b50949350505050565b80356001600160a01b038116811461059257600080fd5b919050565b6000602082840312156105a957600080fd5b6105b28261057b565b9392505050565b600080604083850312156105cc57600080fd5b6105d58361057b565b91506105e36020840161057b565b90509250929050565b60008060006060848603121561060157600080fd5b61060a8461057b565b92506106186020850161057b565b9150604084013590509250925092565b6000806040838503121561063b57600080fd5b6106448361057b565b946020939093013593505050565b600060208083528351808285015260005b8181101561067f57858101830151858201604001528201610663565b81811115610691576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156106ba576106ba610711565b500190565b6000828210156106d1576106d1610711565b500390565b600181811c908216806106ea57607f821691505b6020821081141561070b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d01609e330d83e9dc4a8b2b591f78f2787d98d49067556154372370d143909ef64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461010357806370a082311461012257806395d89b4114610142578063a9059cbb1461014a578063dd62ed3e1461015d57600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100f0575b600080fd5b6100a0610188565b6040516100ad9190610652565b60405180910390f35b6100c96100c4366004610628565b610216565b60405190151581526020016100ad565b6100e260035481565b6040519081526020016100ad565b6100c96100fe3660046105ec565b610282565b6002546101109060ff1681565b60405160ff90911681526020016100ad565b6100e2610130366004610597565b60056020526000908152604090205481565b6100a0610401565b6100c9610158366004610628565b61040e565b6100e261016b3660046105b9565b600460209081526000928352604080842090915290825290205481565b60008054610195906106d6565b80601f01602080910402602001604051908101604052809291908181526020018280546101c1906106d6565b801561020e5780601f106101e35761010080835404028352916020019161020e565b820191906000526020600020905b8154815290600101906020018083116101f157829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102719086815260200190565b60405180910390a350600192915050565b6040805180820182526016815275496e73756666696369656e7420616c6c6f77616e636560501b6020808301919091526001600160a01b038616600090815260048252838120338252909152918220546102dd9184906104fe565b6001600160a01b0385166000818152600460209081526040808320338452825280832094909455835180850185526014815273496e73756666696369656e742062616c616e636560601b818301529282526005905291909120546103429184906104fe565b6001600160a01b0380861660009081526005602081815260408084209590955584518086018652601081526f42616c616e6365206f766572666c6f7760801b81830152938816835252919091205461039b918490610541565b6001600160a01b0380851660008181526005602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103ef9086815260200190565b60405180910390a35060019392505050565b60018054610195906106d6565b6040805180820182526014815273496e73756666696369656e742062616c616e636560601b6020808301919091523360009081526005909152918220546104569184906104fe565b3360009081526005602081815260408084209490945583518085018552601081526f42616c616e6365206f766572666c6f7760801b818301526001600160a01b0388168452919052919020546104ad918490610541565b6001600160a01b0384166000818152600560205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102719086815260200190565b6000818484111561052b5760405162461bcd60e51b81526004016105229190610652565b60405180910390fd5b50600061053884866106bf565b95945050505050565b60008061054e84866106a7565b905082858210156105725760405162461bcd60e51b81526004016105229190610652565b50949350505050565b80356001600160a01b038116811461059257600080fd5b919050565b6000602082840312156105a957600080fd5b6105b28261057b565b9392505050565b600080604083850312156105cc57600080fd5b6105d58361057b565b91506105e36020840161057b565b90509250929050565b60008060006060848603121561060157600080fd5b61060a8461057b565b92506106186020850161057b565b9150604084013590509250925092565b6000806040838503121561063b57600080fd5b6106448361057b565b946020939093013593505050565b600060208083528351808285015260005b8181101561067f57858101830151858201604001528201610663565b81811115610691576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156106ba576106ba610711565b500190565b6000828210156106d1576106d1610711565b500390565b600181811c908216806106ea57607f821691505b6020821081141561070b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d01609e330d83e9dc4a8b2b591f78f2787d98d49067556154372370d143909ef64736f6c63430008060033",
  "devdoc": {
    "details": "Implementation of the basic standard token.  See https://github.com/ethereum/EIPs/issues/20",
    "kind": "dev",
    "methods": {},
    "title": "Standard ERC20 token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33360,
        "contract": "contracts/ERC20.sol:StandardToken",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 33362,
        "contract": "contracts/ERC20.sol:StandardToken",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 33364,
        "contract": "contracts/ERC20.sol:StandardToken",
        "label": "decimals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 33367,
        "contract": "contracts/ERC20.sol:StandardToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 33374,
        "contract": "contracts/ERC20.sol:StandardToken",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 33379,
        "contract": "contracts/ERC20.sol:StandardToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}