{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "NewGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingGuardian",
          "type": "address"
        }
      ],
      "name": "NewPendingGuardian",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingGuardian",
          "type": "address"
        }
      ],
      "name": "_setPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenArrayCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cTokensArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "cTokenName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPriceOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressAdapter",
          "type": "address"
        }
      ],
      "name": "setAdapterToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8641df4f10c70fd672e6a025ae1db1053e5bf9342ad7d5bd52d5c5be8a7903fd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "681323",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9280a6f3e153148fa0e6db52b3a592a9d7f14b88fdae8dcc97f76bc35f9e9354",
    "transactionHash": "0x8641df4f10c70fd672e6a025ae1db1053e5bf9342ad7d5bd52d5c5be8a7903fd",
    "logs": [],
    "blockNumber": 37,
    "cumulativeGasUsed": "681323",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "solcInputHash": "3f2295c0e5923ce11cb0f26c6e52bee2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"NewGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingGuardian\",\"type\":\"address\"}],\"name\":\"NewPendingGuardian\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingGuardian\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenArrayCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cTokensArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cTokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressAdapter\",\"type\":\"address\"}],\"name\":\"setAdapterToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_setPendingAdmin(address)\":{\"params\":{\"newPendingGuardian\":\"New pending gaurdian.\"}},\"cTokenArrayCount()\":{\"returns\":{\"_0\":\"The length of cTokensArray\"}},\"constructor\":{\"params\":{\"guardian_\":\"The address of the guardian, which may set the\"}},\"getUnderlyingPrice(address)\":{\"params\":{\"cToken\":\"The cToken to get the underlying price of\"},\"returns\":{\"_0\":\"The underlying asset price mantissa (scaled by 1e18)\"}},\"setAdapterToToken(address,address)\":{\"params\":{\"addressAdapter\":\"Address of the OracleAdapter\",\"addressToken\":\"Address of the cToken\"}}},\"version\":1},\"userdoc\":{\"events\":{\"NewGuardian(address,address)\":{\"notice\":\"Emitted when pendingGuardian is accepted, which means gaurdian is updated\"},\"NewPendingGuardian(address,address)\":{\"notice\":\"Emitted when pendingGuardian is changed\"}},\"kind\":\"user\",\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of gaurdian rights. msg.sender must be pendingGaurdian\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of gaurdian rights. The newPendingGaurdian must call `_acceptAdmin` to finalize the transfer.\"},\"cTokenArrayCount()\":{\"notice\":\"Get the length of cTokensArray\"},\"cTokensArray(uint256)\":{\"notice\":\"Array of cTokensDetail\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a listed cToken asset\"},\"guardian()\":{\"notice\":\"Address of the guardian\"},\"isPriceOracle()\":{\"notice\":\"Indicator that this is a PriceOracle contract (for inspection)\"},\"pendingGuardian()\":{\"notice\":\"Address of the pending guardian\"},\"setAdapterToToken(address,address)\":{\"notice\":\"Set the underlying price of a listed cToken asset\"},\"tokenAdapter(address)\":{\"notice\":\"Mapping of the cTokenAddress => adapterAddress\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracleProxy.sol\":\"PriceOracleProxy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./WhitelistInterface.sol\\\";\\n\\n/**\\n * @title tropykus CToken Contract\\n * @notice Abstract base for CTokens\\n * @author tropykus\\n */\\nabstract contract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    address whitelist;\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        require(msg.sender == admin, \\\"CT01\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"CT02\\\");\\n\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"CT03\\\");\\n\\n        uint256 err = _setComptroller(comptroller_);\\n        require(err == uint256(Error.NO_ERROR), \\\"CT04\\\");\\n\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint256(Error.NO_ERROR), \\\"CT05\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        _notEntered = true;\\n    }\\n\\n    function addWhitelist(address _whitelist) external returns (uint256) {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK\\n                );\\n        }\\n        whitelist = _whitelist;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256) {\\n        uint256 allowed = comptroller.transferAllowed(\\n            address(this),\\n            src,\\n            dst,\\n            tokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.TRANSFER_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        uint256 startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint256).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        MathError mathErr;\\n        uint256 allowanceNew;\\n        uint256 srcTokensNew;\\n        uint256 dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src].tokens, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst].tokens, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        accountTokens[src].tokens = srcTokensNew;\\n        accountTokens[dst].tokens = dstTokensNew;\\n\\n        if (startingAllowance != type(uint256).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        emit Transfer(src, dst, tokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        returns (bool)\\n    {\\n        return\\n            transferTokens(msg.sender, msg.sender, dst, amount) ==\\n            uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external override nonReentrant returns (bool) {\\n        return\\n            transferTokens(msg.sender, src, dst, amount) ==\\n            uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        transferAllowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner].tokens;\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        (MathError mErr, uint256 balance) = mulScalarTruncate(\\n            Exp({mantissa: exchangeRateCurrent()}),\\n            accountTokens[owner].tokens\\n        );\\n        require(mErr == MathError.NO_ERROR, \\\"CT06\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 cTokenBalance = accountTokens[account].tokens;\\n        uint256 borrowBalance;\\n        uint256 exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (\\n            uint256(Error.NO_ERROR),\\n            cTokenBalance,\\n            borrowBalance,\\n            exchangeRateMantissa\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint256) {\\n        return\\n            interestRateModel.getBorrowRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint256) {\\n        return\\n            interestRateModel.getSupplyRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves,\\n                reserveFactorMantissa\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent()\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(accrueInterest() == uint256(Error.NO_ERROR), \\\"CT07\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(accrueInterest() == uint256(Error.NO_ERROR), \\\"CT07\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (MathError err, uint256 result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"CT08\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account)\\n        internal\\n        view\\n        returns (MathError, uint256)\\n    {\\n        MathError mathErr;\\n        uint256 principalTimesIndex;\\n        uint256 result;\\n\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        (mathErr, principalTimesIndex) = mulUInt(\\n            borrowSnapshot.principal,\\n            borrowIndex\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(\\n            principalTimesIndex,\\n            borrowSnapshot.interestIndex\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    function getBorrowerPrincipalStored(address account)\\n        public\\n        view\\n        returns (uint256 borrowed)\\n    {\\n        borrowed = accountBorrows[account].principal;\\n    }\\n\\n    function getSupplierSnapshotStored(address account)\\n        public\\n        view\\n        returns (\\n            uint256 tokens,\\n            uint256 underlyingAmount,\\n            uint256 suppliedAt,\\n            uint256 promisedSupplyRate\\n        )\\n    {\\n        tokens = accountTokens[account].tokens;\\n        underlyingAmount = accountTokens[account].underlyingAmount;\\n        suppliedAt = accountTokens[account].suppliedAt;\\n        promisedSupplyRate = accountTokens[account].promisedSupplyRate;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent()\\n        public\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(accrueInterest() == uint256(Error.NO_ERROR), \\\"CT07\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint256) {\\n        (MathError err, uint256 result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"CT09\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal()\\n        internal\\n        view\\n        virtual\\n        returns (MathError, uint256)\\n    {\\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            MathError error;\\n            uint256 exchangeRate;\\n            uint256 totalCash = getCashPrior();\\n            if (interestRateModel.isTropykusInterestRateModel()) {\\n                (error, exchangeRate) = tropykusExchangeRateStoredInternal(\\n                    msg.sender\\n                );\\n                if (error == MathError.NO_ERROR) {\\n                    return (MathError.NO_ERROR, exchangeRate);\\n                } else {\\n                    return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n                }\\n            }\\n            return\\n                interestRateModel.getExchangeRate(\\n                    totalCash,\\n                    totalBorrows,\\n                    totalReserves,\\n                    totalSupply\\n                );\\n        }\\n    }\\n\\n    function tropykusExchangeRateStoredInternal(address redeemer)\\n        internal\\n        view\\n        returns (MathError, uint256)\\n    {\\n        if (totalSupply == 0) {\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            SupplySnapshot storage supplySnapshot = accountTokens[redeemer];\\n            if (supplySnapshot.suppliedAt == 0) {\\n                return (MathError.DIVISION_BY_ZERO, 0);\\n            }\\n            (, uint256 interestFactorMantissa, ) = tropykusInterestAccrued(\\n                redeemer\\n            );\\n            Exp memory interestFactor = Exp({mantissa: interestFactorMantissa});\\n            uint256 currentUnderlying = supplySnapshot.underlyingAmount;\\n            Exp memory redeemerUnderlying = Exp({mantissa: currentUnderlying});\\n            (, Exp memory realAmount) = mulExp(\\n                interestFactor,\\n                redeemerUnderlying\\n            );\\n            (, Exp memory exchangeRate) = getExp(\\n                realAmount.mantissa,\\n                supplySnapshot.tokens\\n            );\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    function tropykusInterestAccrued(address account)\\n        internal\\n        view\\n        returns (\\n            MathError,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        SupplySnapshot storage supplySnapshot = accountTokens[account];\\n        uint256 promisedSupplyRate = supplySnapshot.promisedSupplyRate;\\n        Exp memory expectedSupplyRatePerBlock = Exp({\\n            mantissa: promisedSupplyRate\\n        });\\n        (, uint256 delta) = subUInt(\\n            accrualBlockNumber,\\n            supplySnapshot.suppliedAt\\n        );\\n        (, Exp memory expectedSupplyRatePerBlockWithDelta) = mulScalar(\\n            expectedSupplyRatePerBlock,\\n            delta\\n        );\\n        (, Exp memory interestFactor) = addExp(\\n            Exp({mantissa: 1e18}),\\n            expectedSupplyRatePerBlockWithDelta\\n        );\\n        uint256 currentUnderlying = supplySnapshot.underlyingAmount;\\n        Exp memory redeemerUnderlying = Exp({mantissa: currentUnderlying});\\n        (, Exp memory realAmount) = mulExp(interestFactor, redeemerUnderlying);\\n        (, uint256 interestEarned) = subUInt(\\n            realAmount.mantissa,\\n            currentUnderlying\\n        );\\n        return (MathError.NO_ERROR, interestFactor.mantissa, interestEarned);\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint256) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public override returns (uint256) {\\n        uint256 currentBlockNumber = getBlockNumber();\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        uint256 cashPrior = getCashPrior();\\n        uint256 borrowsPrior = totalBorrows;\\n        uint256 reservesPrior = totalReserves;\\n        uint256 borrowIndexPrior = borrowIndex;\\n\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\n            cashPrior,\\n            borrowsPrior,\\n            reservesPrior\\n        );\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"CT10\\\");\\n\\n        (MathError mathErr, uint256 blockDelta) = subUInt(\\n            currentBlockNumber,\\n            accrualBlockNumberPrior\\n        );\\n        require(mathErr == MathError.NO_ERROR, \\\"CT11\\\");\\n\\n        Exp memory simpleInterestFactor;\\n        uint256 interestAccumulated;\\n        uint256 totalBorrowsNew;\\n        uint256 totalReservesNew;\\n        uint256 borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(\\n            Exp({mantissa: borrowRateMantissa}),\\n            blockDelta\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint256(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(\\n            simpleInterestFactor,\\n            borrowsPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint256(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint256(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint256(mathErr)\\n                );\\n        }\\n\\n        if (interestRateModel.isTropykusInterestRateModel()) {\\n            (mathErr, totalReservesNew) = newReserves(\\n                borrowRateMantissa,\\n                cashPrior,\\n                borrowsPrior,\\n                reservesPrior,\\n                interestAccumulated\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return\\n                    failOpaque(\\n                        Error.MATH_ERROR,\\n                        FailureInfo\\n                            .ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                        uint256(mathErr)\\n                    );\\n            }\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(\\n            simpleInterestFactor,\\n            borrowIndexPrior,\\n            borrowIndexPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint256(mathErr)\\n                );\\n        }\\n\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        emit AccrueInterest(\\n            cashPrior,\\n            interestAccumulated,\\n            borrowIndexNew,\\n            totalBorrowsNew\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function newReserves(\\n        uint256 borrowRateMantissa,\\n        uint256 cashPrior,\\n        uint256 borrowsPrior,\\n        uint256 reservesPrior,\\n        uint256 interestAccumulated\\n    ) internal view returns (MathError mathErr, uint256 totalReservesNew) {\\n        uint256 newReserveFactorMantissa;\\n        uint256 utilizationRate = interestRateModel.utilizationRate(\\n            cashPrior,\\n            borrowsPrior,\\n            reservesPrior\\n        );\\n        uint256 expectedSupplyRate = interestRateModel.getSupplyRate(\\n            cashPrior,\\n            borrowsPrior,\\n            reservesPrior,\\n            reserveFactorMantissa\\n        );\\n        if (\\n            interestRateModel.isAboveOptimal(\\n                cashPrior,\\n                borrowsPrior,\\n                reservesPrior\\n            )\\n        ) {\\n            (mathErr, newReserveFactorMantissa) = mulScalarTruncate(\\n                Exp({mantissa: utilizationRate}),\\n                borrowRateMantissa\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n            (mathErr, newReserveFactorMantissa) = subUInt(\\n                newReserveFactorMantissa,\\n                expectedSupplyRate\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n            (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n                Exp({mantissa: newReserveFactorMantissa}),\\n                interestAccumulated,\\n                reservesPrior\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n        } else {\\n            mathErr = MathError.NO_ERROR;\\n            totalReservesNew = reservesPrior;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint256 mintAmount)\\n        internal\\n        nonReentrant\\n        returns (uint256, uint256)\\n    {\\n        if (WhitelistInterface(whitelist).enabled()) {\\n            require(WhitelistInterface(whitelist).exist(msg.sender), \\\"CT26\\\");\\n        }\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return (\\n                fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED),\\n                0\\n            );\\n        }\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 exchangeRateMantissa;\\n        uint256 mintTokens;\\n        uint256 totalSupplyNew;\\n        uint256 accountTokensNew;\\n        uint256 actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint256 mintAmount)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 allowed = comptroller.mintAllowed(\\n            address(this),\\n            minter,\\n            mintAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.MINT_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (\\n                fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK),\\n                0\\n            );\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (\\n            vars.mathErr,\\n            vars.exchangeRateMantissa\\n        ) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,\\n                    uint256(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n        if (interestRateModel.isTropykusInterestRateModel()) {\\n            SupplySnapshot storage supplySnapshot = accountTokens[minter];\\n            (, uint256 newTotalSupply) = addUInt(\\n                supplySnapshot.underlyingAmount,\\n                mintAmount\\n            );\\n            require(newTotalSupply <= 0.1e18, \\\"CT24\\\");\\n        }\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({mantissa: vars.exchangeRateMantissa})\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"CT12\\\");\\n\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(\\n            totalSupply,\\n            vars.mintTokens\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"CT13\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(\\n            accountTokens[minter].tokens,\\n            vars.mintTokens\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"CT14\\\");\\n\\n        uint256 currentSupplyRate = interestRateModel.getSupplyRate(\\n            getCashPrior(),\\n            totalBorrows,\\n            totalReserves,\\n            reserveFactorMantissa\\n        );\\n\\n        bool isTropykusInterestRateModel = interestRateModel\\n            .isTropykusInterestRateModel();\\n\\n        if (accountTokens[minter].tokens > 0) {\\n            Exp memory updatedUnderlying;\\n            if (isTropykusInterestRateModel) {\\n                (, uint256 interestFactorMantissa, ) = tropykusInterestAccrued(\\n                    minter\\n                );\\n                Exp memory interestFactor = Exp({\\n                    mantissa: interestFactorMantissa\\n                });\\n                uint256 currentUnderlyingAmount = accountTokens[minter]\\n                    .underlyingAmount;\\n                MathError mErrorNewAmount;\\n                (mErrorNewAmount, updatedUnderlying) = mulExp(\\n                    Exp({mantissa: currentUnderlyingAmount}),\\n                    interestFactor\\n                );\\n                if (mErrorNewAmount != MathError.NO_ERROR) {\\n                    return (\\n                        failOpaque(\\n                            Error.MATH_ERROR,\\n                            FailureInfo.MINT_EXCHANGE_CALCULATION_FAILED,\\n                            uint256(mErrorNewAmount)\\n                        ),\\n                        0\\n                    );\\n                }\\n            } else {\\n                uint256 currentTokens = accountTokens[minter].tokens;\\n                MathError mErrorUpdatedUnderlying;\\n                (mErrorUpdatedUnderlying, updatedUnderlying) = mulExp(\\n                    Exp({mantissa: currentTokens}),\\n                    Exp({mantissa: vars.exchangeRateMantissa})\\n                );\\n                if (mErrorUpdatedUnderlying != MathError.NO_ERROR) {\\n                    return (\\n                        failOpaque(\\n                            Error.MATH_ERROR,\\n                            FailureInfo.MINT_EXCHANGE_CALCULATION_FAILED,\\n                            uint256(mErrorUpdatedUnderlying)\\n                        ),\\n                        0\\n                    );\\n                }\\n            }\\n            (, mintAmount) = addUInt(updatedUnderlying.mantissa, mintAmount);\\n        }\\n\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = SupplySnapshot({\\n            tokens: vars.accountTokensNew,\\n            underlyingAmount: mintAmount,\\n            suppliedAt: accrualBlockNumber,\\n            promisedSupplyRate: currentSupplyRate\\n        });\\n\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint256 redeemAmount)\\n        internal\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return\\n                fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        return redeemFresh(payable(msg.sender), redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 exchangeRateMantissa;\\n        uint256 redeemTokens;\\n        uint256 redeemAmount;\\n        uint256 totalSupplyNew;\\n        uint256 accountTokensNew;\\n        uint256 newSubsidyFund;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint256 redeemAmountIn)\\n        internal\\n        returns (uint256)\\n    {\\n        require(redeemAmountIn > 0, \\\"CT15\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        SupplySnapshot storage supplySnapshot = accountTokens[redeemer];\\n\\n        (\\n            vars.mathErr,\\n            vars.exchangeRateMantissa\\n        ) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        uint256 interestEarned;\\n        uint256 subsidyFundPortion;\\n        uint256 currentUnderlying;\\n\\n        bool isTropykusInterestRateModel = interestRateModel\\n            .isTropykusInterestRateModel();\\n        if (isTropykusInterestRateModel) {\\n            currentUnderlying = supplySnapshot.underlyingAmount;\\n            (, , interestEarned) = tropykusInterestAccrued(redeemer);\\n        }\\n        supplySnapshot.promisedSupplyRate = interestRateModel.getSupplyRate(\\n            getCashPrior(),\\n            totalBorrows,\\n            totalReserves,\\n            reserveFactorMantissa\\n        );\\n\\n        if (\\n            isTropykusInterestRateModel &&\\n            !interestRateModel.isAboveOptimal(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves\\n            )\\n        ) {\\n            uint256 borrowRate = interestRateModel.getBorrowRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves\\n            );\\n\\n            uint256 utilizationRate = interestRateModel.utilizationRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves\\n            );\\n\\n            (, uint256 estimatedEarning) = mulScalarTruncate(\\n                Exp({mantissa: borrowRate}),\\n                utilizationRate\\n            );\\n\\n            (, subsidyFundPortion) = subUInt(\\n                supplySnapshot.promisedSupplyRate,\\n                estimatedEarning\\n            );\\n            (, Exp memory subsidyFactor) = getExp(\\n                subsidyFundPortion,\\n                supplySnapshot.promisedSupplyRate\\n            );\\n            (, subsidyFundPortion) = mulScalarTruncate(\\n                subsidyFactor,\\n                interestEarned\\n            );\\n        }\\n\\n        vars.redeemAmount = redeemAmountIn;\\n\\n        if (isTropykusInterestRateModel) {\\n            (, Exp memory num) = mulExp(\\n                vars.redeemAmount,\\n                supplySnapshot.tokens\\n            );\\n            (, Exp memory realTokensWithdrawAmount) = getExp(\\n                num.mantissa,\\n                currentUnderlying\\n            );\\n            vars.redeemTokens = realTokensWithdrawAmount.mantissa;\\n        } else {\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({mantissa: vars.exchangeRateMantissa})\\n            );\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return\\n                    failOpaque(\\n                        Error.MATH_ERROR,\\n                        FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n                        uint256(vars.mathErr)\\n                    );\\n            }\\n        }\\n        //        }\\n\\n        uint256 allowed = comptroller.redeemAllowed(\\n            address(this),\\n            redeemer,\\n            vars.redeemTokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.REDEEM_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REDEEM_FRESHNESS_CHECK\\n                );\\n        }\\n\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(\\n            totalSupply,\\n            vars.redeemTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        (, vars.newSubsidyFund) = subUInt(subsidyFund, subsidyFundPortion);\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(\\n            supplySnapshot.tokens,\\n            vars.redeemTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        uint256 cash = getCashPrior();\\n        if (isTropykusInterestRateModel) {\\n            cash = address(this).balance;\\n        }\\n\\n        if (cash < vars.redeemAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE\\n                );\\n        }\\n\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        totalSupply = vars.totalSupplyNew;\\n        subsidyFund = vars.newSubsidyFund;\\n        supplySnapshot.tokens = vars.accountTokensNew;\\n        supplySnapshot.suppliedAt = accrualBlockNumber;\\n        (, supplySnapshot.underlyingAmount) = subUInt(\\n            supplySnapshot.underlyingAmount,\\n            vars.redeemAmount\\n        );\\n\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        comptroller.redeemVerify(\\n            address(this),\\n            redeemer,\\n            vars.redeemAmount,\\n            vars.redeemTokens\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowInternal(uint256 borrowAmount)\\n        internal\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return\\n                fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        return borrowFresh(payable(msg.sender), borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowFresh(address payable borrower, uint256 borrowAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 allowed = comptroller.borrowAllowed(\\n            address(this),\\n            borrower,\\n            borrowAmount\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.BORROW_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.BORROW_FRESHNESS_CHECK\\n                );\\n        }\\n\\n        if (getCashPrior() < borrowAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.BORROW_CASH_NOT_AVAILABLE\\n                );\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(\\n            borrower\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(\\n            vars.accountBorrows,\\n            borrowAmount\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(\\n            totalBorrows,\\n            borrowAmount\\n        );\\n        if (interestRateModel.isTropykusInterestRateModel()) {\\n            require(vars.totalBorrowsNew <= 0.1e18, \\\"CT25\\\");\\n        }\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        doTransferOut(borrower, borrowAmount);\\n\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        emit Borrow(\\n            borrower,\\n            borrowAmount,\\n            vars.accountBorrowsNew,\\n            vars.totalBorrowsNew\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint256 repayAmount)\\n        internal\\n        nonReentrant\\n        returns (uint256, uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return (\\n                fail(\\n                    Error(error),\\n                    FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED\\n                ),\\n                0\\n            );\\n        }\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 repayAmount;\\n        uint256 borrowerIndex;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n        uint256 actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) internal returns (uint256, uint256) {\\n        uint256 allowed = comptroller.repayBorrowAllowed(\\n            address(this),\\n            payer,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REPAY_BORROW_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(\\n            borrower\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        if (repayAmount == type(uint256).max) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(\\n            vars.accountBorrows,\\n            vars.actualRepayAmount\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"CT16\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(\\n            totalBorrows,\\n            vars.actualRepayAmount\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"CT17\\\");\\n\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        emit RepayBorrow(\\n            payer,\\n            borrower,\\n            vars.actualRepayAmount,\\n            vars.accountBorrowsNew,\\n            vars.totalBorrowsNew\\n        );\\n\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) internal nonReentrant returns (uint256, uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return (\\n                fail(\\n                    Error(error),\\n                    FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED\\n                ),\\n                0\\n            );\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return (\\n                fail(\\n                    Error(error),\\n                    FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED\\n                ),\\n                0\\n            );\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return\\n            liquidateBorrowFresh(\\n                msg.sender,\\n                borrower,\\n                repayAmount,\\n                cTokenCollateral\\n            );\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) internal returns (uint256, uint256) {\\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(cTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.LIQUIDATE_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        if (borrower == liquidator) {\\n            return (\\n                fail(\\n                    Error.INVALID_ACCOUNT_PAIR,\\n                    FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER\\n                ),\\n                0\\n            );\\n        }\\n\\n        if (repayAmount == 0) {\\n            return (\\n                fail(\\n                    Error.INVALID_CLOSE_AMOUNT_REQUESTED,\\n                    FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO\\n                ),\\n                0\\n            );\\n        }\\n\\n        if (repayAmount == type(uint256).max) {\\n            return (\\n                fail(\\n                    Error.INVALID_CLOSE_AMOUNT_REQUESTED,\\n                    FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX\\n                ),\\n                0\\n            );\\n        }\\n\\n        (\\n            uint256 repayBorrowError,\\n            uint256 actualRepayAmount\\n        ) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint256(Error.NO_ERROR)) {\\n            return (\\n                fail(\\n                    Error(repayBorrowError),\\n                    FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED\\n                ),\\n                0\\n            );\\n        }\\n\\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\\n            .liquidateCalculateSeizeTokens(\\n                address(this),\\n                address(cTokenCollateral),\\n                actualRepayAmount\\n            );\\n        require(amountSeizeError == uint256(Error.NO_ERROR), \\\"CT18\\\");\\n\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"CT19\\\");\\n\\n        uint256 seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(\\n                address(this),\\n                liquidator,\\n                borrower,\\n                seizeTokens\\n            );\\n        } else {\\n            seizeError = cTokenCollateral.seize(\\n                liquidator,\\n                borrower,\\n                seizeTokens\\n            );\\n        }\\n\\n        require(seizeError == uint256(Error.NO_ERROR), \\\"CT20\\\");\\n\\n        emit LiquidateBorrow(\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            address(cTokenCollateral),\\n            seizeTokens\\n        );\\n\\n        return (uint256(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external override nonReentrant returns (uint256) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    struct SeizeVars {\\n        uint256 seizeAmount;\\n        uint256 exchangeRate;\\n        uint256 borrowerTokensNew;\\n        uint256 borrowerAmountNew;\\n        uint256 liquidatorTokensNew;\\n        uint256 liquidatorAmountNew;\\n        uint256 totalCash;\\n        uint256 supplyRate;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal returns (uint256) {\\n        uint256 allowed = comptroller.seizeAllowed(\\n            address(this),\\n            seizerToken,\\n            liquidator,\\n            borrower,\\n            seizeTokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        if (borrower == liquidator) {\\n            return\\n                fail(\\n                    Error.INVALID_ACCOUNT_PAIR,\\n                    FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER\\n                );\\n        }\\n\\n        SeizeVars memory seizeVars;\\n\\n        MathError mathErr;\\n\\n        (mathErr, seizeVars.borrowerTokensNew) = subUInt(\\n            accountTokens[borrower].tokens,\\n            seizeTokens\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n                    uint256(mathErr)\\n                );\\n        }\\n\\n        seizeVars.totalCash = getCashPrior();\\n        seizeVars.supplyRate = interestRateModel.getSupplyRate(\\n            seizeVars.totalCash,\\n            totalBorrows,\\n            totalReserves,\\n            reserveFactorMantissa\\n        );\\n\\n        (, seizeVars.exchangeRate) = interestRateModel.getExchangeRate(\\n            seizeVars.totalCash,\\n            totalBorrows,\\n            totalReserves,\\n            totalSupply\\n        );\\n\\n        if (interestRateModel.isTropykusInterestRateModel()) {\\n            (, seizeVars.exchangeRate) = tropykusExchangeRateStoredInternal(\\n                borrower\\n            );\\n        }\\n\\n        (, seizeVars.seizeAmount) = mulUInt(\\n            seizeTokens,\\n            seizeVars.exchangeRate\\n        );\\n        (, seizeVars.seizeAmount) = divUInt(seizeVars.seizeAmount, 1e18);\\n\\n        (, seizeVars.borrowerAmountNew) = subUInt(\\n            accountTokens[borrower].underlyingAmount,\\n            seizeVars.seizeAmount\\n        );\\n\\n        (mathErr, seizeVars.liquidatorTokensNew) = addUInt(\\n            accountTokens[liquidator].tokens,\\n            seizeTokens\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n                    uint256(mathErr)\\n                );\\n        }\\n\\n        (, seizeVars.liquidatorAmountNew) = addUInt(\\n            accountTokens[liquidator].underlyingAmount,\\n            seizeVars.seizeAmount\\n        );\\n\\n        accountTokens[borrower].tokens = seizeVars.borrowerTokensNew;\\n        accountTokens[borrower].underlyingAmount = seizeVars.borrowerAmountNew;\\n        accountTokens[borrower].suppliedAt = getBlockNumber();\\n        accountTokens[borrower].promisedSupplyRate = seizeVars.supplyRate;\\n\\n        accountTokens[liquidator].tokens = seizeVars.liquidatorTokensNew;\\n        accountTokens[liquidator].underlyingAmount = seizeVars\\n            .liquidatorAmountNew;\\n        accountTokens[liquidator].suppliedAt = getBlockNumber();\\n        accountTokens[liquidator].promisedSupplyRate = seizeVars.supplyRate;\\n\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address payable newPendingAdmin)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK\\n                );\\n        }\\n\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        pendingAdmin = newPendingAdmin;\\n\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() external override returns (uint256) {\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK\\n                );\\n        }\\n\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        admin = pendingAdmin;\\n\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptroller(ComptrollerInterface newComptroller)\\n        public\\n        override\\n        returns (uint256)\\n    {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_COMPTROLLER_OWNER_CHECK\\n                );\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        require(newComptroller.isComptroller(), \\\"CT21\\\");\\n\\n        comptroller = newComptroller;\\n\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa)\\n        internal\\n        returns (uint256)\\n    {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK\\n                );\\n        }\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK\\n                );\\n        }\\n\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return\\n                fail(\\n                    Error.BAD_INPUT,\\n                    FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK\\n                );\\n        }\\n\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(\\n            oldReserveFactorMantissa,\\n            newReserveFactorMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint256 addAmount)\\n        internal\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n\\n        uint256 totalReservesNew;\\n        uint256 actualAddAmount;\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.ADD_RESERVES_FRESH_CHECK\\n                )\\n            );\\n        }\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        require(totalReservesNew >= totalReserves, \\\"CT22\\\");\\n\\n        totalReserves = totalReservesNew;\\n\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        return (uint256(Error.NO_ERROR));\\n    }\\n\\n    function _addSubsidyInternal(uint256 addAmount)\\n        internal\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_SUBSIDY_FUND_FAILED);\\n        }\\n\\n        uint256 subsidyFundNew;\\n        uint256 actualAddAmount;\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.ADD_SUBSIDY_FUND_FRESH_CHECK\\n                )\\n            );\\n        }\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        subsidyFundNew = subsidyFund + actualAddAmount;\\n\\n        require(subsidyFundNew >= subsidyFund, \\\"CT22\\\");\\n\\n        subsidyFund = subsidyFundNew;\\n\\n        emit SubsidyAdded(msg.sender, actualAddAmount, subsidyFundNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint256(Error.NO_ERROR));\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint256 reduceAmount)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint256 reduceAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 totalReservesNew;\\n\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.REDUCE_RESERVES_ADMIN_CHECK\\n                );\\n        }\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REDUCE_RESERVES_FRESH_CHECK\\n                );\\n        }\\n\\n        if (getCashPrior() < reduceAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE\\n                );\\n        }\\n\\n        if (reduceAmount > totalReserves) {\\n            return\\n                fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        require(totalReservesNew <= totalReserves, \\\"CT23\\\");\\n\\n        totalReserves = totalReservesNew;\\n\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\\n        public\\n        override\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel)\\n        internal\\n        returns (uint256)\\n    {\\n        InterestRateModel oldInterestRateModel;\\n\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK\\n                );\\n        }\\n\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK\\n                );\\n        }\\n\\n        oldInterestRateModel = interestRateModel;\\n\\n        require(newInterestRateModel.isInterestRateModel(), \\\"CT21\\\");\\n\\n        interestRateModel = newInterestRateModel;\\n\\n        emit NewMarketInterestRateModel(\\n            oldInterestRateModel,\\n            newInterestRateModel\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint256 amount)\\n        internal\\n        virtual\\n        returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0x66c781aa1ccc507ce80a431b9ee06801bb81b954bd0697a1f656de400b5cb381\",\"license\":\"UNLICENSED\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint256 internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint256 public initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint256 public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint256 public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint256 public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint256 public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint256 public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint256 public totalSupply;\\n\\n    uint256 public subsidyFund;\\n\\n    struct SupplySnapshot {\\n        uint256 tokens;\\n        uint256 underlyingAmount;\\n        uint256 suppliedAt;\\n        uint256 promisedSupplyRate;\\n    }\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => SupplySnapshot) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint256 principal;\\n        uint256 interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(\\n        uint256 cashPrior,\\n        uint256 interestAccumulated,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address indexed minter, uint256 mintAmount, uint256 mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(\\n        address indexed redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    );\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(\\n        address indexed borrower,\\n        uint256 borrowAmount,\\n        uint256 accountBorrows,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address indexed payer,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        uint256 accountBorrows,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        address indexed cTokenCollateral,\\n        uint256 seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(\\n        ComptrollerInterface oldComptroller,\\n        ComptrollerInterface newComptroller\\n    );\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModel oldInterestRateModel,\\n        InterestRateModel newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(\\n        uint256 oldReserveFactorMantissa,\\n        uint256 newReserveFactorMantissa\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(\\n        address benefactor,\\n        uint256 addAmount,\\n        uint256 newTotalReserves\\n    );\\n\\n    event SubsidyAdded(\\n        address benefactor,\\n        uint256 addAmount,\\n        uint256 newSubsidyFund\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(\\n        address admin,\\n        uint256 reduceAmount,\\n        uint256 newTotalReserves\\n    );\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event CTokenStorageFailure(uint256 error, uint256 info, uint256 detail);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint256 amount)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external virtual returns (bool);\\n\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function balanceOf(address owner) external view virtual returns (uint256);\\n\\n    function balanceOfUnderlying(address owner)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view virtual returns (uint256);\\n\\n    function supplyRatePerBlock() external view virtual returns (uint256);\\n\\n    function totalBorrowsCurrent() external virtual returns (uint256);\\n\\n    function borrowBalanceCurrent(address account)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    function borrowBalanceStored(address account)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function exchangeRateCurrent() public virtual returns (uint256);\\n\\n    function exchangeRateStored() public view virtual returns (uint256);\\n\\n    function getCash() external view virtual returns (uint256);\\n\\n    function accrueInterest() public virtual returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external virtual returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    function _acceptAdmin() external virtual returns (uint256);\\n\\n    function _setComptroller(ComptrollerInterface newComptroller)\\n        public\\n        virtual\\n        returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\\n        public\\n        virtual\\n        returns (uint256);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint256 mintAmount) external virtual returns (uint256);\\n\\n    function redeem(uint256 redeemAmount)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external virtual returns (uint256);\\n\\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint256 addAmount) external virtual returns (uint256);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(\\n        address oldImplementation,\\n        address newImplementation\\n    );\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) public virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public virtual;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public virtual;\\n}\\n\",\"keccak256\":\"0xd0c347830afeac6c54eb7fbac35b60215d9acdd1fb2a3abb16df18923384fa42\",\"license\":\"UNLICENSED\"},\"contracts/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\n/**\\n  * @title Careful Math\\n  * @author tropykus\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x2aa4360607bccc28c9bde237718c5fabc5e68a34befec92724d30bfbc0b9499f\",\"license\":\"UNLICENSED\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens)\\n        external\\n        virtual\\n        returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external virtual returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external virtual returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external virtual;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external virtual returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external virtual;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external virtual returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external virtual;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external virtual returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external virtual;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external virtual returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external virtual;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external virtual returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external virtual;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external virtual returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external virtual;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view virtual returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x4f6874b6790450374231de9b8c33652d620ec9457835e78d36ceaa561875a1b9\",\"license\":\"UNLICENSED\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount)\\n        external\\n        returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xe445bee8cc89c468e8822aa0d39c8f4ee6b6ac059191365ecef889cd83b53a75\",\"license\":\"UNLICENSED\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xab8b46aaf5f985d5e3e1f1aa3dbc2e30d69ae0760b3a6b0478f50b9fca3bbc39\",\"license\":\"UNLICENSED\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        ADD_SUBSIDY_FUND_FAILED,\\n        ADD_SUBSIDY_FUND_FRESH_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event TokenFailure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit TokenFailure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit TokenFailure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\",\"keccak256\":\"0x097b23a9ddec2e563458dadd7e03fb1756514acb8a05eb924da76b470582ceb9\",\"license\":\"UNLICENSED\"},\"contracts/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author tropykus\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) internal pure  returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x4d59359e644bc1df4c60f967b00027aed07612c3471c7c1206d61e10ab705475\",\"license\":\"UNLICENSED\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author tropykus\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0x50ebd15fc98c12e065477f11230f5d7cd583b5fe25a3c532cb90e75950667795\",\"license\":\"UNLICENSED\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title tropykus InterestRateModel Interface\\n * @author tropykus\\n */\\nabstract contract InterestRateModel is Exponential {\\n    using SafeMath for uint256;\\n\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n    bool public isTropykusInterestRateModel;\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint256 public constant blocksPerYear = 1051200;\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, 1e18]\\n     */\\n    function utilizationRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public pure virtual returns (uint256) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view virtual returns (uint256);\\n\\n    function getExchangeRate(\\n        uint256 _totalCash,\\n        uint256 _totalBorrows,\\n        uint256 _totalReserves,\\n        uint256 _totalSupply\\n    ) public pure returns (MathError, uint256) {\\n        /*\\n         * exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n         */\\n        Exp memory exchangeRate;\\n        MathError mathErr;\\n        uint256 cashPlusBorrowsMinusReserves;\\n        (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n            _totalCash,\\n            _totalBorrows,\\n            _totalReserves\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n        (mathErr, exchangeRate) = getExp(\\n            cashPlusBorrowsMinusReserves,\\n            _totalSupply\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, exchangeRate.mantissa);\\n    }\\n\\n    function isAboveOptimal(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public view virtual returns (bool) {\\n        cash;\\n        borrows;\\n        reserves;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x2cdc1a63482287513664d98d778c718c336461272885f61585c6ba404feb2edc\",\"license\":\"UNLICENSED\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n     * @notice Get the underlying price of a cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(CToken cToken)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x74e7a498f96d6fdab6dec52d7501bba644df3f498c6233247dd2db9687e839d8\",\"license\":\"UNLICENSED\"},\"contracts/PriceOracleAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nabstract contract PriceOracleAdapter {\\n    /// @notice Event adapter interface updated\\n    event PriceOracleAdapterUpdated(address oldAddress, address newAddress);\\n\\n    /**\\n     * @notice Get the price\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function assetPrices(address cTokenAddress)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xce2a8f27186d355a24a4402469afe76e4522e97ad9a1a8388defd85fa4c054ec\",\"license\":\"UNLICENSED\"},\"contracts/PriceOracleProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./PriceOracleAdapter.sol\\\";\\n\\ncontract PriceOracleProxy is PriceOracle {\\n    /// @notice Address of the guardian\\n    address public guardian;\\n    /// @notice Address of the pending guardian\\n    address public pendingGuardian;\\n    /// @notice Mapping of the cTokenAddress => adapterAddress\\n    mapping(address => address) public tokenAdapter;\\n    ///@notice Emitted when pendingGuardian is changed\\n    event NewPendingGuardian(\\n        address oldPendingGuardian,\\n        address newPendingGuardian\\n    );\\n    ///@notice Emitted when pendingGuardian is accepted, which means gaurdian is updated\\n    event NewGuardian(address oldGuardian, address newGuardian);\\n    /// @notice Struct of the cTokensDetail\\n    struct CtokenDetail {\\n        address cToken;\\n        string cTokenName;\\n    }\\n\\n    /// @notice Array of cTokensDetail\\n    CtokenDetail[] public cTokensArray;\\n\\n    /**\\n     * @notice Get the length of cTokensArray\\n     * @return The length of cTokensArray\\n     */\\n    function cTokenArrayCount() public view returns (uint256) {\\n        return cTokensArray.length;\\n    }\\n\\n    /// @param guardian_ The address of the guardian, which may set the\\n    constructor(address guardian_) {\\n        guardian = guardian_;\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a listed cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18)\\n     */\\n    function getUnderlyingPrice(CToken cToken)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        address oracleAdapter = tokenAdapter[address(cToken)];\\n        //validate mapping\\n        if (oracleAdapter == address(0)) {\\n            return 0;\\n        }\\n        return PriceOracleAdapter(oracleAdapter).assetPrices(address(cToken));\\n    }\\n\\n    /**\\n     * @notice Set the underlying price of a listed cToken asset\\n     * @param addressToken Address of the cToken\\n     * @param addressAdapter Address of the OracleAdapter\\n     */\\n    function setAdapterToToken(address addressToken, address addressAdapter)\\n        public\\n    {\\n        //validate only guardian can set\\n        require(\\n            msg.sender == guardian,\\n            \\\"PriceOracleProxy: only guardian may set the address\\\"\\n        );\\n        require(\\n            addressToken != address(0),\\n            \\\"PriceOracleProxy: address token can not be 0\\\"\\n        );\\n        require(\\n            addressAdapter != address(0),\\n            \\\"PriceOracleProxy: address adapter can not be 0\\\"\\n        );\\n        //validate and set new cToken in CtokenDetail\\n        if (tokenAdapter[addressToken] == address(0)) {\\n            CtokenDetail memory _cTokenD = CtokenDetail({\\n                cToken: addressToken,\\n                cTokenName: CToken(addressToken).symbol()\\n            });\\n\\n            cTokensArray.push(_cTokenD);\\n        }\\n        //set token => adapter\\n        tokenAdapter[addressToken] = addressAdapter;\\n    }\\n\\n    /**\\n     * @notice Begins transfer of gaurdian rights. The newPendingGaurdian must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingGuardian New pending gaurdian.\\n     */\\n    function _setPendingAdmin(address newPendingGuardian) public {\\n        // Check caller = gaurdian\\n        require(\\n            msg.sender == guardian,\\n            \\\"PriceOracleProxy: only guardian may set the address\\\"\\n        );\\n        require(\\n            newPendingGuardian != address(0),\\n            \\\"PriceOracleProxy: address admin can not be 0\\\"\\n        );\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingGuardian = guardian;\\n        // Store pendingGaurdian with value newPendingGaurdian\\n        pendingGuardian = newPendingGuardian;\\n        // Emit NewPendingGaurdian(oldPendingGaurdian, newPendingGaurdian)\\n        emit NewPendingGuardian(oldPendingGuardian, newPendingGuardian);\\n    }\\n\\n    /// @notice Accepts transfer of gaurdian rights. msg.sender must be pendingGaurdian\\n    function _acceptAdmin() public {\\n        // Check caller is pendingGaurdian and pendingGaurdian \\u2260 address(0)\\n        require(\\n            msg.sender == pendingGuardian,\\n            \\\"PriceOracleProxy: only guardian may set the address\\\"\\n        );\\n        require(\\n            msg.sender != address(0),\\n            \\\"PriceOracleProxy: sender can not be 0\\\"\\n        );\\n\\n        // Save current values for inclusion in log\\n        address oldGuardian = guardian;\\n        address oldPendingGaurdian = pendingGuardian;\\n\\n        // Store gaurdian with value pendingGaurdian\\n        guardian = pendingGuardian;\\n\\n        // Clear the pending value\\n        pendingGuardian = address(0);\\n\\n        emit NewGuardian(oldGuardian, guardian);\\n        emit NewPendingGuardian(oldPendingGaurdian, pendingGuardian);\\n    }\\n}\\n\",\"keccak256\":\"0x4fb04e6a373554880293e6dac16e2cf558489511cb45df6a6878cc24a8c0a6a5\",\"license\":\"UNLICENSED\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe578b9602160e7ddbb5e7b6d355bb4508fa134684afe46e4043602c652e0e041\",\"license\":\"UNLICENSED\"},\"contracts/WhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\ninterface WhitelistInterface {\\n    function setStatus(bool _newStatus) external;\\n    function enabled() external view returns(bool);\\n\\n    function addUsers(address[] memory _users) external;\\n    function exist(address _user) external view returns(bool);\\n    function getUsers() external view returns(address[] memory currentUsers);\\n    function removeUser(address _user) external;\\n}\",\"keccak256\":\"0xb00f782772179693611aefb08d51640de313bc901d6d9d78d1e1b86922e99130\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b84380380610b8483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610af1806100936000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063762c31ba11610066578063762c31ba146101335780637bdef09d14610146578063b71d1a0c1461016f578063e9c714f214610182578063fc57d4df1461018a57600080fd5b8063452a9320146100a3578063540399da146100d3578063639a0df7146100e557806366331bba1461010657806372a74ed51461011e575b600080fd5b6000546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003545b6040519081526020016100ca565b6100f86100f336600461095b565b61019d565b6040516100ca92919061098d565b61010e600181565b60405190151581526020016100ca565b61013161012c366004610875565b61025f565b005b6001546100b6906001600160a01b031681565b6100b6610154366004610858565b6002602052600090815260409020546001600160a01b031681565b61013161017d366004610858565b6104e6565b6101316105e1565b6100d7610198366004610858565b610714565b600381815481106101ad57600080fd5b6000918252602090912060029091020180546001820180546001600160a01b039092169350906101dc90610a52565b80601f016020809104026020016040519081016040528092919081815260200182805461020890610a52565b80156102555780601f1061022a57610100808354040283529160200191610255565b820191906000526020600020905b81548152906001019060200180831161023857829003601f168201915b5050505050905082565b6000546001600160a01b031633146102925760405162461bcd60e51b8152600401610289906109cf565b60405180910390fd5b6001600160a01b0382166102fd5760405162461bcd60e51b815260206004820152602c60248201527f50726963654f7261636c6550726f78793a206164647265737320746f6b656e2060448201526b063616e206e6f7420626520360a41b6064820152608401610289565b6001600160a01b03811661036a5760405162461bcd60e51b815260206004820152602e60248201527f50726963654f7261636c6550726f78793a20616464726573732061646170746560448201526d0722063616e206e6f7420626520360941b6064820152608401610289565b6001600160a01b03828116600090815260026020526040902054166104b85760006040518060400160405280846001600160a01b03168152602001846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156103de57600080fd5b505afa1580156103f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261041a91908101906108ae565b905260038054600181018255600091909152815160029091027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039093166001600160a01b0319909316929092178255602080840151805194955085946104b3937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c019291909101906107bf565b505050505b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031633146105105760405162461bcd60e51b8152600401610289906109cf565b6001600160a01b03811661057b5760405162461bcd60e51b815260206004820152602c60248201527f50726963654f7261636c6550726f78793a20616464726573732061646d696e2060448201526b063616e206e6f7420626520360a41b6064820152608401610289565b600054600180546001600160a01b0319166001600160a01b0384811691821790925560408051929093168083526020830191909152917f82b7d5b540b091a495b35b109d1fff4d3128e7c81e8b8277c9167628f10a0e0b91015b60405180910390a15050565b6001546001600160a01b0316331461060b5760405162461bcd60e51b8152600401610289906109cf565b336106665760405162461bcd60e51b815260206004820152602560248201527f50726963654f7261636c6550726f78793a2073656e6465722063616e206e6f74604482015264020626520360dc1b6064820152608401610289565b60008054600180546001600160a01b038082166001600160a01b031980861682179096559490911690915560408051919092168082526020820184905292917f08fdaf06427a2010e5958f4329b566993472d14ce81d3f16ce7f2a2660da98e3910160405180910390a1600154604080516001600160a01b03808516825290921660208301527f82b7d5b540b091a495b35b109d1fff4d3128e7c81e8b8277c9167628f10a0e0b91016105d5565b6001600160a01b038082166000908152600260205260408120549091168061073f5750600092915050565b6040516317a6948f60e21b81526001600160a01b038481166004830152821690635e9a523c9060240160206040518083038186803b15801561078057600080fd5b505afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b89190610974565b9392505050565b8280546107cb90610a52565b90600052602060002090601f0160209004810192826107ed5760008555610833565b82601f1061080657805160ff1916838001178555610833565b82800160010185558215610833579182015b82811115610833578251825591602001919060010190610818565b5061083f929150610843565b5090565b5b8082111561083f5760008155600101610844565b60006020828403121561086a57600080fd5b81356107b881610aa3565b6000806040838503121561088857600080fd5b823561089381610aa3565b915060208301356108a381610aa3565b809150509250929050565b6000602082840312156108c057600080fd5b815167ffffffffffffffff808211156108d857600080fd5b818401915084601f8301126108ec57600080fd5b8151818111156108fe576108fe610a8d565b604051601f8201601f19908116603f0116810190838211818310171561092657610926610a8d565b8160405282815287602084870101111561093f57600080fd5b610950836020830160208801610a22565b979650505050505050565b60006020828403121561096d57600080fd5b5035919050565b60006020828403121561098657600080fd5b5051919050565b60018060a01b038316815260406020820152600082518060408401526109ba816060850160208701610a22565b601f01601f1916919091016060019392505050565b60208082526033908201527f50726963654f7261636c6550726f78793a206f6e6c7920677561726469616e206040820152726d61792073657420746865206164647265737360681b606082015260800190565b60005b83811015610a3d578181015183820152602001610a25565b83811115610a4c576000848401525b50505050565b600181811c90821680610a6657607f821691505b60208210811415610a8757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab857600080fd5b5056fea264697066735822122041982bfa8263db6f67b4cb31b2123dc88c94c4bddf1142a19a52222187f77b6364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063762c31ba11610066578063762c31ba146101335780637bdef09d14610146578063b71d1a0c1461016f578063e9c714f214610182578063fc57d4df1461018a57600080fd5b8063452a9320146100a3578063540399da146100d3578063639a0df7146100e557806366331bba1461010657806372a74ed51461011e575b600080fd5b6000546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003545b6040519081526020016100ca565b6100f86100f336600461095b565b61019d565b6040516100ca92919061098d565b61010e600181565b60405190151581526020016100ca565b61013161012c366004610875565b61025f565b005b6001546100b6906001600160a01b031681565b6100b6610154366004610858565b6002602052600090815260409020546001600160a01b031681565b61013161017d366004610858565b6104e6565b6101316105e1565b6100d7610198366004610858565b610714565b600381815481106101ad57600080fd5b6000918252602090912060029091020180546001820180546001600160a01b039092169350906101dc90610a52565b80601f016020809104026020016040519081016040528092919081815260200182805461020890610a52565b80156102555780601f1061022a57610100808354040283529160200191610255565b820191906000526020600020905b81548152906001019060200180831161023857829003601f168201915b5050505050905082565b6000546001600160a01b031633146102925760405162461bcd60e51b8152600401610289906109cf565b60405180910390fd5b6001600160a01b0382166102fd5760405162461bcd60e51b815260206004820152602c60248201527f50726963654f7261636c6550726f78793a206164647265737320746f6b656e2060448201526b063616e206e6f7420626520360a41b6064820152608401610289565b6001600160a01b03811661036a5760405162461bcd60e51b815260206004820152602e60248201527f50726963654f7261636c6550726f78793a20616464726573732061646170746560448201526d0722063616e206e6f7420626520360941b6064820152608401610289565b6001600160a01b03828116600090815260026020526040902054166104b85760006040518060400160405280846001600160a01b03168152602001846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156103de57600080fd5b505afa1580156103f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261041a91908101906108ae565b905260038054600181018255600091909152815160029091027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039093166001600160a01b0319909316929092178255602080840151805194955085946104b3937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c019291909101906107bf565b505050505b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031633146105105760405162461bcd60e51b8152600401610289906109cf565b6001600160a01b03811661057b5760405162461bcd60e51b815260206004820152602c60248201527f50726963654f7261636c6550726f78793a20616464726573732061646d696e2060448201526b063616e206e6f7420626520360a41b6064820152608401610289565b600054600180546001600160a01b0319166001600160a01b0384811691821790925560408051929093168083526020830191909152917f82b7d5b540b091a495b35b109d1fff4d3128e7c81e8b8277c9167628f10a0e0b91015b60405180910390a15050565b6001546001600160a01b0316331461060b5760405162461bcd60e51b8152600401610289906109cf565b336106665760405162461bcd60e51b815260206004820152602560248201527f50726963654f7261636c6550726f78793a2073656e6465722063616e206e6f74604482015264020626520360dc1b6064820152608401610289565b60008054600180546001600160a01b038082166001600160a01b031980861682179096559490911690915560408051919092168082526020820184905292917f08fdaf06427a2010e5958f4329b566993472d14ce81d3f16ce7f2a2660da98e3910160405180910390a1600154604080516001600160a01b03808516825290921660208301527f82b7d5b540b091a495b35b109d1fff4d3128e7c81e8b8277c9167628f10a0e0b91016105d5565b6001600160a01b038082166000908152600260205260408120549091168061073f5750600092915050565b6040516317a6948f60e21b81526001600160a01b038481166004830152821690635e9a523c9060240160206040518083038186803b15801561078057600080fd5b505afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b89190610974565b9392505050565b8280546107cb90610a52565b90600052602060002090601f0160209004810192826107ed5760008555610833565b82601f1061080657805160ff1916838001178555610833565b82800160010185558215610833579182015b82811115610833578251825591602001919060010190610818565b5061083f929150610843565b5090565b5b8082111561083f5760008155600101610844565b60006020828403121561086a57600080fd5b81356107b881610aa3565b6000806040838503121561088857600080fd5b823561089381610aa3565b915060208301356108a381610aa3565b809150509250929050565b6000602082840312156108c057600080fd5b815167ffffffffffffffff808211156108d857600080fd5b818401915084601f8301126108ec57600080fd5b8151818111156108fe576108fe610a8d565b604051601f8201601f19908116603f0116810190838211818310171561092657610926610a8d565b8160405282815287602084870101111561093f57600080fd5b610950836020830160208801610a22565b979650505050505050565b60006020828403121561096d57600080fd5b5035919050565b60006020828403121561098657600080fd5b5051919050565b60018060a01b038316815260406020820152600082518060408401526109ba816060850160208701610a22565b601f01601f1916919091016060019392505050565b60208082526033908201527f50726963654f7261636c6550726f78793a206f6e6c7920677561726469616e206040820152726d61792073657420746865206164647265737360681b606082015260800190565b60005b83811015610a3d578181015183820152602001610a25565b83811115610a4c576000848401525b50505050565b600181811c90821680610a6657607f821691505b60208210811415610a8757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab857600080fd5b5056fea264697066735822122041982bfa8263db6f67b4cb31b2123dc88c94c4bddf1142a19a52222187f77b6364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_setPendingAdmin(address)": {
        "params": {
          "newPendingGuardian": "New pending gaurdian."
        }
      },
      "cTokenArrayCount()": {
        "returns": {
          "_0": "The length of cTokensArray"
        }
      },
      "constructor": {
        "params": {
          "guardian_": "The address of the guardian, which may set the"
        }
      },
      "getUnderlyingPrice(address)": {
        "params": {
          "cToken": "The cToken to get the underlying price of"
        },
        "returns": {
          "_0": "The underlying asset price mantissa (scaled by 1e18)"
        }
      },
      "setAdapterToToken(address,address)": {
        "params": {
          "addressAdapter": "Address of the OracleAdapter",
          "addressToken": "Address of the cToken"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewGuardian(address,address)": {
        "notice": "Emitted when pendingGuardian is accepted, which means gaurdian is updated"
      },
      "NewPendingGuardian(address,address)": {
        "notice": "Emitted when pendingGuardian is changed"
      }
    },
    "kind": "user",
    "methods": {
      "_acceptAdmin()": {
        "notice": "Accepts transfer of gaurdian rights. msg.sender must be pendingGaurdian"
      },
      "_setPendingAdmin(address)": {
        "notice": "Begins transfer of gaurdian rights. The newPendingGaurdian must call `_acceptAdmin` to finalize the transfer."
      },
      "cTokenArrayCount()": {
        "notice": "Get the length of cTokensArray"
      },
      "cTokensArray(uint256)": {
        "notice": "Array of cTokensDetail"
      },
      "getUnderlyingPrice(address)": {
        "notice": "Get the underlying price of a listed cToken asset"
      },
      "guardian()": {
        "notice": "Address of the guardian"
      },
      "isPriceOracle()": {
        "notice": "Indicator that this is a PriceOracle contract (for inspection)"
      },
      "pendingGuardian()": {
        "notice": "Address of the pending guardian"
      },
      "setAdapterToToken(address,address)": {
        "notice": "Set the underlying price of a listed cToken asset"
      },
      "tokenAdapter(address)": {
        "notice": "Mapping of the cTokenAddress => adapterAddress"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40032,
        "contract": "contracts/PriceOracleProxy.sol:PriceOracleProxy",
        "label": "guardian",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 40035,
        "contract": "contracts/PriceOracleProxy.sol:PriceOracleProxy",
        "label": "pendingGuardian",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 40040,
        "contract": "contracts/PriceOracleProxy.sol:PriceOracleProxy",
        "label": "tokenAdapter",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 40064,
        "contract": "contracts/PriceOracleProxy.sol:PriceOracleProxy",
        "label": "cTokensArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(CtokenDetail)40059_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(CtokenDetail)40059_storage)dyn_storage": {
        "base": "t_struct(CtokenDetail)40059_storage",
        "encoding": "dynamic_array",
        "label": "struct PriceOracleProxy.CtokenDetail[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CtokenDetail)40059_storage": {
        "encoding": "inplace",
        "label": "struct PriceOracleProxy.CtokenDetail",
        "members": [
          {
            "astId": 40056,
            "contract": "contracts/PriceOracleProxy.sol:PriceOracleProxy",
            "label": "cToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 40058,
            "contract": "contracts/PriceOracleProxy.sol:PriceOracleProxy",
            "label": "cTokenName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}